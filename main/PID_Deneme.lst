;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 10/16/2024 11:41:59 AM
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0x000000041126  	GOTO	_main
0x0004	0x000000  	0
0x0006	0x000000  	0
0x0008	0x000000  	0
0x000A	0x000000  	0
0x000C	0x000000  	0
0x000E	0x000000  	0
0x0010	0x000000  	0
0x0012	0x000000  	0
0x0014	0x000000  	0
0x0016	0x000000  	0
0x0018	0x000000  	0
0x001A	0x0010DC  	4316
0x001C	0x000000  	0
0x001E	0x000000  	0
0x0020	0x000000  	0
0x0022	0x0010FE  	4350
0x0024	0x000000  	0
0x0026	0x000000  	0
0x0028	0x000000  	0
0x002A	0x000000  	0
0x002C	0x000000  	0
0x002E	0x000000  	0
0x0030	0x000000  	0
0x0032	0x000000  	0
0x0034	0x000000  	0
0x0036	0x000000  	0
0x0038	0x000000  	0
0x003A	0x000000  	0
0x003C	0x000000  	0
0x003E	0x000000  	0
0x0040	0x000000  	0
0x0042	0x000000  	0
0x0044	0x000000  	0
0x0046	0x000000  	0
0x0048	0x000000  	0
0x004A	0x000000  	0
0x004C	0x000000  	0
0x004E	0x000000  	0
0x0050	0x000000  	0
0x0052	0x000000  	0
0x0054	0x000000  	0
0x0056	0x000000  	0
0x0058	0x000000  	0
0x005A	0x000000  	0
0x005C	0x000000  	0
0x005E	0x000000  	0
0x0060	0x000000  	0
0x0062	0x000000  	0
0x0064	0x000000  	0
0x0066	0x000000  	0
0x0068	0x000000  	0
0x006A	0x000000  	0
0x006C	0x000000  	0
0x006E	0x000000  	0
0x0070	0x000000  	0
0x0072	0x000000  	0
0x0074	0x000000  	0
0x0076	0x000000  	0
0x0078	0x000000  	0
0x007A	0x000000  	0
0x007C	0x000000  	0
0x007E	0x000000  	0
0x0080	0x000000  	0
0x0082	0x000000  	0
0x0084	0x000000  	0
0x0086	0x000000  	0
0x0088	0x000000  	0
0x008A	0x000000  	0
0x008C	0x000000  	0
0x008E	0x000000  	0
0x0090	0x000000  	0
0x0092	0x000000  	0
0x0094	0x000000  	0
0x0096	0x000000  	0
0x0098	0x000000  	0
0x009A	0x000000  	0
0x009C	0x000000  	0
0x009E	0x000000  	0
0x00A0	0x000000  	0
0x00A2	0x000000  	0
0x00A4	0x000000  	0
0x00A6	0x000000  	0
0x00A8	0x000000  	0
0x00AA	0x000000  	0
0x00AC	0x000000  	0
0x00AE	0x000000  	0
0x00B0	0x000000  	0
0x00B2	0x000000  	0
0x00B4	0x000000  	0
0x00B6	0x000000  	0
0x00B8	0x000000  	0
0x00BA	0x000000  	0
0x00BC	0x000000  	0
0x00BE	0x000000  	0
0x00C0	0x000000  	0
0x00C2	0x000000  	0
0x00C4	0x000000  	0
0x00C6	0x000000  	0
0x00C8	0x000000  	0
0x00CA	0x000000  	0
0x00CC	0x000000  	0
0x00CE	0x000000  	0
0x00D0	0x000000  	0
0x00D2	0x000000  	0
0x00D4	0x000000  	0
0x00D6	0x000000  	0
0x00D8	0x000000  	0
0x00DA	0x000000  	0
0x00DC	0x000000  	0
0x00DE	0x000000  	0
0x00E0	0x000000  	0
0x00E2	0x000000  	0
0x00E4	0x000000  	0
0x00E6	0x000000  	0
0x00E8	0x000000  	0
0x00EA	0x000000  	0
0x00EC	0x000000  	0
0x00EE	0x000000  	0
0x00F0	0x000000  	0
0x00F2	0x000000  	0
0x00F4	0x000000  	0
0x00F6	0x000000  	0
0x00F8	0x000000  	0
0x00FA	0x000000  	0
0x00FC	0x000000  	0
0x00FE	0x000000  	0
0x0100	0x000000  	0
0x0102	0x000000  	0
0x0104	0x000000  	0
0x0106	0x000000  	0
0x0108	0x000000  	0
0x010A	0x000000  	0
0x010C	0x000000  	0
0x010E	0x000000  	0
0x0110	0x000000  	0
0x0112	0x000000  	0
0x0114	0x000000  	0
0x0116	0x000000  	0
0x0118	0x000000  	0
0x011A	0x000000  	0
0x011C	0x000000  	0
0x011E	0x000000  	0
0x0120	0x000000  	0
0x0122	0x000000  	0
0x0124	0x000000  	0
0x0126	0x000000  	0
0x0128	0x000000  	0
0x012A	0x000000  	0
0x012C	0x000000  	0
0x012E	0x000000  	0
0x0130	0x000000  	0
0x0132	0x000000  	0
0x0134	0x000000  	0
0x0136	0x000000  	0
0x0138	0x000000  	0
0x013A	0x000000  	0
0x013C	0x000000  	0
0x013E	0x000000  	0
0x0140	0x000000  	0
0x0142	0x000000  	0
0x0144	0x000000  	0
0x0146	0x000000  	0
0x0148	0x000000  	0
0x014A	0x000000  	0
0x014C	0x000000  	0
0x014E	0x000000  	0
0x0150	0x000000  	0
0x0152	0x000000  	0
0x0154	0x000000  	0
0x0156	0x000000  	0
0x0158	0x000000  	0
0x015A	0x000000  	0
0x015C	0x000000  	0
0x015E	0x000000  	0
0x0160	0x000000  	0
0x0162	0x000000  	0
0x0164	0x000000  	0
0x0166	0x000000  	0
0x0168	0x000000  	0
0x016A	0x000000  	0
0x016C	0x000000  	0
0x016E	0x000000  	0
0x0170	0x000000  	0
0x0172	0x000000  	0
0x0174	0x000000  	0
0x0176	0x000000  	0
0x0178	0x000000  	0
0x017A	0x000000  	0
0x017C	0x000000  	0
0x017E	0x000000  	0
0x0180	0x000000  	0
0x0182	0x000000  	0
0x0184	0x000000  	0
0x0186	0x000000  	0
0x0188	0x000000  	0
0x018A	0x000000  	0
0x018C	0x000000  	0
0x018E	0x000000  	0
0x0190	0x000000  	0
0x0192	0x000000  	0
0x0194	0x000000  	0
0x0196	0x000000  	0
0x0198	0x000000  	0
0x019A	0x000000  	0
0x019C	0x000000  	0
0x019E	0x000000  	0
0x01A0	0x000000  	0
0x01A2	0x000000  	0
0x01A4	0x000000  	0
0x01A6	0x000000  	0
0x01A8	0x000000  	0
0x01AA	0x000000  	0
0x01AC	0x000000  	0
0x01AE	0x000000  	0
0x01B0	0x000000  	0
0x01B2	0x000000  	0
0x01B4	0x000000  	0
0x01B6	0x000000  	0
0x01B8	0x000000  	0
0x01BA	0x000000  	0
0x01BC	0x000000  	0
0x01BE	0x000000  	0
0x01C0	0x000000  	0
0x01C2	0x000000  	0
0x01C4	0x000000  	0
0x01C6	0x000000  	0
0x01C8	0x000000  	0
0x01CA	0x000000  	0
0x01CC	0x000000  	0
0x01CE	0x000000  	0
0x01D0	0x000000  	0
0x01D2	0x000000  	0
0x01D4	0x000000  	0
0x01D6	0x000000  	0
0x01D8	0x000000  	0
0x01DA	0x000000  	0
0x01DC	0x000000  	0
0x01DE	0x000000  	0
0x01E0	0x000000  	0
0x01E2	0x000000  	0
0x01E4	0x000000  	0
0x01E6	0x000000  	0
0x01E8	0x000000  	0
0x01EA	0x000000  	0
0x01EC	0x000000  	0
0x01EE	0x000000  	0
0x01F0	0x000000  	0
0x01F2	0x000000  	0
0x01F4	0x000000  	0
0x01F6	0x000000  	0
0x01F8	0x000000  	0
0x01FA	0x000000  	0
0x01FC	0x000000  	0
0x01FE	0x000000  	0
_main:
0x1126	0x20850F  	MOV	#2128, W15
0x1128	0x247FF0  	MOV	#18431, W0
0x112A	0xB7A020  	MOV	WREG, SPLIM
0x112C	0x200010  	MOV	#1, W0
0x112E	0xB7A034  	MOV	WREG, PSVPAG
0x1130	0x200040  	MOV	#4, W0
0x1132	0xB72044  	IOR	CORCON
0x1134	0x0000000211E4  	CALL	4580
;PID_Deneme.c,32 :: 		void main()
;PID_Deneme.c,35 :: 		asm CLRWDT;
0x1138	0x781F8A  	PUSH	W10
0x113A	0x781F8B  	PUSH	W11
0x113C	0x781F8C  	PUSH	W12
0x113E	0xFE6000  	CLRWDT
;PID_Deneme.c,36 :: 		acilis();
0x1140	0x07FCE2  	RCALL	_acilis
;PID_Deneme.c,39 :: 		sifirla();
0x1142	0x07FE8C  	RCALL	_sifirla
;PID_Deneme.c,40 :: 		slot_CS();
0x1144	0x07FD62  	RCALL	_slot_CS
;PID_Deneme.c,41 :: 		Delay_ms(10);
0x1146	0x2D0557  	MOV	#53333, W7
L_main0:
0x1148	0xED200E  	DEC	W7
0x114A	0x3AFFFE  	BRA NZ	L_main0
0x114C	0x000000  	NOP
;PID_Deneme.c,42 :: 		emniyet_rolesi=1;
0x114E	0xA8A2E4  	BSET	emniyet_rolesi, BitPos(emniyet_rolesi+0)
;PID_Deneme.c,43 :: 		asm CLRWDT;
0x1150	0xFE6000  	CLRWDT
;PID_Deneme.c,44 :: 		Delay_ms(100);
0x1152	0x200098  	MOV	#9, W8
0x1154	0x223577  	MOV	#9047, W7
L_main2:
0x1156	0xED200E  	DEC	W7
0x1158	0x3AFFFE  	BRA NZ	L_main2
0x115A	0xED2010  	DEC	W8
0x115C	0x3AFFFC  	BRA NZ	L_main2
;PID_Deneme.c,46 :: 		Vdac=186*Vout;
0x115E	0x280000  	MOV	#32768, W0
0x1160	0x244681  	MOV	#17512, W1
0x1162	0x884040  	MOV	W0, _Vdac
0x1164	0x884051  	MOV	W1, _Vdac+2
;PID_Deneme.c,51 :: 		PID_Init(&pid , PID_KP , PID_KI , PID_KD);
0x1166	0x2CCCDB  	MOV	#52429, W11
0x1168	0x23F4CC  	MOV	#16204, W12
0x116A	0x20828A  	MOV	#lo_addr(_pid), W10
0x116C	0x2CCCD0  	MOV	#52429, W0
0x116E	0x23DCC1  	MOV	#15820, W1
0x1170	0xBE9F80  	PUSH.D	W0
0x1172	0x2CCCD0  	MOV	#52429, W0
0x1174	0x23DCC1  	MOV	#15820, W1
0x1176	0xBE9F80  	PUSH.D	W0
0x1178	0x07FF3B  	RCALL	_PID_Init
0x117A	0xB1008F  	SUB	#8, W15
;PID_Deneme.c,56 :: 		while(1)
L_main4:
;PID_Deneme.c,58 :: 		AN1 = MCP_3208V(0,7);
0x117C	0xB3C07B  	MOV.B	#7, W11
0x117E	0xEF2014  	CLR	W10
0x1180	0x07FF60  	RCALL	_MCP_3208V
0x1182	0x884030  	MOV	W0, _AN1
;PID_Deneme.c,59 :: 		analogValue = AN1/2;
0x1184	0xDE0041  	LSR	W0, #1, W0
0x1186	0x884000  	MOV	W0, _analogValue
;PID_Deneme.c,61 :: 		Delay_ms(100);
0x1188	0x200098  	MOV	#9, W8
0x118A	0x223577  	MOV	#9047, W7
L_main6:
0x118C	0xED200E  	DEC	W7
0x118E	0x3AFFFE  	BRA NZ	L_main6
0x1190	0xED2010  	DEC	W8
0x1192	0x3AFFFC  	BRA NZ	L_main6
;PID_Deneme.c,63 :: 		pid_out = PID_Proccess(&pid , Vdac , analogValue);
0x1194	0x804000  	MOV	_analogValue, W0
0x1196	0xDE80CF  	ASR	W0, #15, W1
0x1198	0xEB8100  	SETM	W2
0x119A	0x07FBEC  	RCALL	__Long2Float
0x119C	0x80404B  	MOV	_Vdac, W11
0x119E	0x80405C  	MOV	_Vdac+2, W12
0x11A0	0x20828A  	MOV	#lo_addr(_pid), W10
0x11A2	0xBE9F80  	PUSH.D	W0
0x11A4	0x07FE9C  	RCALL	_PID_Proccess
0x11A6	0xB1004F  	SUB	#4, W15
0x11A8	0x884120  	MOV	W0, _pid_out
0x11AA	0x884131  	MOV	W1, _pid_out+2
;PID_Deneme.c,65 :: 		MCP_4922(1995,1);
0x11AC	0xB3C01B  	MOV.B	#1, W11
0x11AE	0x207CBA  	MOV	#1995, W10
0x11B0	0x07FE34  	RCALL	_MCP_4922
;PID_Deneme.c,66 :: 		MCP_4922((int)pid_out,2);
0x11B2	0x804120  	MOV	_pid_out, W0
0x11B4	0x804131  	MOV	_pid_out+2, W1
0x11B6	0x07FDF5  	RCALL	__Float2Longint
0x11B8	0xB3C02B  	MOV.B	#2, W11
0x11BA	0x780500  	MOV	W0, W10
0x11BC	0x07FE2E  	RCALL	_MCP_4922
;PID_Deneme.c,67 :: 		MCP_4922(1995,3);
0x11BE	0xB3C03B  	MOV.B	#3, W11
0x11C0	0x207CBA  	MOV	#1995, W10
0x11C2	0x07FE2B  	RCALL	_MCP_4922
;PID_Deneme.c,68 :: 		MCP_4922(1995,4);
0x11C4	0xB3C04B  	MOV.B	#4, W11
0x11C6	0x207CBA  	MOV	#1995, W10
0x11C8	0x07FE28  	RCALL	_MCP_4922
;PID_Deneme.c,69 :: 		MCP_4922(Vdac,5);
0x11CA	0x804040  	MOV	_Vdac, W0
0x11CC	0x804051  	MOV	_Vdac+2, W1
0x11CE	0x07FDE9  	RCALL	__Float2Longint
0x11D0	0xB3C05B  	MOV.B	#5, W11
0x11D2	0x780500  	MOV	W0, W10
0x11D4	0x07FE22  	RCALL	_MCP_4922
;PID_Deneme.c,72 :: 		slot_CS();
0x11D6	0x07FD19  	RCALL	_slot_CS
;PID_Deneme.c,73 :: 		asm CLRWDT;
0x11D8	0xFE6000  	CLRWDT
;PID_Deneme.c,75 :: 		}
0x11DA	0x37FFD0  	BRA	L_main4
;PID_Deneme.c,76 :: 		}
L_end_main:
0x11DC	0x78064F  	POP	W12
0x11DE	0x7805CF  	POP	W11
0x11E0	0x78054F  	POP	W10
L__main_end_loop:
0x11E2	0x37FFFF  	BRA	L__main_end_loop
; end of _main
_acilis:
;UYGULAMA.c,113 :: 		void acilis()
;UYGULAMA.c,115 :: 		ad1pcfgl=0xFFFF;                                                           //TUM PINLER DIGITAL
0x0B06	0x781F8A  	PUSH	W10
0x0B08	0x781F8B  	PUSH	W11
0x0B0A	0x2FFFF0  	MOV	#65535, W0
0x0B0C	0xB7A32C  	MOV	WREG, AD1PCFGL
;UYGULAMA.c,116 :: 		cm1con.f15=0;                                                              //comparator kapalý
0x0B0E	0xA9E635  	BCLR	CM1CON, #15
;UYGULAMA.c,117 :: 		cm2con.f15=0;                                                              //comparator kapalý
0x0B10	0xA9E637  	BCLR	CM2CON, #15
;UYGULAMA.c,118 :: 		cm3con.f15=0;                                                              //comparator kapalý
0x0B12	0xA9E639  	BCLR	CM3CON, #15
;UYGULAMA.c,121 :: 		emniyet_rolesi_dir=0;
0x0B14	0xA9A2E0  	BCLR	emniyet_rolesi_dir, BitPos(emniyet_rolesi_dir+0)
;UYGULAMA.c,122 :: 		emniyet_rolesi=0;
0x0B16	0xA9A2E4  	BCLR	emniyet_rolesi, BitPos(emniyet_rolesi+0)
;UYGULAMA.c,125 :: 		latch_DINPUT_dir=0;
0x0B18	0xA942E0  	BCLR	latch_DINPUT_dir, BitPos(latch_DINPUT_dir+0)
;UYGULAMA.c,126 :: 		qdata_DINPUT_dir=1;
0x0B1A	0xA882E0  	BSET	qdata_DINPUT_dir, BitPos(qdata_DINPUT_dir+0)
;UYGULAMA.c,127 :: 		clk_DINPUT_dir=0;
0x0B1C	0xA962E0  	BCLR	clk_DINPUT_dir, BitPos(clk_DINPUT_dir+0)
;UYGULAMA.c,129 :: 		load_CS_dir=0;
0x0B1E	0xA982C9  	BCLR	load_CS_dir, BitPos(load_CS_dir+0)
;UYGULAMA.c,130 :: 		idata_CS_dir=0;
0x0B20	0xA9A2C9  	BCLR	idata_CS_dir, BitPos(idata_CS_dir+0)
;UYGULAMA.c,131 :: 		clk_CS_dir=0;
0x0B22	0xA922E0  	BCLR	clk_CS_dir, BitPos(clk_CS_dir+0)
;UYGULAMA.c,133 :: 		slot_spi_miso_dir=1;
0x0B24	0xA862D8  	BSET	slot_spi_miso_dir, BitPos(slot_spi_miso_dir+0)
;UYGULAMA.c,134 :: 		slot_spi_mosi_dir=0;
0x0B26	0xA942D8  	BCLR	slot_spi_mosi_dir, BitPos(slot_spi_mosi_dir+0)
;UYGULAMA.c,135 :: 		slot_spi_sck_dir=0;
0x0B28	0xA922D8  	BCLR	slot_spi_sck_dir, BitPos(slot_spi_sck_dir+0)
;UYGULAMA.c,158 :: 		spi1con1bits.MODE16=0;                                                     //1byte communication
0x0B2A	0xA94243  	BCLR	SPI1CON1bits, #10
;UYGULAMA.c,159 :: 		spi1con1bits.DISSCK=0;                                                     //Internal SPI clock is enabled
0x0B2C	0xA98243  	BCLR	SPI1CON1bits, #12
;UYGULAMA.c,160 :: 		spi1con1bits.DISSDO=0;                                                     //SDOx pin is controlled by the module
0x0B2E	0xA96243  	BCLR	SPI1CON1bits, #11
;UYGULAMA.c,161 :: 		spi1con1bits.SSEN=1;                                                       //SSx pin used for Slave mode
0x0B30	0xA8E242  	BSET	SPI1CON1bits, #7
;UYGULAMA.c,162 :: 		spi1con1bits.MSTEN=1;                                                      //master mode
0x0B32	0xA8A242  	BSET	SPI1CON1bits, #5
;UYGULAMA.c,163 :: 		spi1con2bits.SPIFSD=0;                                                     //Frame sync pulse output (master)
0x0B34	0xA9C245  	BCLR	SPI1CON2bits, #14
;UYGULAMA.c,164 :: 		spi1con2bits.SPIBEN=0;                                                     //Enhanced Buffer disabled (Legacy mode)
0x0B36	0xA90244  	BCLR	SPI1CON2bits, #0
;UYGULAMA.c,166 :: 		spi2con1bits.MODE16=0;                                                     //1byte communication
0x0B38	0xA94263  	BCLR	SPI2CON1bits, #10
;UYGULAMA.c,167 :: 		spi2con1bits.DISSCK=0;                                                     //Internal SPI clock is enabled
0x0B3A	0xA98263  	BCLR	SPI2CON1bits, #12
;UYGULAMA.c,168 :: 		spi2con1bits.DISSDO=0;                                                     //SDOx pin is controlled by the module
0x0B3C	0xA96263  	BCLR	SPI2CON1bits, #11
;UYGULAMA.c,169 :: 		spi2con1bits.SSEN=1;                                                       //SSx pin used for Slave mode
0x0B3E	0xA8E262  	BSET	SPI2CON1bits, #7
;UYGULAMA.c,170 :: 		spi2con1bits.MSTEN=1;                                                      //master mode
0x0B40	0xA8A262  	BSET	SPI2CON1bits, #5
;UYGULAMA.c,171 :: 		spi2con2bits.SPIFSD=0;                                                     //Frame sync pulse output (master)
0x0B42	0xA9C265  	BCLR	SPI2CON2bits, #14
;UYGULAMA.c,172 :: 		spi2con2bits.SPIBEN=0;                                                     //Enhanced Buffer disabled (Legacy mode)
0x0B44	0xA90264  	BCLR	SPI2CON2bits, #0
;UYGULAMA.c,174 :: 		spi3con1bits.MODE16=0;                                                     //1byte communication
0x0B46	0xA94283  	BCLR	SPI3CON1bits, #10
;UYGULAMA.c,175 :: 		spi3con1bits.DISSCK=0;                                                     //Internal SPI clock is enabled
0x0B48	0xA98283  	BCLR	SPI3CON1bits, #12
;UYGULAMA.c,176 :: 		spi3con1bits.DISSDO=0;                                                     //SDOx pin is controlled by the module
0x0B4A	0xA96283  	BCLR	SPI3CON1bits, #11
;UYGULAMA.c,177 :: 		spi3con1bits.SSEN=1;                                                       //SSx pin used for Slave mode
0x0B4C	0xA8E282  	BSET	SPI3CON1bits, #7
;UYGULAMA.c,178 :: 		spi3con1bits.MSTEN=1;                                                      //master mode
0x0B4E	0xA8A282  	BSET	SPI3CON1bits, #5
;UYGULAMA.c,179 :: 		spi3con2bits.SPIFSD=0;                                                     //Frame sync pulse output (master)
0x0B50	0xA9C285  	BCLR	SPI3CON2bits, #14
;UYGULAMA.c,180 :: 		spi3con2bits.SPIBEN=0;                                                     //Enhanced Buffer disabled (Legacy mode)
0x0B52	0xA90284  	BCLR	SPI3CON2bits, #0
;UYGULAMA.c,182 :: 		oscconbits.IOLOCK=0;   //unlock
0x0B54	0xA9C742  	BCLR	OSCCONbits, #6
;UYGULAMA.c,185 :: 		RPINR20bits.SDI1R=22;        //SPI1 SDI RP22    Pin 51
0x0B56	0xB3C160  	MOV.B	#22, W0
0x0B58	0x784080  	MOV.B	W0, W1
0x0B5A	0x206A80  	MOV	#lo_addr(RPINR20bits), W0
0x0B5C	0x68C090  	XOR.B	W1, [W0], W1
0x0B5E	0xB3C3F0  	MOV.B	#63, W0
0x0B60	0x60C080  	AND.B	W1, W0, W1
0x0B62	0x206A80  	MOV	#lo_addr(RPINR20bits), W0
0x0B64	0x68C090  	XOR.B	W1, [W0], W1
0x0B66	0x206A80  	MOV	#lo_addr(RPINR20bits), W0
0x0B68	0x784801  	MOV.B	W1, [W0]
;UYGULAMA.c,186 :: 		RPOR11bits.RP23R=7;          //SPI1 SDO RP23    Pin 50
0x0B6A	0x207000  	MOV	#1792, W0
0x0B6C	0x780080  	MOV	W0, W1
0x0B6E	0x206D60  	MOV	#lo_addr(RPOR11bits), W0
0x0B70	0x688090  	XOR	W1, [W0], W1
0x0B72	0x23F000  	MOV	#16128, W0
0x0B74	0x608080  	AND	W1, W0, W1
0x0B76	0x206D60  	MOV	#lo_addr(RPOR11bits), W0
0x0B78	0x688090  	XOR	W1, [W0], W1
0x0B7A	0x8836B1  	MOV	W1, RPOR11bits
;UYGULAMA.c,187 :: 		RPOR12bits.RP24R=8;          //SPI1 SCK RP24    Pin 49
0x0B7C	0xB3C080  	MOV.B	#8, W0
0x0B7E	0x784080  	MOV.B	W0, W1
0x0B80	0x206D80  	MOV	#lo_addr(RPOR12bits), W0
0x0B82	0x68C090  	XOR.B	W1, [W0], W1
0x0B84	0xB3C3F0  	MOV.B	#63, W0
0x0B86	0x60C080  	AND.B	W1, W0, W1
0x0B88	0x206D80  	MOV	#lo_addr(RPOR12bits), W0
0x0B8A	0x68C090  	XOR.B	W1, [W0], W1
0x0B8C	0x206D80  	MOV	#lo_addr(RPOR12bits), W0
0x0B8E	0x784801  	MOV.B	W1, [W0]
;UYGULAMA.c,190 :: 		RPINR22bits.SDI2R=2;        //SPI2 SDI RP2      Pin 42
0x0B90	0xB3C020  	MOV.B	#2, W0
0x0B92	0x784080  	MOV.B	W0, W1
0x0B94	0x206AC0  	MOV	#lo_addr(RPINR22bits), W0
0x0B96	0x68C090  	XOR.B	W1, [W0], W1
0x0B98	0xB3C3F0  	MOV.B	#63, W0
0x0B9A	0x60C080  	AND.B	W1, W0, W1
0x0B9C	0x206AC0  	MOV	#lo_addr(RPINR22bits), W0
0x0B9E	0x68C090  	XOR.B	W1, [W0], W1
0x0BA0	0x206AC0  	MOV	#lo_addr(RPINR22bits), W0
0x0BA2	0x784801  	MOV.B	W1, [W0]
;UYGULAMA.c,191 :: 		RPOR2bits.RP4R=10;          //SPI2 SDO RP4      Pin 43
0x0BA4	0xB3C0A0  	MOV.B	#10, W0
0x0BA6	0x784080  	MOV.B	W0, W1
0x0BA8	0x206C40  	MOV	#lo_addr(RPOR2bits), W0
0x0BAA	0x68C090  	XOR.B	W1, [W0], W1
0x0BAC	0xB3C3F0  	MOV.B	#63, W0
0x0BAE	0x60C080  	AND.B	W1, W0, W1
0x0BB0	0x206C40  	MOV	#lo_addr(RPOR2bits), W0
0x0BB2	0x68C090  	XOR.B	W1, [W0], W1
0x0BB4	0x206C40  	MOV	#lo_addr(RPOR2bits), W0
0x0BB6	0x784801  	MOV.B	W1, [W0]
;UYGULAMA.c,192 :: 		RPOR1bits.RP3R=11;          //SPI2 SCK RP3      Pin 44
0x0BB8	0x20B000  	MOV	#2816, W0
0x0BBA	0x780080  	MOV	W0, W1
0x0BBC	0x206C20  	MOV	#lo_addr(RPOR1bits), W0
0x0BBE	0x688090  	XOR	W1, [W0], W1
0x0BC0	0x23F000  	MOV	#16128, W0
0x0BC2	0x608080  	AND	W1, W0, W1
0x0BC4	0x206C20  	MOV	#lo_addr(RPOR1bits), W0
0x0BC6	0x688090  	XOR	W1, [W0], W1
0x0BC8	0x883611  	MOV	W1, RPOR1bits
;UYGULAMA.c,199 :: 		oscconbits.IOLOCK=1;                                                       //lock
0x0BCA	0xA8C742  	BSET	OSCCONbits, #6
;UYGULAMA.c,201 :: 		SPI1STATbits.SPIROV=0;                                                     //No overflow has occurred
0x0BCC	0xA9C240  	BCLR	SPI1STATbits, #6
;UYGULAMA.c,202 :: 		SPI1STATbits.SPIEN=1;                                                      //spi1 enable
0x0BCE	0xA8E241  	BSET	SPI1STATbits, #15
;UYGULAMA.c,204 :: 		SPI2STATbits.SPIROV=0;                                                     //No overflow has occurred
0x0BD0	0xA9C260  	BCLR	SPI2STATbits, #6
;UYGULAMA.c,205 :: 		SPI2STATbits.SPIEN=1;                                                      //spi2 enable
0x0BD2	0xA8E261  	BSET	SPI2STATbits, #15
;UYGULAMA.c,207 :: 		SPI3STATbits.SPIROV=0;                                                     //No overflow has occurred
0x0BD4	0xA9C280  	BCLR	SPI3STATbits, #6
;UYGULAMA.c,208 :: 		SPI3STATbits.SPIEN=1;                                                      //spi3 enable
0x0BD6	0xA8E281  	BSET	SPI3STATbits, #15
;UYGULAMA.c,211 :: 		SPI1_init();
0x0BD8	0x07FF4B  	RCALL	_SPI1_Init
;UYGULAMA.c,212 :: 		SPI2_init();
0x0BDA	0x07FF5E  	RCALL	_SPI2_Init
;UYGULAMA.c,213 :: 		SPI3_init();
0x0BDC	0x07FF30  	RCALL	_SPI3_Init
;UYGULAMA.c,215 :: 		SPI_Set_Active(SPI1_Read, SPI1_Write);                                     // Sets the SPI1 module active
0x0BDE	0x205C2B  	MOV	#lo_addr(_SPI1_Write), W11
0x0BE0	0x20474A  	MOV	#lo_addr(_SPI1_Read), W10
0x0BE2	0x07FF41  	RCALL	_SPI_Set_Active
;UYGULAMA.c,216 :: 		SPI_Set_Active(SPI2_Read, SPI2_Write);                                     // Sets the SPI2 module active
0x0BE4	0x2FFFFB  	MOV	#lo_addr(_SPI2_Write), W11
0x0BE6	0x2FFFFA  	MOV	#lo_addr(_SPI2_Read), W10
0x0BE8	0x07FF3E  	RCALL	_SPI_Set_Active
;UYGULAMA.c,217 :: 		SPI_Set_Active(SPI3_Read, SPI3_Write);                                     // Sets the SPI3 module active
0x0BEA	0x2FFFFB  	MOV	#lo_addr(_SPI3_Write), W11
0x0BEC	0x2FFFFA  	MOV	#lo_addr(_SPI3_Read), W10
0x0BEE	0x07FF3B  	RCALL	_SPI_Set_Active
;UYGULAMA.c,219 :: 		SPI1STATbits.SPIROV=0;                                                     //No overflow has occurred
0x0BF0	0xA9C240  	BCLR	SPI1STATbits, #6
;UYGULAMA.c,220 :: 		SPI2STATbits.SPIROV=0;                                                     //No overflow has occurred
0x0BF2	0xA9C260  	BCLR	SPI2STATbits, #6
;UYGULAMA.c,221 :: 		SPI3STATbits.SPIROV=0;                                                     //No overflow has occurred
0x0BF4	0xA9C280  	BCLR	SPI3STATbits, #6
;UYGULAMA.c,224 :: 		I2C2CONbits.I2CEN=0;                                                       //i2c enable
0x0BF6	0xA9E217  	BCLR	I2C2CONbits, #15
;UYGULAMA.c,225 :: 		I2C2CONbits.SEN=1;                                                         //Initiates Start condition on SDAx and SCLx pins. Hardware clear at end of master Start sequence.
0x0BF8	0xA80216  	BSET	I2C2CONbits, #0
;UYGULAMA.c,226 :: 		I2C2CONbits.PEN=1;                                                         //Stop condition in progress
0x0BFA	0xA84216  	BSET	I2C2CONbits, #2
;UYGULAMA.c,227 :: 		I2C2CONbits.ACKEN=1;                                                       //Acknowledge sequence in progress
0x0BFC	0xA88216  	BSET	I2C2CONbits, #4
;UYGULAMA.c,228 :: 		I2C2_Init(100000);
0x0BFE	0x286A0A  	MOV	#34464, W10
0x0C00	0x20001B  	MOV	#1, W11
0x0C02	0x07FF5E  	RCALL	_I2C2_Init
;UYGULAMA.c,230 :: 		}
L_end_acilis:
0x0C04	0x7805CF  	POP	W11
0x0C06	0x78054F  	POP	W10
0x0C08	0x060000  	RETURN
; end of _acilis
_SPI1_Init:
0x0A70	0xFA0000  	LNK	#0
;__Lib_SPI_123_p24fj.c,147 :: 		
;__Lib_SPI_123_p24fj.c,149 :: 		
0x0A72	0x204740  	MOV	#lo_addr(_SPI1_Read), W0
0x0A74	0x884110  	MOV	W0, _SPI_Rd_Ptr
;__Lib_SPI_123_p24fj.c,150 :: 		
0x0A76	0x205C20  	MOV	#lo_addr(_SPI1_Write), W0
0x0A78	0x884100  	MOV	W0, _SPI_Wr_Ptr
;__Lib_SPI_123_p24fj.c,152 :: 		
0x0A7A	0xEF2240  	CLR	SPI1STAT
;__Lib_SPI_123_p24fj.c,153 :: 		
0x0A7C	0xEF2242  	CLR	SPI1CON
;__Lib_SPI_123_p24fj.c,155 :: 		
0x0A7E	0xA8A242  	BSET	SPI1CON, #5
;__Lib_SPI_123_p24fj.c,156 :: 		
0x0A80	0xA9C242  	BCLR	SPI1CON, #6
;__Lib_SPI_123_p24fj.c,158 :: 		
0x0A82	0x2001C1  	MOV	#28, W1
0x0A84	0x202420  	MOV	#lo_addr(SPI1CON), W0
0x0A86	0x708810  	IOR	W1, [W0], [W0]
;__Lib_SPI_123_p24fj.c,160 :: 		
0x0A88	0x2FFFC1  	MOV	#65532, W1
0x0A8A	0x202420  	MOV	#lo_addr(SPI1CON), W0
0x0A8C	0x608810  	AND	W1, [W0], [W0]
;__Lib_SPI_123_p24fj.c,161 :: 		
0x0A8E	0xA80243  	BSET	SPI1CON, #8
;__Lib_SPI_123_p24fj.c,163 :: 		
0x0A90	0xA9C240  	BCLR	SPI1STAT, #6
;__Lib_SPI_123_p24fj.c,164 :: 		
0x0A92	0xA8E241  	BSET	SPI1STAT, #15
;__Lib_SPI_123_p24fj.c,166 :: 		
L_end_SPI1_Init:
0x0A94	0xFA8000  	ULNK
0x0A96	0x060000  	RETURN
; end of _SPI1_Init
_SPI2_Init:
0x0A98	0xFA0000  	LNK	#0
;__Lib_SPI_123_p24fj.c,211 :: 		
;__Lib_SPI_123_p24fj.c,213 :: 		
0x0A9A	0x2FFFF0  	MOV	#lo_addr(_SPI2_Read), W0
0x0A9C	0x884110  	MOV	W0, _SPI_Rd_Ptr
;__Lib_SPI_123_p24fj.c,214 :: 		
0x0A9E	0x2FFFF0  	MOV	#lo_addr(_SPI2_Write), W0
0x0AA0	0x884100  	MOV	W0, _SPI_Wr_Ptr
;__Lib_SPI_123_p24fj.c,216 :: 		
0x0AA2	0xEF2260  	CLR	SPI2STAT
;__Lib_SPI_123_p24fj.c,217 :: 		
0x0AA4	0xEF2262  	CLR	SPI2CON
;__Lib_SPI_123_p24fj.c,219 :: 		
0x0AA6	0xA8A262  	BSET	SPI2CON, #5
;__Lib_SPI_123_p24fj.c,220 :: 		
0x0AA8	0xA9C262  	BCLR	SPI2CON, #6
;__Lib_SPI_123_p24fj.c,222 :: 		
0x0AAA	0x2001C1  	MOV	#28, W1
0x0AAC	0x202620  	MOV	#lo_addr(SPI2CON), W0
0x0AAE	0x708810  	IOR	W1, [W0], [W0]
;__Lib_SPI_123_p24fj.c,224 :: 		
0x0AB0	0x2FFFC1  	MOV	#65532, W1
0x0AB2	0x202620  	MOV	#lo_addr(SPI2CON), W0
0x0AB4	0x608810  	AND	W1, [W0], [W0]
;__Lib_SPI_123_p24fj.c,225 :: 		
0x0AB6	0xA80263  	BSET	SPI2CON, #8
;__Lib_SPI_123_p24fj.c,227 :: 		
0x0AB8	0xA9C260  	BCLR	SPI2STAT, #6
;__Lib_SPI_123_p24fj.c,228 :: 		
0x0ABA	0xA8E261  	BSET	SPI2STAT, #15
;__Lib_SPI_123_p24fj.c,230 :: 		
L_end_SPI2_Init:
0x0ABC	0xFA8000  	ULNK
0x0ABE	0x060000  	RETURN
; end of _SPI2_Init
_SPI3_Init:
0x0A3E	0xFA0000  	LNK	#0
;__Lib_SPI_123_p24fj.c,274 :: 		
;__Lib_SPI_123_p24fj.c,276 :: 		
0x0A40	0x2FFFF0  	MOV	#lo_addr(_SPI3_Read), W0
0x0A42	0x884110  	MOV	W0, _SPI_Rd_Ptr
;__Lib_SPI_123_p24fj.c,277 :: 		
0x0A44	0x2FFFF0  	MOV	#lo_addr(_SPI3_Write), W0
0x0A46	0x884100  	MOV	W0, _SPI_Wr_Ptr
;__Lib_SPI_123_p24fj.c,279 :: 		
0x0A48	0xEF2280  	CLR	SPI3STAT
;__Lib_SPI_123_p24fj.c,280 :: 		
0x0A4A	0xEF2282  	CLR	SPI3CON1
;__Lib_SPI_123_p24fj.c,282 :: 		
0x0A4C	0xA8A282  	BSET	SPI3CON1, #5
;__Lib_SPI_123_p24fj.c,283 :: 		
0x0A4E	0xA9C282  	BCLR	SPI3CON1, #6
;__Lib_SPI_123_p24fj.c,285 :: 		
0x0A50	0x2001C1  	MOV	#28, W1
0x0A52	0x202820  	MOV	#lo_addr(SPI3CON1), W0
0x0A54	0x708810  	IOR	W1, [W0], [W0]
;__Lib_SPI_123_p24fj.c,287 :: 		
0x0A56	0x2FFFC1  	MOV	#65532, W1
0x0A58	0x202820  	MOV	#lo_addr(SPI3CON1), W0
0x0A5A	0x608810  	AND	W1, [W0], [W0]
;__Lib_SPI_123_p24fj.c,289 :: 		
0x0A5C	0xA80283  	BSET	SPI3CON1, #8
;__Lib_SPI_123_p24fj.c,291 :: 		
0x0A5E	0xA9C280  	BCLR	SPI3STAT, #6
;__Lib_SPI_123_p24fj.c,292 :: 		
0x0A60	0xA8E281  	BSET	SPI3STAT, #15
;__Lib_SPI_123_p24fj.c,294 :: 		
L_end_SPI3_Init:
0x0A62	0xFA8000  	ULNK
0x0A64	0x060000  	RETURN
; end of _SPI3_Init
_SPI_Set_Active:
0x0A66	0xFA0000  	LNK	#0
;__Lib_SPI_123_p24fj.c,297 :: 		
;__Lib_SPI_123_p24fj.c,298 :: 		
0x0A68	0x88411A  	MOV	W10, _SPI_Rd_Ptr
;__Lib_SPI_123_p24fj.c,299 :: 		
0x0A6A	0x88410B  	MOV	W11, _SPI_Wr_Ptr
;__Lib_SPI_123_p24fj.c,300 :: 		
L_end_SPI_Set_Active:
0x0A6C	0xFA8000  	ULNK
0x0A6E	0x060000  	RETURN
; end of _SPI_Set_Active
_I2C2_Init:
0x0AC0	0xFA0004  	LNK	#4
;__Lib_I2C_123_p24fj.c,304 :: 		
;__Lib_I2C_123_p24fj.c,312 :: 		
0x0AC2	0x07FC1F  	RCALL	_Get_Fosc_kHz
0x0AC4	0x201F42  	MOV	#500, W2
0x0AC6	0x200003  	MOV	#0, W3
0x0AC8	0x07FC13  	RCALL	__Multiply_32x32
; fcy start address is: 4 (W2)
0x0ACA	0xBE0100  	MOV.D	W0, W2
;__Lib_I2C_123_p24fj.c,313 :: 		
0x0ACC	0xBE9F82  	PUSH.D	W2
0x0ACE	0xBE9F8A  	PUSH.D	W10
0x0AD0	0xBE0002  	MOV.D	W2, W0
0x0AD2	0x296802  	MOV	#38528, W2
0x0AD4	0x200983  	MOV	#152, W3
0x0AD6	0xEB0200  	CLR	W4
0x0AD8	0x07FBE2  	RCALL	__Divide_32x32
0x0ADA	0xBE054F  	POP.D	W10
0x0ADC	0xBE014F  	POP.D	W2
0x0ADE	0x980700  	MOV	W0, [W14+0]
0x0AE0	0x980711  	MOV	W1, [W14+2]
;__Lib_I2C_123_p24fj.c,314 :: 		
0x0AE2	0xBE0002  	MOV.D	W2, W0
0x0AE4	0xBE010A  	MOV.D	W10, W2
0x0AE6	0xEB0200  	CLR	W4
0x0AE8	0x07FBDA  	RCALL	__Divide_32x32
0x0AEA	0xBE0100  	MOV.D	W0, W2
;__Lib_I2C_123_p24fj.c,315 :: 		
0x0AEC	0x470060  	ADD	W14, #0, W0
0x0AEE	0x510130  	SUB	W2, [W0++], W2
0x0AF0	0x5981A0  	SUBB	W3, [W0--], W3
0x0AF2	0x510061  	SUB	W2, #1, W0
0x0AF4	0x5980E0  	SUBB	W3, #0, W1
; fcy end address is: 4 (W2)
; fcy start address is: 0 (W0)
;__Lib_I2C_123_p24fj.c,317 :: 		
0x0AF6	0x8810A0  	MOV	W0, I2C2BRG
; fcy end address is: 0 (W0)
;__Lib_I2C_123_p24fj.c,318 :: 		
0x0AF8	0xA8E217  	BSET	I2C2CON, #15
;__Lib_I2C_123_p24fj.c,319 :: 		
0x0AFA	0x07FBAE  	RCALL	_Delay_100ms
;__Lib_I2C_123_p24fj.c,320 :: 		
0x0AFC	0xEF2218  	CLR	I2C2STAT
;__Lib_I2C_123_p24fj.c,322 :: 		
0x0AFE	0x07FBA5  	RCALL	__Lib_I2C_123_p24fj_I2C2_Wait_For_Idle
;__Lib_I2C_123_p24fj.c,324 :: 		
0x0B00	0x07FBB2  	RCALL	_Delay_1us
;__Lib_I2C_123_p24fj.c,326 :: 		
L_end_I2C2_Init:
0x0B02	0xFA8000  	ULNK
0x0B04	0x060000  	RETURN
; end of _I2C2_Init
_Get_Fosc_kHz:
;__Lib_Delays.c,38 :: 		unsigned long Get_Fosc_kHz() {
;__Lib_Delays.c,39 :: 		return Clock_kHz();
0x0302	0x27D000  	MOV	#32000, W0
0x0304	0x200001  	MOV	#0, W1
;__Lib_Delays.c,40 :: 		}
L_end_Get_Fosc_kHz:
0x0306	0x060000  	RETURN
; end of _Get_Fosc_kHz
_Delay_100ms:
;__Lib_Delays.c,666 :: 		void Delay_100ms()
;__Lib_Delays.c,668 :: 		Delay_ms(100);
0x0258	0x200098  	MOV	#9, W8
0x025A	0x223577  	MOV	#9047, W7
L_Delay_100ms33:
0x025C	0xED200E  	DEC	W7
0x025E	0x3AFFFE  	BRA NZ	L_Delay_100ms33
0x0260	0xED2010  	DEC	W8
0x0262	0x3AFFFC  	BRA NZ	L_Delay_100ms33
;__Lib_Delays.c,669 :: 		}
L_end_Delay_100ms:
0x0264	0x060000  	RETURN
; end of _Delay_100ms
__Lib_I2C_123_p24fj_I2C2_Wait_For_Idle:
0x024A	0xFA0000  	LNK	#0
;__Lib_I2C_123_p24fj.c,221 :: 		
;__Lib_I2C_123_p24fj.c,223 :: 		
L___Lib_I2C_123_p24fj_I2C2_Wait_For_Idle23:
0x024C	0x07FFD9  	RCALL	_I2C2_Is_Idle
0x024E	0xE20000  	CP0	W0
0x0250	0x3A0001  	BRA NZ	L___Lib_I2C_123_p24fj_I2C2_Wait_For_Idle24
L___Lib_I2C_123_p24fj_I2C2_Wait_For_Idle86:
;__Lib_I2C_123_p24fj.c,224 :: 		
0x0252	0x37FFFC  	BRA	L___Lib_I2C_123_p24fj_I2C2_Wait_For_Idle23
L___Lib_I2C_123_p24fj_I2C2_Wait_For_Idle24:
;__Lib_I2C_123_p24fj.c,225 :: 		
L_end_I2C2_Wait_For_Idle:
0x0254	0xFA8000  	ULNK
0x0256	0x060000  	RETURN
; end of __Lib_I2C_123_p24fj_I2C2_Wait_For_Idle
_I2C2_Is_Idle:
0x0200	0xFA0000  	LNK	#0
;__Lib_I2C_123_p24fj.c,212 :: 		
;__Lib_I2C_123_p24fj.c,214 :: 		
0x0202	0xEF6002  	CLR.B	W1
0x0204	0xAF0216  	BTSC	I2C2CON, #0
0x0206	0xEC6002  	INC.B	W1
0x0208	0xEF6000  	CLR.B	W0
0x020A	0xAF4216  	BTSC	I2C2CON, #2
0x020C	0xEC6000  	INC.B	W0
0x020E	0xFB8081  	ZE	W1, W1
0x0210	0xFB8000  	ZE	W0, W0
0x0212	0x708080  	IOR	W1, W0, W1
0x0214	0xEF6000  	CLR.B	W0
0x0216	0xAF6216  	BTSC	I2C2CON, #3
0x0218	0xEC6000  	INC.B	W0
0x021A	0xFB8000  	ZE	W0, W0
0x021C	0x708080  	IOR	W1, W0, W1
0x021E	0xEF6000  	CLR.B	W0
0x0220	0xAF8216  	BTSC	I2C2CON, #4
0x0222	0xEC6000  	INC.B	W0
0x0224	0xFB8000  	ZE	W0, W0
0x0226	0x708080  	IOR	W1, W0, W1
;__Lib_I2C_123_p24fj.c,215 :: 		
0x0228	0xEF6000  	CLR.B	W0
0x022A	0xAF2216  	BTSC	I2C2CON, #1
0x022C	0xEC6000  	INC.B	W0
0x022E	0xFB8000  	ZE	W0, W0
0x0230	0x708080  	IOR	W1, W0, W1
0x0232	0xEF6000  	CLR.B	W0
0x0234	0xAFC219  	BTSC	I2C2STAT, #14
0x0236	0xEC6000  	INC.B	W0
0x0238	0xFB8000  	ZE	W0, W0
0x023A	0x708000  	IOR	W1, W0, W0
;__Lib_I2C_123_p24fj.c,217 :: 		
0x023C	0xE20000  	CP0	W0
0x023E	0xEF6000  	CLR.B	W0
0x0240	0x3A0001  	BRA NZ	L__I2C2_Is_Idle84
0x0242	0xEC6000  	INC.B	W0
L__I2C2_Is_Idle84:
0x0244	0xFB8000  	ZE	W0, W0
;__Lib_I2C_123_p24fj.c,218 :: 		
L_end_I2C2_Is_Idle:
0x0246	0xFA8000  	ULNK
0x0248	0x060000  	RETURN
; end of _I2C2_Is_Idle
_Delay_1us:
;__Lib_Delays.c,380 :: 		void Delay_1us()
;__Lib_Delays.c,382 :: 		Delay_us(1);
0x0266	0x200057  	MOV	#5, W7
L_Delay_1us11:
0x0268	0xED200E  	DEC	W7
0x026A	0x3AFFFE  	BRA NZ	L_Delay_1us11
0x026C	0x000000  	NOP
;__Lib_Delays.c,383 :: 		}
L_end_Delay_1us:
0x026E	0x060000  	RETURN
; end of _Delay_1us
__Multiply_32x32:
0x02F0	0xFA0000  	LNK	#0
;__Lib_Math.c,43 :: 		
;__Lib_Math.c,46 :: 		
0x02F2	0xB80A02  	MUL.UU	W1, W2, W4
;__Lib_Math.c,47 :: 		
0x02F4	0x880050  	MOV	W0, W5
;__Lib_Math.c,48 :: 		
0x02F6	0xB80002  	MUL.UU	W0, W2, W0
;__Lib_Math.c,49 :: 		
0x02F8	0x420081  	ADD	W4, W1, W1
;__Lib_Math.c,50 :: 		
0x02FA	0xB82A03  	MUL.UU	W5, W3, W4
;__Lib_Math.c,51 :: 		
0x02FC	0x420081  	ADD	W4, W1, W1
;__Lib_Math.c,54 :: 		
L_end__Multiply_32x32:
0x02FE	0xFA8000  	ULNK
0x0300	0x060000  	RETURN
; end of __Multiply_32x32
__Divide_32x32:
0x029E	0xFA0000  	LNK	#0
;__Lib_Math.c,78 :: 		
;__Lib_Math.c,81 :: 		
0x02A0	0x070002  	RCALL	Divide_32x32___testsus
;__Lib_Math.c,83 :: 		
0x02A2	0x0000000402EC  	GOTO	the_end_Divide_32x32
;__Lib_Math.c,88 :: 		
Divide_32x32___testsus:
;__Lib_Math.c,89 :: 		
0x02A6	0xE20008  	CP0	W4
;__Lib_Math.c,90 :: 		
0x02A8	0x3A0002  	BRA NZ	Divide_32x32___divsi3
;__Lib_Math.c,92 :: 		
0x02AA	0x070010  	RCALL	Divide_32x32___udivsi3
;__Lib_Math.c,93 :: 		
0x02AC	0x060000  	RETURN
;__Lib_Math.c,95 :: 		
Divide_32x32___divsi3:
;__Lib_Math.c,96 :: 		
0x02AE	0x689F83  	XOR	W1, W3, [W15++]
;__Lib_Math.c,97 :: 		
0x02B0	0xE20002  	CP0	W1
;__Lib_Math.c,98 :: 		
0x02B2	0x3D0002  	BRA GE	Divide_32x32_divtestb
;__Lib_Math.c,99 :: 		
0x02B4	0x100060  	SUBR	W0, #0, W0
;__Lib_Math.c,100 :: 		
0x02B6	0x1880E0  	SUBBR	W1, #0, W1
;__Lib_Math.c,101 :: 		
Divide_32x32_divtestb:
;__Lib_Math.c,102 :: 		
0x02B8	0xE20006  	CP0	W3
;__Lib_Math.c,103 :: 		
0x02BA	0x3D0002  	BRA GE	Divide_32x32_calcquot
;__Lib_Math.c,104 :: 		
0x02BC	0x110160  	SUBR	W2, #0, W2
;__Lib_Math.c,105 :: 		
0x02BE	0x1981E0  	SUBBR	W3, #0, W3
;__Lib_Math.c,106 :: 		
Divide_32x32_calcquot:
;__Lib_Math.c,107 :: 		
0x02C0	0x070005  	RCALL	Divide_32x32___udivsi3
;__Lib_Math.c,108 :: 		
0x02C2	0xE0004F  	CP0	[--W15]
;__Lib_Math.c,109 :: 		
0x02C4	0x3B0002  	BRA NN	Divide_32x32_returnq
;__Lib_Math.c,110 :: 		
0x02C6	0x100060  	SUBR	W0, #0, W0
;__Lib_Math.c,111 :: 		
0x02C8	0x1880E0  	SUBBR	W1, #0, W1
;__Lib_Math.c,112 :: 		
Divide_32x32_returnq:
;__Lib_Math.c,113 :: 		
0x02CA	0x060000  	RETURN
;__Lib_Math.c,114 :: 		
Divide_32x32___udivsi3:
;__Lib_Math.c,115 :: 		
0x02CC	0xB82260  	MUL.UU	W4, #0, W4
;__Lib_Math.c,116 :: 		
0x02CE	0x200206  	MOV	#32, W6
;__Lib_Math.c,117 :: 		
Divide_32x32_nextbit:
;__Lib_Math.c,118 :: 		
0x02D0	0xD00000  	SL	W0, W0
;__Lib_Math.c,119 :: 		
0x02D2	0xD28081  	RLC	W1, W1
;__Lib_Math.c,120 :: 		
0x02D4	0xD28204  	RLC	W4, W4
;__Lib_Math.c,121 :: 		
0x02D6	0xD28285  	RLC	W5, W5
;__Lib_Math.c,122 :: 		
0x02D8	0xA80000  	BSET	W0, #0
;__Lib_Math.c,123 :: 		
0x02DA	0x520202  	SUB	W4, W2, W4
;__Lib_Math.c,124 :: 		
0x02DC	0x5A8283  	SUBB	W5, W3, W5
;__Lib_Math.c,125 :: 		
0x02DE	0x3B0003  	BRA NN	Divide_32x32_iterate
;__Lib_Math.c,126 :: 		
0x02E0	0x420202  	ADD	W4, W2, W4
;__Lib_Math.c,127 :: 		
0x02E2	0x4A8283  	ADDC	W5, W3, W5
;__Lib_Math.c,128 :: 		
0x02E4	0xA10000  	BCLR	W0, #0
;__Lib_Math.c,129 :: 		
Divide_32x32_iterate:
;__Lib_Math.c,130 :: 		
0x02E6	0xE90306  	DEC	W6, W6
;__Lib_Math.c,131 :: 		
0x02E8	0x3AFFF3  	BRA NZ	Divide_32x32_nextbit
;__Lib_Math.c,132 :: 		
0x02EA	0x060000  	RETURN
;__Lib_Math.c,135 :: 		
the_end_Divide_32x32:
;__Lib_Math.c,138 :: 		
L_end__Divide_32x32:
0x02EC	0xFA8000  	ULNK
0x02EE	0x060000  	RETURN
; end of __Divide_32x32
_sifirla:
;UYGULAMA.c,103 :: 		void sifirla()
;UYGULAMA.c,106 :: 		CS1=1,CS2=1,CS3=1,CS4=1,CS5=1,CS6=1,CS7=1,CS8=1;
0x0E5C	0x2081E0  	MOV	#lo_addr(_CS1), W0
0x0E5E	0xA02010  	BSET	[W0], BitPos(_CS1+0)
0x0E60	0x2081E0  	MOV	#lo_addr(_CS2), W0
0x0E62	0xA03010  	BSET	[W0], BitPos(_CS2+0)
0x0E64	0x2081E0  	MOV	#lo_addr(_CS3), W0
0x0E66	0xA04010  	BSET	[W0], BitPos(_CS3+0)
0x0E68	0x2081E0  	MOV	#lo_addr(_CS4), W0
0x0E6A	0xA01010  	BSET	[W0], BitPos(_CS4+0)
0x0E6C	0x2081C0  	MOV	#lo_addr(_CS5), W0
0x0E6E	0xA0E010  	BSET	[W0], BitPos(_CS5+0)
0x0E70	0x2081C0  	MOV	#lo_addr(_CS6), W0
0x0E72	0xA0F010  	BSET	[W0], BitPos(_CS6+0)
0x0E74	0x2081E0  	MOV	#lo_addr(_CS7), W0
0x0E76	0xA00010  	BSET	[W0], BitPos(_CS7+0)
0x0E78	0x2081C0  	MOV	#lo_addr(_CS8), W0
0x0E7A	0xA04010  	BSET	[W0], BitPos(_CS8+0)
;UYGULAMA.c,107 :: 		CS9=1,CS10=1,CS11=1,CS12=1,CS13=1,CS14=1,CS15=1,CS16=1;
0x0E7C	0x2081C0  	MOV	#lo_addr(_CS9), W0
0x0E7E	0xA05010  	BSET	[W0], BitPos(_CS9+0)
0x0E80	0x2081C0  	MOV	#lo_addr(_CS10), W0
0x0E82	0xA06010  	BSET	[W0], BitPos(_CS10+0)
0x0E84	0x2081C0  	MOV	#lo_addr(_CS11), W0
0x0E86	0xA03010  	BSET	[W0], BitPos(_CS11+0)
0x0E88	0x2081C0  	MOV	#lo_addr(_CS12), W0
0x0E8A	0xA00010  	BSET	[W0], BitPos(_CS12+0)
0x0E8C	0x2081C0  	MOV	#lo_addr(_CS13), W0
0x0E8E	0xA01010  	BSET	[W0], BitPos(_CS13+0)
0x0E90	0x2081C0  	MOV	#lo_addr(_CS14), W0
0x0E92	0xA02010  	BSET	[W0], BitPos(_CS14+0)
0x0E94	0x2081C0  	MOV	#lo_addr(_CS15), W0
0x0E96	0xA0B010  	BSET	[W0], BitPos(_CS15+0)
0x0E98	0x2081C0  	MOV	#lo_addr(_CS16), W0
0x0E9A	0xA0C010  	BSET	[W0], BitPos(_CS16+0)
;UYGULAMA.c,108 :: 		CS17=1,CS18=1,CS19=1,CS20=1,CS21=1,CS22=1,CS23=1,CS24=1;
0x0E9C	0x2081C0  	MOV	#lo_addr(_CS17), W0
0x0E9E	0xA0D010  	BSET	[W0], BitPos(_CS17+0)
0x0EA0	0x2081C0  	MOV	#lo_addr(_CS18), W0
0x0EA2	0xA0A010  	BSET	[W0], BitPos(_CS18+0)
0x0EA4	0x2081C0  	MOV	#lo_addr(_CS19), W0
0x0EA6	0xA07010  	BSET	[W0], BitPos(_CS19+0)
0x0EA8	0x2081E0  	MOV	#lo_addr(_CS20), W0
0x0EAA	0xA0F010  	BSET	[W0], BitPos(_CS20+0)
0x0EAC	0x2081E0  	MOV	#lo_addr(_CS21), W0
0x0EAE	0xA0E010  	BSET	[W0], BitPos(_CS21+0)
0x0EB0	0x2081E0  	MOV	#lo_addr(_CS22), W0
0x0EB2	0xA0A010  	BSET	[W0], BitPos(_CS22+0)
0x0EB4	0x2081E0  	MOV	#lo_addr(_CS23), W0
0x0EB6	0xA09010  	BSET	[W0], BitPos(_CS23+0)
0x0EB8	0x2081E0  	MOV	#lo_addr(_CS24), W0
0x0EBA	0xA08010  	BSET	[W0], BitPos(_CS24+0)
;UYGULAMA.c,109 :: 		CS25=1,CS26=1,CS27=1,LED1=0,LED2=0,LED3=0,LED4=0,ACIL_RLY=0;
0x0EBC	0x2081E0  	MOV	#lo_addr(_CS25), W0
0x0EBE	0xA0B010  	BSET	[W0], BitPos(_CS25+0)
0x0EC0	0x2081E0  	MOV	#lo_addr(_CS26), W0
0x0EC2	0xA0D010  	BSET	[W0], BitPos(_CS26+0)
0x0EC4	0x2081E0  	MOV	#lo_addr(_CS27), W0
0x0EC6	0xA0C010  	BSET	[W0], BitPos(_CS27+0)
0x0EC8	0x2081C0  	MOV	#lo_addr(_LED1), W0
0x0ECA	0xA18010  	BCLR	[W0], BitPos(_LED1+0)
0x0ECC	0x2081C0  	MOV	#lo_addr(_LED2), W0
0x0ECE	0xA19010  	BCLR	[W0], BitPos(_LED2+0)
0x0ED0	0x2081E0  	MOV	#lo_addr(_LED3), W0
0x0ED2	0xA15010  	BCLR	[W0], BitPos(_LED3+0)
0x0ED4	0x2081E0  	MOV	#lo_addr(_LED4), W0
0x0ED6	0xA16010  	BCLR	[W0], BitPos(_LED4+0)
0x0ED8	0x2081E0  	MOV	#lo_addr(_ACIL_RLY), W0
0x0EDA	0xA17010  	BCLR	[W0], BitPos(_ACIL_RLY+0)
;UYGULAMA.c,112 :: 		}
L_end_sifirla:
0x0EDC	0x060000  	RETURN
; end of _sifirla
_slot_CS:
;_4X8_CS.c,37 :: 		void slot_CS()
;_4X8_CS.c,39 :: 		clockCS();
0x0C0A	0x781F8A  	PUSH	W10
0x0C0C	0x781F8B  	PUSH	W11
0x0C0E	0x07FF0D  	RCALL	_clockCS
;_4X8_CS.c,40 :: 		clockCS();
0x0C10	0x07FF0C  	RCALL	_clockCS
;_4X8_CS.c,42 :: 		idata_CS=ACIL_RLY;clockCS();
0x0C12	0x2081E0  	MOV	#lo_addr(_ACIL_RLY), W0
0x0C14	0xA67010  	BTSS	[W0], BitPos(_ACIL_RLY+0)
0x0C16	0xA9A2CB  	BCLR	idata_CS, BitPos(idata_CS+0)
0x0C18	0xA77010  	BTSC	[W0], BitPos(_ACIL_RLY+0)
0x0C1A	0xA8A2CB  	BSET	idata_CS, BitPos(idata_CS+0)
0x0C1C	0x07FF06  	RCALL	_clockCS
;_4X8_CS.c,43 :: 		idata_CS=LED4;clockCS();
0x0C1E	0x2081E0  	MOV	#lo_addr(_LED4), W0
0x0C20	0xA66010  	BTSS	[W0], BitPos(_LED4+0)
0x0C22	0xA9A2CB  	BCLR	idata_CS, BitPos(idata_CS+0)
0x0C24	0xA76010  	BTSC	[W0], BitPos(_LED4+0)
0x0C26	0xA8A2CB  	BSET	idata_CS, BitPos(idata_CS+0)
0x0C28	0x07FF00  	RCALL	_clockCS
;_4X8_CS.c,44 :: 		idata_CS=LED3;clockCS();
0x0C2A	0x2081E0  	MOV	#lo_addr(_LED3), W0
0x0C2C	0xA65010  	BTSS	[W0], BitPos(_LED3+0)
0x0C2E	0xA9A2CB  	BCLR	idata_CS, BitPos(idata_CS+0)
0x0C30	0xA75010  	BTSC	[W0], BitPos(_LED3+0)
0x0C32	0xA8A2CB  	BSET	idata_CS, BitPos(idata_CS+0)
0x0C34	0x07FEFA  	RCALL	_clockCS
;_4X8_CS.c,45 :: 		idata_CS=LED2;clockCS();
0x0C36	0x2081C0  	MOV	#lo_addr(_LED2), W0
0x0C38	0xA69010  	BTSS	[W0], BitPos(_LED2+0)
0x0C3A	0xA9A2CB  	BCLR	idata_CS, BitPos(idata_CS+0)
0x0C3C	0xA79010  	BTSC	[W0], BitPos(_LED2+0)
0x0C3E	0xA8A2CB  	BSET	idata_CS, BitPos(idata_CS+0)
0x0C40	0x07FEF4  	RCALL	_clockCS
;_4X8_CS.c,46 :: 		idata_CS=LED1;clockCS();
0x0C42	0x2081C0  	MOV	#lo_addr(_LED1), W0
0x0C44	0xA68010  	BTSS	[W0], BitPos(_LED1+0)
0x0C46	0xA9A2CB  	BCLR	idata_CS, BitPos(idata_CS+0)
0x0C48	0xA78010  	BTSC	[W0], BitPos(_LED1+0)
0x0C4A	0xA8A2CB  	BSET	idata_CS, BitPos(idata_CS+0)
0x0C4C	0x07FEEE  	RCALL	_clockCS
;_4X8_CS.c,47 :: 		idata_CS=CS27;clockCS();
0x0C4E	0x2081E0  	MOV	#lo_addr(_CS27), W0
0x0C50	0xA6C010  	BTSS	[W0], BitPos(_CS27+0)
0x0C52	0xA9A2CB  	BCLR	idata_CS, BitPos(idata_CS+0)
0x0C54	0xA7C010  	BTSC	[W0], BitPos(_CS27+0)
0x0C56	0xA8A2CB  	BSET	idata_CS, BitPos(idata_CS+0)
0x0C58	0x07FEE8  	RCALL	_clockCS
;_4X8_CS.c,48 :: 		idata_CS=CS26;clockCS();
0x0C5A	0x2081E0  	MOV	#lo_addr(_CS26), W0
0x0C5C	0xA6D010  	BTSS	[W0], BitPos(_CS26+0)
0x0C5E	0xA9A2CB  	BCLR	idata_CS, BitPos(idata_CS+0)
0x0C60	0xA7D010  	BTSC	[W0], BitPos(_CS26+0)
0x0C62	0xA8A2CB  	BSET	idata_CS, BitPos(idata_CS+0)
0x0C64	0x07FEE2  	RCALL	_clockCS
;_4X8_CS.c,49 :: 		idata_CS=CS25;clockCS();
0x0C66	0x2081E0  	MOV	#lo_addr(_CS25), W0
0x0C68	0xA6B010  	BTSS	[W0], BitPos(_CS25+0)
0x0C6A	0xA9A2CB  	BCLR	idata_CS, BitPos(idata_CS+0)
0x0C6C	0xA7B010  	BTSC	[W0], BitPos(_CS25+0)
0x0C6E	0xA8A2CB  	BSET	idata_CS, BitPos(idata_CS+0)
0x0C70	0x07FEDC  	RCALL	_clockCS
;_4X8_CS.c,51 :: 		idata_CS=CS24;clockCS();
0x0C72	0x2081E0  	MOV	#lo_addr(_CS24), W0
0x0C74	0xA68010  	BTSS	[W0], BitPos(_CS24+0)
0x0C76	0xA9A2CB  	BCLR	idata_CS, BitPos(idata_CS+0)
0x0C78	0xA78010  	BTSC	[W0], BitPos(_CS24+0)
0x0C7A	0xA8A2CB  	BSET	idata_CS, BitPos(idata_CS+0)
0x0C7C	0x07FED6  	RCALL	_clockCS
;_4X8_CS.c,52 :: 		idata_CS=CS23;clockCS();
0x0C7E	0x2081E0  	MOV	#lo_addr(_CS23), W0
0x0C80	0xA69010  	BTSS	[W0], BitPos(_CS23+0)
0x0C82	0xA9A2CB  	BCLR	idata_CS, BitPos(idata_CS+0)
0x0C84	0xA79010  	BTSC	[W0], BitPos(_CS23+0)
0x0C86	0xA8A2CB  	BSET	idata_CS, BitPos(idata_CS+0)
0x0C88	0x07FED0  	RCALL	_clockCS
;_4X8_CS.c,53 :: 		idata_CS=CS22;clockCS();
0x0C8A	0x2081E0  	MOV	#lo_addr(_CS22), W0
0x0C8C	0xA6A010  	BTSS	[W0], BitPos(_CS22+0)
0x0C8E	0xA9A2CB  	BCLR	idata_CS, BitPos(idata_CS+0)
0x0C90	0xA7A010  	BTSC	[W0], BitPos(_CS22+0)
0x0C92	0xA8A2CB  	BSET	idata_CS, BitPos(idata_CS+0)
0x0C94	0x07FECA  	RCALL	_clockCS
;_4X8_CS.c,54 :: 		idata_CS=CS21;clockCS();
0x0C96	0x2081E0  	MOV	#lo_addr(_CS21), W0
0x0C98	0xA6E010  	BTSS	[W0], BitPos(_CS21+0)
0x0C9A	0xA9A2CB  	BCLR	idata_CS, BitPos(idata_CS+0)
0x0C9C	0xA7E010  	BTSC	[W0], BitPos(_CS21+0)
0x0C9E	0xA8A2CB  	BSET	idata_CS, BitPos(idata_CS+0)
0x0CA0	0x07FEC4  	RCALL	_clockCS
;_4X8_CS.c,55 :: 		idata_CS=CS20;clockCS();
0x0CA2	0x2081E0  	MOV	#lo_addr(_CS20), W0
0x0CA4	0xA6F010  	BTSS	[W0], BitPos(_CS20+0)
0x0CA6	0xA9A2CB  	BCLR	idata_CS, BitPos(idata_CS+0)
0x0CA8	0xA7F010  	BTSC	[W0], BitPos(_CS20+0)
0x0CAA	0xA8A2CB  	BSET	idata_CS, BitPos(idata_CS+0)
0x0CAC	0x07FEBE  	RCALL	_clockCS
;_4X8_CS.c,56 :: 		idata_CS=CS19;clockCS();
0x0CAE	0x2081C0  	MOV	#lo_addr(_CS19), W0
0x0CB0	0xA67010  	BTSS	[W0], BitPos(_CS19+0)
0x0CB2	0xA9A2CB  	BCLR	idata_CS, BitPos(idata_CS+0)
0x0CB4	0xA77010  	BTSC	[W0], BitPos(_CS19+0)
0x0CB6	0xA8A2CB  	BSET	idata_CS, BitPos(idata_CS+0)
0x0CB8	0x07FEB8  	RCALL	_clockCS
;_4X8_CS.c,57 :: 		idata_CS=CS18;clockCS();
0x0CBA	0x2081C0  	MOV	#lo_addr(_CS18), W0
0x0CBC	0xA6A010  	BTSS	[W0], BitPos(_CS18+0)
0x0CBE	0xA9A2CB  	BCLR	idata_CS, BitPos(idata_CS+0)
0x0CC0	0xA7A010  	BTSC	[W0], BitPos(_CS18+0)
0x0CC2	0xA8A2CB  	BSET	idata_CS, BitPos(idata_CS+0)
0x0CC4	0x07FEB2  	RCALL	_clockCS
;_4X8_CS.c,58 :: 		idata_CS=CS17;clockCS();
0x0CC6	0x2081C0  	MOV	#lo_addr(_CS17), W0
0x0CC8	0xA6D010  	BTSS	[W0], BitPos(_CS17+0)
0x0CCA	0xA9A2CB  	BCLR	idata_CS, BitPos(idata_CS+0)
0x0CCC	0xA7D010  	BTSC	[W0], BitPos(_CS17+0)
0x0CCE	0xA8A2CB  	BSET	idata_CS, BitPos(idata_CS+0)
0x0CD0	0x07FEAC  	RCALL	_clockCS
;_4X8_CS.c,60 :: 		idata_CS=CS16;clockCS();
0x0CD2	0x2081C0  	MOV	#lo_addr(_CS16), W0
0x0CD4	0xA6C010  	BTSS	[W0], BitPos(_CS16+0)
0x0CD6	0xA9A2CB  	BCLR	idata_CS, BitPos(idata_CS+0)
0x0CD8	0xA7C010  	BTSC	[W0], BitPos(_CS16+0)
0x0CDA	0xA8A2CB  	BSET	idata_CS, BitPos(idata_CS+0)
0x0CDC	0x07FEA6  	RCALL	_clockCS
;_4X8_CS.c,61 :: 		idata_CS=CS15;clockCS();
0x0CDE	0x2081C0  	MOV	#lo_addr(_CS15), W0
0x0CE0	0xA6B010  	BTSS	[W0], BitPos(_CS15+0)
0x0CE2	0xA9A2CB  	BCLR	idata_CS, BitPos(idata_CS+0)
0x0CE4	0xA7B010  	BTSC	[W0], BitPos(_CS15+0)
0x0CE6	0xA8A2CB  	BSET	idata_CS, BitPos(idata_CS+0)
0x0CE8	0x07FEA0  	RCALL	_clockCS
;_4X8_CS.c,62 :: 		idata_CS=CS14;clockCS();
0x0CEA	0x2081C0  	MOV	#lo_addr(_CS14), W0
0x0CEC	0xA62010  	BTSS	[W0], BitPos(_CS14+0)
0x0CEE	0xA9A2CB  	BCLR	idata_CS, BitPos(idata_CS+0)
0x0CF0	0xA72010  	BTSC	[W0], BitPos(_CS14+0)
0x0CF2	0xA8A2CB  	BSET	idata_CS, BitPos(idata_CS+0)
0x0CF4	0x07FE9A  	RCALL	_clockCS
;_4X8_CS.c,63 :: 		idata_CS=CS13;clockCS();
0x0CF6	0x2081C0  	MOV	#lo_addr(_CS13), W0
0x0CF8	0xA61010  	BTSS	[W0], BitPos(_CS13+0)
0x0CFA	0xA9A2CB  	BCLR	idata_CS, BitPos(idata_CS+0)
0x0CFC	0xA71010  	BTSC	[W0], BitPos(_CS13+0)
0x0CFE	0xA8A2CB  	BSET	idata_CS, BitPos(idata_CS+0)
0x0D00	0x07FE94  	RCALL	_clockCS
;_4X8_CS.c,64 :: 		idata_CS=CS12;clockCS();
0x0D02	0x2081C0  	MOV	#lo_addr(_CS12), W0
0x0D04	0xA60010  	BTSS	[W0], BitPos(_CS12+0)
0x0D06	0xA9A2CB  	BCLR	idata_CS, BitPos(idata_CS+0)
0x0D08	0xA70010  	BTSC	[W0], BitPos(_CS12+0)
0x0D0A	0xA8A2CB  	BSET	idata_CS, BitPos(idata_CS+0)
0x0D0C	0x07FE8E  	RCALL	_clockCS
;_4X8_CS.c,65 :: 		idata_CS=CS11;clockCS();
0x0D0E	0x2081C0  	MOV	#lo_addr(_CS11), W0
0x0D10	0xA63010  	BTSS	[W0], BitPos(_CS11+0)
0x0D12	0xA9A2CB  	BCLR	idata_CS, BitPos(idata_CS+0)
0x0D14	0xA73010  	BTSC	[W0], BitPos(_CS11+0)
0x0D16	0xA8A2CB  	BSET	idata_CS, BitPos(idata_CS+0)
0x0D18	0x07FE88  	RCALL	_clockCS
;_4X8_CS.c,66 :: 		idata_CS=CS10;clockCS();
0x0D1A	0x2081C0  	MOV	#lo_addr(_CS10), W0
0x0D1C	0xA66010  	BTSS	[W0], BitPos(_CS10+0)
0x0D1E	0xA9A2CB  	BCLR	idata_CS, BitPos(idata_CS+0)
0x0D20	0xA76010  	BTSC	[W0], BitPos(_CS10+0)
0x0D22	0xA8A2CB  	BSET	idata_CS, BitPos(idata_CS+0)
0x0D24	0x07FE82  	RCALL	_clockCS
;_4X8_CS.c,67 :: 		idata_CS=CS9;clockCS();
0x0D26	0x2081C0  	MOV	#lo_addr(_CS9), W0
0x0D28	0xA65010  	BTSS	[W0], BitPos(_CS9+0)
0x0D2A	0xA9A2CB  	BCLR	idata_CS, BitPos(idata_CS+0)
0x0D2C	0xA75010  	BTSC	[W0], BitPos(_CS9+0)
0x0D2E	0xA8A2CB  	BSET	idata_CS, BitPos(idata_CS+0)
0x0D30	0x07FE7C  	RCALL	_clockCS
;_4X8_CS.c,69 :: 		idata_CS=CS8;clockCS();
0x0D32	0x2081C0  	MOV	#lo_addr(_CS8), W0
0x0D34	0xA64010  	BTSS	[W0], BitPos(_CS8+0)
0x0D36	0xA9A2CB  	BCLR	idata_CS, BitPos(idata_CS+0)
0x0D38	0xA74010  	BTSC	[W0], BitPos(_CS8+0)
0x0D3A	0xA8A2CB  	BSET	idata_CS, BitPos(idata_CS+0)
0x0D3C	0x07FE76  	RCALL	_clockCS
;_4X8_CS.c,70 :: 		idata_CS=CS7;clockCS();
0x0D3E	0x2081E0  	MOV	#lo_addr(_CS7), W0
0x0D40	0xA60010  	BTSS	[W0], BitPos(_CS7+0)
0x0D42	0xA9A2CB  	BCLR	idata_CS, BitPos(idata_CS+0)
0x0D44	0xA70010  	BTSC	[W0], BitPos(_CS7+0)
0x0D46	0xA8A2CB  	BSET	idata_CS, BitPos(idata_CS+0)
0x0D48	0x07FE70  	RCALL	_clockCS
;_4X8_CS.c,71 :: 		idata_CS=CS6;clockCS();
0x0D4A	0x2081C0  	MOV	#lo_addr(_CS6), W0
0x0D4C	0xA6F010  	BTSS	[W0], BitPos(_CS6+0)
0x0D4E	0xA9A2CB  	BCLR	idata_CS, BitPos(idata_CS+0)
0x0D50	0xA7F010  	BTSC	[W0], BitPos(_CS6+0)
0x0D52	0xA8A2CB  	BSET	idata_CS, BitPos(idata_CS+0)
0x0D54	0x07FE6A  	RCALL	_clockCS
;_4X8_CS.c,72 :: 		idata_CS=CS5;clockCS();
0x0D56	0x2081C0  	MOV	#lo_addr(_CS5), W0
0x0D58	0xA6E010  	BTSS	[W0], BitPos(_CS5+0)
0x0D5A	0xA9A2CB  	BCLR	idata_CS, BitPos(idata_CS+0)
0x0D5C	0xA7E010  	BTSC	[W0], BitPos(_CS5+0)
0x0D5E	0xA8A2CB  	BSET	idata_CS, BitPos(idata_CS+0)
0x0D60	0x07FE64  	RCALL	_clockCS
;_4X8_CS.c,73 :: 		idata_CS=CS4;clockCS();
0x0D62	0x2081E0  	MOV	#lo_addr(_CS4), W0
0x0D64	0xA61010  	BTSS	[W0], BitPos(_CS4+0)
0x0D66	0xA9A2CB  	BCLR	idata_CS, BitPos(idata_CS+0)
0x0D68	0xA71010  	BTSC	[W0], BitPos(_CS4+0)
0x0D6A	0xA8A2CB  	BSET	idata_CS, BitPos(idata_CS+0)
0x0D6C	0x07FE5E  	RCALL	_clockCS
;_4X8_CS.c,74 :: 		idata_CS=CS3;clockCS();
0x0D6E	0x2081E0  	MOV	#lo_addr(_CS3), W0
0x0D70	0xA64010  	BTSS	[W0], BitPos(_CS3+0)
0x0D72	0xA9A2CB  	BCLR	idata_CS, BitPos(idata_CS+0)
0x0D74	0xA74010  	BTSC	[W0], BitPos(_CS3+0)
0x0D76	0xA8A2CB  	BSET	idata_CS, BitPos(idata_CS+0)
0x0D78	0x07FE58  	RCALL	_clockCS
;_4X8_CS.c,75 :: 		idata_CS=CS2;clockCS();
0x0D7A	0x2081E0  	MOV	#lo_addr(_CS2), W0
0x0D7C	0xA63010  	BTSS	[W0], BitPos(_CS2+0)
0x0D7E	0xA9A2CB  	BCLR	idata_CS, BitPos(idata_CS+0)
0x0D80	0xA73010  	BTSC	[W0], BitPos(_CS2+0)
0x0D82	0xA8A2CB  	BSET	idata_CS, BitPos(idata_CS+0)
0x0D84	0x07FE52  	RCALL	_clockCS
;_4X8_CS.c,76 :: 		idata_CS=CS1;clockCS();
0x0D86	0x2081E0  	MOV	#lo_addr(_CS1), W0
0x0D88	0xA62010  	BTSS	[W0], BitPos(_CS1+0)
0x0D8A	0xA9A2CB  	BCLR	idata_CS, BitPos(idata_CS+0)
0x0D8C	0xA72010  	BTSC	[W0], BitPos(_CS1+0)
0x0D8E	0xA8A2CB  	BSET	idata_CS, BitPos(idata_CS+0)
0x0D90	0x07FE4C  	RCALL	_clockCS
;_4X8_CS.c,78 :: 		load_CS=0;
0x0D92	0xA982CB  	BCLR	load_CS, BitPos(load_CS+0)
;_4X8_CS.c,79 :: 		Delay_Cyc_Long(1);
0x0D94	0x20001A  	MOV	#1, W10
0x0D96	0x20000B  	MOV	#0, W11
0x0D98	0x07FA6B  	RCALL	_Delay_Cyc_Long
;_4X8_CS.c,80 :: 		load_CS=1;
0x0D9A	0xA882CB  	BSET	load_CS, BitPos(load_CS+0)
;_4X8_CS.c,81 :: 		}
L_end_slot_CS:
0x0D9C	0x7805CF  	POP	W11
0x0D9E	0x78054F  	POP	W10
0x0DA0	0x060000  	RETURN
; end of _slot_CS
_clockCS:
;_4X8_CS.c,31 :: 		void clockCS()
;_4X8_CS.c,33 :: 		clk_CS=1;
0x0A2A	0x781F8A  	PUSH	W10
0x0A2C	0x781F8B  	PUSH	W11
0x0A2E	0xA822E2  	BSET	clk_CS, BitPos(clk_CS+0)
;_4X8_CS.c,34 :: 		Delay_Cyc_Long(1);
0x0A30	0x20001A  	MOV	#1, W10
0x0A32	0x20000B  	MOV	#0, W11
0x0A34	0x07FC1D  	RCALL	_Delay_Cyc_Long
;_4X8_CS.c,35 :: 		clk_CS=0;
0x0A36	0xA922E2  	BCLR	clk_CS, BitPos(clk_CS+0)
;_4X8_CS.c,36 :: 		}
L_end_clockCS:
0x0A38	0x7805CF  	POP	W11
0x0A3A	0x78054F  	POP	W10
0x0A3C	0x060000  	RETURN
; end of _clockCS
_Delay_Cyc_Long:
;__Lib_Delays.c,144 :: 		void Delay_Cyc_Long(unsigned long CycNo) {
;__Lib_Delays.c,145 :: 		W8 = CycNo;
0x0270	0x78040A  	MOV	W10, W8
;__Lib_Delays.c,146 :: 		W9 = HiWord(CycNo);
0x0272	0x200140  	MOV	#lo_addr(W10), W0
0x0274	0xECA000  	INC2	W0
0x0276	0x780490  	MOV	[W0], W9
;__Lib_Delays.c,148 :: 		PUSH       W8
0x0278	0xF80010  	PUSH	W8
;__Lib_Delays.c,150 :: 		MOV        #14, W7                    //   in asm because dsPIC30 can
0x027A	0x2000E7  	MOV	#14, W7
;__Lib_Delays.c,151 :: 		Label1:                                   //   generate DO instruction
Label1:
;__Lib_Delays.c,152 :: 		DEC        W7, W7                     //   instead of a loop.
0x027C	0xE90387  	DEC	W7, W7
;__Lib_Delays.c,153 :: 		BRA LT,    Label2                     //
0x027E	0x350003  	BRA LT	Label2
;__Lib_Delays.c,154 :: 		LSR        W9, W9                     // in that case code execution
0x0280	0xD10489  	LSR	W9, W9
;__Lib_Delays.c,155 :: 		RRC        W8, W8                     //   time would be different
0x0282	0xD38408  	RRC	W8, W8
;__Lib_Delays.c,156 :: 		BRA        Label1                     //   between dsPIC30 family
0x0284	0x37FFFB  	BRA	Label1
;__Lib_Delays.c,157 :: 		Label2:                                   //   and PIC24/dsPIC33 families
Label2:
;__Lib_Delays.c,159 :: 		POP        W9
0x0286	0xF90012  	POP	W9
;__Lib_Delays.c,160 :: 		MOV        #16383, W7
0x0288	0x23FFF7  	MOV	#16383, W7
;__Lib_Delays.c,161 :: 		AND        W9, W7, W9
0x028A	0x648487  	AND	W9, W7, W9
;__Lib_Delays.c,163 :: 		Delay_Cyc_loop:
Delay_Cyc_loop:
;__Lib_Delays.c,164 :: 		CP0 W8                 ; skip delay
0x028C	0xE20010  	CP0	W8
;__Lib_Delays.c,165 :: 		BRA Z, Delay_Cyc_rem   ;    if W8 = 0
0x028E	0x320004  	BRA Z	Delay_Cyc_rem
;__Lib_Delays.c,166 :: 		repeat #16377          ; perform delay by
0x0290	0x093FF9  	REPEAT	#16377
;__Lib_Delays.c,167 :: 		NOP                    ;   by executing W8*16384 <nop>s in Delay_Cyc_loop
0x0292	0x000000  	NOP
;__Lib_Delays.c,168 :: 		DEC W8, W8             ; next loop
0x0294	0xE90408  	DEC	W8, W8
;__Lib_Delays.c,169 :: 		bra Delay_Cyc_loop
0x0296	0x37FFFA  	BRA	Delay_Cyc_loop
;__Lib_Delays.c,170 :: 		Delay_Cyc_rem:
Delay_Cyc_rem:
;__Lib_Delays.c,171 :: 		REPEAT W9              ; execute whats
0x0298	0x098009  	REPEAT	W9
;__Lib_Delays.c,172 :: 		nop                    ;   remaining after the division
0x029A	0x000000  	NOP
;__Lib_Delays.c,174 :: 		}
L_end_Delay_Cyc_Long:
0x029C	0x060000  	RETURN
; end of _Delay_Cyc_Long
_PID_Init:
0x0FF0	0xFA0000  	LNK	#0
;pid.c,8 :: 		void PID_Init(PID_TypeDef_t *pid,float Kp,float Ki,float Kd)
; Ki start address is: 2 (W1)
0x0FF2	0x97B8BE  	MOV	[W14-10], W1
0x0FF4	0x97B94E  	MOV	[W14-8], W2
; Kd start address is: 6 (W3)
0x0FF6	0x97B99E  	MOV	[W14-14], W3
0x0FF8	0x97BA2E  	MOV	[W14-12], W4
;pid.c,10 :: 		pid->Kp = Kp;
0x0FFA	0x781D0B  	MOV	W11, [W10++]
0x0FFC	0x78150C  	MOV	W12, [W10--]
;pid.c,11 :: 		pid->Ki = Ki;
0x0FFE	0x450064  	ADD	W10, #4, W0
0x1000	0x781801  	MOV	W1, [W0++]
0x1002	0x781002  	MOV	W2, [W0--]
; Ki end address is: 2 (W1)
;pid.c,12 :: 		pid->Kd = Kd;
0x1004	0x450068  	ADD	W10, #8, W0
0x1006	0x781803  	MOV	W3, [W0++]
0x1008	0x781004  	MOV	W4, [W0--]
; Kd end address is: 6 (W3)
;pid.c,14 :: 		pid->integral_sum = 0;
0x100A	0x450170  	ADD	W10, #16, W2
0x100C	0xEF2000  	CLR	W0
0x100E	0xEF2002  	CLR	W1
0x1010	0xBE8900  	MOV.D	W0, [W2]
;pid.c,15 :: 		pid->integral = 0;
0x1012	0x450174  	ADD	W10, #20, W2
0x1014	0xEF2000  	CLR	W0
0x1016	0xEF2002  	CLR	W1
0x1018	0xBE8900  	MOV.D	W0, [W2]
;pid.c,16 :: 		pid->derivative = 0;
0x101A	0x450178  	ADD	W10, #24, W2
0x101C	0xEF2000  	CLR	W0
0x101E	0xEF2002  	CLR	W1
0x1020	0xBE8900  	MOV.D	W0, [W2]
;pid.c,17 :: 		pid->prevError = 0;
0x1022	0x45017C  	ADD	W10, #28, W2
0x1024	0xEF2000  	CLR	W0
0x1026	0xEF2002  	CLR	W1
0x1028	0xBE8900  	MOV.D	W0, [W2]
;pid.c,18 :: 		pid->prevMeasurement = 0;
0x102A	0x200200  	MOV	#32, W0
0x102C	0x450100  	ADD	W10, W0, W2
0x102E	0xEF2000  	CLR	W0
0x1030	0xEF2002  	CLR	W1
0x1032	0xBE8900  	MOV.D	W0, [W2]
;pid.c,20 :: 		pid->out = 0;
0x1034	0x200240  	MOV	#36, W0
0x1036	0x450100  	ADD	W10, W0, W2
0x1038	0xEF2000  	CLR	W0
0x103A	0xEF2002  	CLR	W1
0x103C	0xBE8900  	MOV.D	W0, [W2]
;pid.c,21 :: 		}
L_end_PID_Init:
0x103E	0xFA8000  	ULNK
0x1040	0x060000  	RETURN
; end of _PID_Init
_MCP_3208V:
;VOLTAGE_IO.c,82 :: 		unsigned int MCP_3208V(unsigned short channel,unsigned char chip)
;VOLTAGE_IO.c,86 :: 		if(chip==3) {CS3 = 0;CS4 = 1;CS7 = 1; }
0x1042	0x781F8A  	PUSH	W10
0x1044	0xE15C63  	CP.B	W11, #3
0x1046	0x3A0007  	BRA NZ	L_MCP_3208V37
L__MCP_3208V112:
0x1048	0x2081E0  	MOV	#lo_addr(_CS3), W0
0x104A	0xA14010  	BCLR	[W0], BitPos(_CS3+0)
0x104C	0x2081E0  	MOV	#lo_addr(_CS4), W0
0x104E	0xA01010  	BSET	[W0], BitPos(_CS4+0)
0x1050	0x2081E0  	MOV	#lo_addr(_CS7), W0
0x1052	0xA00010  	BSET	[W0], BitPos(_CS7+0)
0x1054	0x370018  	BRA	L_MCP_3208V38
L_MCP_3208V37:
;VOLTAGE_IO.c,87 :: 		else if(chip==4) {CS3 = 1;CS4 = 0;CS7 = 1; }
0x1056	0xE15C64  	CP.B	W11, #4
0x1058	0x3A0007  	BRA NZ	L_MCP_3208V39
L__MCP_3208V113:
0x105A	0x2081E0  	MOV	#lo_addr(_CS3), W0
0x105C	0xA04010  	BSET	[W0], BitPos(_CS3+0)
0x105E	0x2081E0  	MOV	#lo_addr(_CS4), W0
0x1060	0xA11010  	BCLR	[W0], BitPos(_CS4+0)
0x1062	0x2081E0  	MOV	#lo_addr(_CS7), W0
0x1064	0xA00010  	BSET	[W0], BitPos(_CS7+0)
0x1066	0x37000F  	BRA	L_MCP_3208V40
L_MCP_3208V39:
;VOLTAGE_IO.c,88 :: 		else if(chip==7) {CS3 = 1;CS4 = 1;CS7 = 0; }
0x1068	0xE15C67  	CP.B	W11, #7
0x106A	0x3A0007  	BRA NZ	L_MCP_3208V41
L__MCP_3208V114:
0x106C	0x2081E0  	MOV	#lo_addr(_CS3), W0
0x106E	0xA04010  	BSET	[W0], BitPos(_CS3+0)
0x1070	0x2081E0  	MOV	#lo_addr(_CS4), W0
0x1072	0xA01010  	BSET	[W0], BitPos(_CS4+0)
0x1074	0x2081E0  	MOV	#lo_addr(_CS7), W0
0x1076	0xA10010  	BCLR	[W0], BitPos(_CS7+0)
0x1078	0x370006  	BRA	L_MCP_3208V42
L_MCP_3208V41:
;VOLTAGE_IO.c,89 :: 		else             {CS3 = 1;CS4 = 1;CS7 = 1; }
0x107A	0x2081E0  	MOV	#lo_addr(_CS3), W0
0x107C	0xA04010  	BSET	[W0], BitPos(_CS3+0)
0x107E	0x2081E0  	MOV	#lo_addr(_CS4), W0
0x1080	0xA01010  	BSET	[W0], BitPos(_CS4+0)
0x1082	0x2081E0  	MOV	#lo_addr(_CS7), W0
0x1084	0xA00010  	BSET	[W0], BitPos(_CS7+0)
L_MCP_3208V42:
L_MCP_3208V40:
L_MCP_3208V38:
;VOLTAGE_IO.c,91 :: 		slot_CS();
0x1086	0x781F8A  	PUSH	W10
0x1088	0x07FDC0  	RCALL	_slot_CS
0x108A	0x78054F  	POP	W10
;VOLTAGE_IO.c,93 :: 		if (channel<4) SPI1_Write(0x06);                                           // Kanal seç
0x108C	0xE15464  	CP.B	W10, #4
0x108E	0x310005  	BRA GEU	L_MCP_3208V43
L__MCP_3208V115:
0x1090	0x781F8A  	PUSH	W10
0x1092	0x20006A  	MOV	#6, W10
0x1094	0x07FA96  	RCALL	_SPI1_Write
0x1096	0x78054F  	POP	W10
0x1098	0x370004  	BRA	L_MCP_3208V44
L_MCP_3208V43:
;VOLTAGE_IO.c,94 :: 		else SPI1_Write(0x07);
0x109A	0x781F8A  	PUSH	W10
0x109C	0x20007A  	MOV	#7, W10
0x109E	0x07FA91  	RCALL	_SPI1_Write
0x10A0	0x78054F  	POP	W10
L_MCP_3208V44:
;VOLTAGE_IO.c,96 :: 		channel = channel << 6;
0x10A2	0xFB800A  	ZE	W10, W0
0x10A4	0xDD0046  	SL	W0, #6, W0
0x10A6	0x784500  	MOV.B	W0, W10
;VOLTAGE_IO.c,97 :: 		temp = SPI1_Read(channel) & 0x0F;
0x10A8	0xFB8500  	ZE	W0, W10
0x10AA	0x07F9E4  	RCALL	_SPI1_Read
0x10AC	0x60006F  	AND	W0, #15, W0
;VOLTAGE_IO.c,98 :: 		temp = temp << 8;
0x10AE	0xDD0048  	SL	W0, #8, W0
; temp start address is: 2 (W1)
0x10B0	0x780080  	MOV	W0, W1
;VOLTAGE_IO.c,99 :: 		temp = temp | SPI1_Read(0);
0x10B2	0xEF2014  	CLR	W10
0x10B4	0x07F9DF  	RCALL	_SPI1_Read
; temp start address is: 4 (W2)
0x10B6	0x708100  	IOR	W1, W0, W2
; temp end address is: 2 (W1)
;VOLTAGE_IO.c,101 :: 		CS3=CS4=CS7= 1;
0x10B8	0x2081E0  	MOV	#lo_addr(_CS7), W0
0x10BA	0xA00010  	BSET	[W0], BitPos(_CS7+0)
0x10BC	0x2081E1  	MOV	#lo_addr(_CS7), W1
0x10BE	0x2081E0  	MOV	#lo_addr(_CS4), W0
0x10C0	0xA01010  	BSET	[W0], BitPos(_CS4+0)
0x10C2	0xA60011  	BTSS	[W1], BitPos(_CS7+0)
0x10C4	0xA11010  	BCLR	[W0], BitPos(_CS4+0)
0x10C6	0x2081E1  	MOV	#lo_addr(_CS4), W1
0x10C8	0x2081E0  	MOV	#lo_addr(_CS3), W0
0x10CA	0xA04010  	BSET	[W0], BitPos(_CS3+0)
0x10CC	0xA61011  	BTSS	[W1], BitPos(_CS4+0)
0x10CE	0xA14010  	BCLR	[W0], BitPos(_CS3+0)
;VOLTAGE_IO.c,102 :: 		slot_CS();
0x10D0	0x781F82  	PUSH	W2
0x10D2	0x07FD9B  	RCALL	_slot_CS
0x10D4	0x78014F  	POP	W2
;VOLTAGE_IO.c,103 :: 		return temp;
0x10D6	0x780002  	MOV	W2, W0
; temp end address is: 4 (W2)
;VOLTAGE_IO.c,104 :: 		}
;VOLTAGE_IO.c,103 :: 		return temp;
;VOLTAGE_IO.c,104 :: 		}
L_end_MCP_3208V:
0x10D8	0x78054F  	POP	W10
0x10DA	0x060000  	RETURN
; end of _MCP_3208V
_SPI1_Write:
0x05C2	0xFA0000  	LNK	#0
;__Lib_SPI_123_p24fj.c,117 :: 		
;__Lib_SPI_123_p24fj.c,118 :: 		
0x05C4	0x07FF57  	RCALL	_SPI1_Read
;__Lib_SPI_123_p24fj.c,125 :: 		
L_end_SPI1_Write:
0x05C6	0xFA8000  	ULNK
0x05C8	0x060000  	RETURN
; end of _SPI1_Write
_SPI1_Read:
0x0474	0xFA0000  	LNK	#0
;__Lib_SPI_123_p24fj.c,105 :: 		
;__Lib_SPI_123_p24fj.c,107 :: 		
0x0476	0xA9C240  	BCLR	SPI1STAT, #6
;__Lib_SPI_123_p24fj.c,109 :: 		
L_SPI1_Read0:
0x0478	0xAE2240  	BTSS	SPI1STAT, #1
0x047A	0x370001  	BRA	L_SPI1_Read1
0x047C	0x37FFFD  	BRA	L_SPI1_Read0
L_SPI1_Read1:
;__Lib_SPI_123_p24fj.c,110 :: 		
0x047E	0x88124A  	MOV	W10, SPI1BUF
;__Lib_SPI_123_p24fj.c,111 :: 		
L_SPI1_Read2:
0x0480	0xAF0240  	BTSC	SPI1STAT, #0
0x0482	0x370001  	BRA	L_SPI1_Read3
0x0484	0x37FFFD  	BRA	L_SPI1_Read2
L_SPI1_Read3:
;__Lib_SPI_123_p24fj.c,113 :: 		
0x0486	0xBF8248  	MOV	SPI1BUF, WREG
;__Lib_SPI_123_p24fj.c,115 :: 		
L_end_SPI1_Read:
0x0488	0xFA8000  	ULNK
0x048A	0x060000  	RETURN
; end of _SPI1_Read
_PID_Proccess:
0x0EDE	0xFA0018  	LNK	#24
;pid.c,23 :: 		float PID_Proccess(PID_TypeDef_t *pid, float setValue, float measurement)
0x0EE0	0x97B83E  	MOV	[W14-10], W0
0x0EE2	0x97B8CE  	MOV	[W14-8], W1
0x0EE4	0x9FBF30  	MOV	W0, [W14-10]
0x0EE6	0x9FBF41  	MOV	W1, [W14-8]
;pid.c,26 :: 		timer++;
0x0EE8	0x200011  	MOV	#1, W1
0x0EEA	0x200002  	MOV	#0, W2
0x0EEC	0x208020  	MOV	#lo_addr(_timer), W0
0x0EEE	0x409810  	ADD	W1, [W0], [W0++]
0x0EF0	0x491010  	ADDC	W2, [W0], [W0--]
;pid.c,27 :: 		if(timer < 999) Ut = timer - prevTimer;
0x0EF2	0x203E71  	MOV	#999, W1
0x0EF4	0x200002  	MOV	#0, W2
0x0EF6	0x208020  	MOV	#lo_addr(_timer), W0
0x0EF8	0xE10830  	CP	W1, [W0++]
0x0EFA	0xE19020  	CPB	W2, [W0--]
0x0EFC	0x360007  	BRA LEU	L_PID_Proccess0
L__PID_Proccess4:
0x0EFE	0x804012  	MOV	_timer, W2
0x0F00	0x804023  	MOV	_timer+2, W3
0x0F02	0x208101  	MOV	#lo_addr(_prevTimer), W1
0x0F04	0x208140  	MOV	#lo_addr(_Ut), W0
0x0F06	0x511831  	SUB	W2, [W1++], [W0++]
0x0F08	0x599021  	SUBB	W3, [W1--], [W0--]
0x0F0A	0x370004  	BRA	L_PID_Proccess1
L_PID_Proccess0:
;pid.c,28 :: 		else Ut = 1.0;
0x0F0C	0x200010  	MOV	#1, W0
0x0F0E	0x200001  	MOV	#0, W1
0x0F10	0x8840A0  	MOV	W0, _Ut
0x0F12	0x8840B1  	MOV	W1, _Ut+2
L_PID_Proccess1:
;pid.c,30 :: 		error = setValue - measurement;
0x0F14	0x97B93E  	MOV	[W14-10], W2
0x0F16	0x97B9CE  	MOV	[W14-8], W3
0x0F18	0x781F8A  	PUSH	W10
0x0F1A	0x78000B  	MOV	W11, W0
0x0F1C	0x78008C  	MOV	W12, W1
0x0F1E	0x07FC98  	RCALL	__Sub_FP
0x0F20	0x78054F  	POP	W10
0x0F22	0x884060  	MOV	W0, _error
0x0F24	0x884071  	MOV	W1, _error+2
;pid.c,32 :: 		proportional = pid->Kp * error;
0x0F26	0xBE011A  	MOV.D	[W10], W2
0x0F28	0x781F8A  	PUSH	W10
0x0F2A	0x07FC97  	RCALL	__Mul_FP
0x0F2C	0x78054F  	POP	W10
0x0F2E	0x8840C0  	MOV	W0, _proportional
0x0F30	0x8840D1  	MOV	W1, _proportional+2
;pid.c,35 :: 		pid->integral = pid->Ki * error *Ut;
0x0F32	0x450074  	ADD	W10, #20, W0
0x0F34	0x980F10  	MOV	W0, [W14+18]
0x0F36	0x450164  	ADD	W10, #4, W2
0x0F38	0xBE0012  	MOV.D	[W2], W0
0x0F3A	0x781F8A  	PUSH	W10
0x0F3C	0x804062  	MOV	_error, W2
0x0F3E	0x804073  	MOV	_error+2, W3
0x0F40	0x07FC8C  	RCALL	__Mul_FP
0x0F42	0x980770  	MOV	W0, [W14+14]
0x0F44	0x980F01  	MOV	W1, [W14+16]
0x0F46	0x8040A0  	MOV	_Ut, W0
0x0F48	0x8040B1  	MOV	_Ut+2, W1
0x0F4A	0x07FD14  	RCALL	__Long2Float
0x0F4C	0x90017E  	MOV	[W14+14], W2
0x0F4E	0x90098E  	MOV	[W14+16], W3
0x0F50	0x07FC84  	RCALL	__Mul_FP
0x0F52	0x78054F  	POP	W10
0x0F54	0x90091E  	MOV	[W14+18], W2
0x0F56	0xBE8900  	MOV.D	W0, [W2]
;pid.c,36 :: 		pid->integral_sum += pid->integral;
0x0F58	0x450270  	ADD	W10, #16, W4
0x0F5A	0x980774  	MOV	W4, [W14+14]
0x0F5C	0x450074  	ADD	W10, #20, W0
0x0F5E	0xBE0110  	MOV.D	[W0], W2
0x0F60	0xBE0014  	MOV.D	[W4], W0
0x0F62	0x781F8A  	PUSH	W10
0x0F64	0x07F9D1  	RCALL	__AddSub_FP
0x0F66	0x78054F  	POP	W10
0x0F68	0x90017E  	MOV	[W14+14], W2
0x0F6A	0xBE8900  	MOV.D	W0, [W2]
;pid.c,40 :: 		pid->derivative = pid->Kd * ((measurement - pid->prevMeasurement) / Ut);
0x0F6C	0x450078  	ADD	W10, #24, W0
0x0F6E	0x980F30  	MOV	W0, [W14+22]
0x0F70	0x450168  	ADD	W10, #8, W2
0x0F72	0xBE0012  	MOV.D	[W2], W0
0x0F74	0x980F10  	MOV	W0, [W14+18]
0x0F76	0x980F21  	MOV	W1, [W14+20]
0x0F78	0x200200  	MOV	#32, W0
0x0F7A	0x450000  	ADD	W10, W0, W0
0x0F7C	0xBE0110  	MOV.D	[W0], W2
0x0F7E	0x97B83E  	MOV	[W14-10], W0
0x0F80	0x97B8CE  	MOV	[W14-8], W1
0x0F82	0x781F8A  	PUSH	W10
0x0F84	0x07FC65  	RCALL	__Sub_FP
0x0F86	0x980770  	MOV	W0, [W14+14]
0x0F88	0x980F01  	MOV	W1, [W14+16]
0x0F8A	0x8040A0  	MOV	_Ut, W0
0x0F8C	0x8040B1  	MOV	_Ut+2, W1
0x0F8E	0x07FCF2  	RCALL	__Long2Float
0x0F90	0x980700  	MOV	W0, [W14+0]
0x0F92	0x980711  	MOV	W1, [W14+2]
0x0F94	0x90007E  	MOV	[W14+14], W0
0x0F96	0x90088E  	MOV	[W14+16], W1
0x0F98	0x90010E  	MOV	[W14+0], W2
0x0F9A	0x90019E  	MOV	[W14+2], W3
0x0F9C	0x07FA77  	RCALL	__Div_FP
0x0F9E	0x90091E  	MOV	[W14+18], W2
0x0FA0	0x9009AE  	MOV	[W14+20], W3
0x0FA2	0x07FC5B  	RCALL	__Mul_FP
0x0FA4	0x78054F  	POP	W10
0x0FA6	0x90093E  	MOV	[W14+22], W2
0x0FA8	0xBE8900  	MOV.D	W0, [W2]
;pid.c,43 :: 		pid->prevError = error;
0x0FAA	0x45017C  	ADD	W10, #28, W2
0x0FAC	0x804060  	MOV	_error, W0
0x0FAE	0x804071  	MOV	_error+2, W1
0x0FB0	0xBE8900  	MOV.D	W0, [W2]
;pid.c,44 :: 		pid->prevMeasurement = measurement;
0x0FB2	0x200200  	MOV	#32, W0
0x0FB4	0x450100  	ADD	W10, W0, W2
0x0FB6	0x97B83E  	MOV	[W14-10], W0
0x0FB8	0x97B8CE  	MOV	[W14-8], W1
0x0FBA	0xBE8900  	MOV.D	W0, [W2]
;pid.c,45 :: 		prevTimer = timer;
0x0FBC	0x804010  	MOV	_timer, W0
0x0FBE	0x804021  	MOV	_timer+2, W1
0x0FC0	0x884080  	MOV	W0, _prevTimer
0x0FC2	0x884091  	MOV	W1, _prevTimer+2
;pid.c,47 :: 		pid->out = proportional + pid->integral_sum + pid->derivative;
0x0FC4	0x200240  	MOV	#36, W0
0x0FC6	0x450000  	ADD	W10, W0, W0
0x0FC8	0x980770  	MOV	W0, [W14+14]
0x0FCA	0x450070  	ADD	W10, #16, W0
0x0FCC	0xBE0110  	MOV.D	[W0], W2
0x0FCE	0x8040C0  	MOV	_proportional, W0
0x0FD0	0x8040D1  	MOV	_proportional+2, W1
0x0FD2	0x781F8A  	PUSH	W10
0x0FD4	0x07F999  	RCALL	__AddSub_FP
0x0FD6	0x78054F  	POP	W10
0x0FD8	0x450278  	ADD	W10, #24, W4
0x0FDA	0xBE0114  	MOV.D	[W4], W2
0x0FDC	0x781F8A  	PUSH	W10
0x0FDE	0x07F994  	RCALL	__AddSub_FP
0x0FE0	0x78054F  	POP	W10
0x0FE2	0x90017E  	MOV	[W14+14], W2
0x0FE4	0xBE8900  	MOV.D	W0, [W2]
;pid.c,49 :: 		return pid->out;
0x0FE6	0x200240  	MOV	#36, W0
0x0FE8	0x450100  	ADD	W10, W0, W2
0x0FEA	0xBE0012  	MOV.D	[W2], W0
;pid.c,51 :: 		}
L_end_PID_Proccess:
0x0FEC	0xFA8000  	ULNK
0x0FEE	0x060000  	RETURN
; end of _PID_Proccess
__Sub_FP:
0x0850	0xFA0000  	LNK	#0
;__Lib_MathDouble.c,830 :: 		
;__Lib_MathDouble.c,831 :: 		
0x0852	0xAAE007  	BTG	W3, #15
;__Lib_MathDouble.c,832 :: 		
0x0854	0x07FD59  	RCALL	__AddSub_FP
;__Lib_MathDouble.c,833 :: 		
L_end__Sub_FP:
0x0856	0xFA8000  	ULNK
0x0858	0x060000  	RETURN
; end of __Sub_FP
__AddSub_FP:
0x0308	0xFA0000  	LNK	#0
;__Lib_MathDouble.c,582 :: 		
;__Lib_MathDouble.c,584 :: 		
0x030A	0x070002  	RCALL	AddSubFP__addsf3
;__Lib_MathDouble.c,585 :: 		
0x030C	0x000000040470  	GOTO	the_end__AddSub_FP
;__Lib_MathDouble.c,588 :: 		
AddSubFP__addsf3:
;__Lib_MathDouble.c,589 :: 		
0x0310	0xBE9F88  	MOV.D	W8, [W15++]
;__Lib_MathDouble.c,590 :: 		
0x0312	0xBE9F8A  	MOV.D	W10, [W15++]
;__Lib_MathDouble.c,591 :: 		
0x0314	0x781F8C  	MOV	W12, [W15++]
;__Lib_MathDouble.c,592 :: 		
0x0316	0x070059  	RCALL	AddSubFP__funpack2
;__Lib_MathDouble.c,593 :: 		
0x0318	0x330060  	BRA N	AddSubFP__fPropagateNaN
;__Lib_MathDouble.c,594 :: 		
0x031A	0xE15064  	CP	W10, #4
;__Lib_MathDouble.c,595 :: 		
0x031C	0x32004F  	BRA Z	AddSubFP_aisinfinite
;__Lib_MathDouble.c,596 :: 		
AddSubFP_checkspecialb:
;__Lib_MathDouble.c,597 :: 		
0x031E	0xE12064  	CP	W4, #4
;__Lib_MathDouble.c,598 :: 		
0x0320	0x320052  	BRA Z	AddSubFP_return2_3
;__Lib_MathDouble.c,599 :: 		
0x0322	0x6C8203  	XOR	W9, W3, W4
;__Lib_MathDouble.c,600 :: 		
0x0324	0x3B0007  	BRA NN	AddSubFP_getsign
;__Lib_MathDouble.c,601 :: 		
0x0326	0xD00509  	SL	W9, W10
;__Lib_MathDouble.c,602 :: 		
0x0328	0xD00603  	SL	W3, W12
;__Lib_MathDouble.c,603 :: 		
0x032A	0x540F82  	SUB	W8, W2, [W15]
;__Lib_MathDouble.c,604 :: 		
0x032C	0x5D060C  	SUBB	W10, W12, W12
;__Lib_MathDouble.c,605 :: 		
0x032E	0x390002  	BRA NC	AddSubFP_getsign
;__Lib_MathDouble.c,606 :: 		
0x0330	0x320002  	BRA Z	AddSubFP_gotsign
;__Lib_MathDouble.c,607 :: 		
0x0332	0x880039  	MOV	W9, W3
;__Lib_MathDouble.c,608 :: 		
AddSubFP_getsign:
;__Lib_MathDouble.c,609 :: 		
0x0334	0x8800C3  	MOV	W3, W12
;__Lib_MathDouble.c,610 :: 		
AddSubFP_gotsign:
;__Lib_MathDouble.c,611 :: 		
0x0336	0x558285  	SUB	W11, W5, W5
;__Lib_MathDouble.c,612 :: 		
0x0338	0x3D0004  	BRA GE	AddSubFP_expcanonical
;__Lib_MathDouble.c,613 :: 		
0x033A	0xFD0300  	EXCH	W0, W6
;__Lib_MathDouble.c,614 :: 		
0x033C	0xFD0381  	EXCH	W1, W7
;__Lib_MathDouble.c,615 :: 		
0x033E	0xEA0285  	NEG	W5, W5
;__Lib_MathDouble.c,616 :: 		
0x0340	0x42858B  	ADD	W5, W11, W11
;__Lib_MathDouble.c,617 :: 		
AddSubFP_expcanonical:
;__Lib_MathDouble.c,618 :: 		
0x0342	0x720F84  	IOR	W4, W4, [W15]
;__Lib_MathDouble.c,619 :: 		
0x0344	0x3B0002  	BRA NN	AddSubFP_nonegate
;__Lib_MathDouble.c,620 :: 		
0x0346	0x100060  	SUBR	W0, #0, W0
;__Lib_MathDouble.c,621 :: 		
0x0348	0x1880E0  	SUBBR	W1, #0, W1
;__Lib_MathDouble.c,622 :: 		
AddSubFP_nonegate:
;__Lib_MathDouble.c,623 :: 		
0x034A	0xB81160  	MUL.UU	W2, #0, W2
;__Lib_MathDouble.c,624 :: 		
0x034C	0xEB0500  	CLR	W10
;__Lib_MathDouble.c,625 :: 		
0x034E	0xE1287A  	CP	W5, #26
;__Lib_MathDouble.c,626 :: 		
0x0350	0x39000A  	BRA NC	AddSubFP_aligniter
;__Lib_MathDouble.c,627 :: 		
0x0352	0x880006  	MOV	W6, W0
;__Lib_MathDouble.c,628 :: 		
0x0354	0xDD5DC7  	SL	W11, #7, W11
;__Lib_MathDouble.c,629 :: 		
0x0356	0xB207F7  	AND	#127, W7
;__Lib_MathDouble.c,630 :: 		
0x0358	0x758087  	IOR	W11, W7, W1
;__Lib_MathDouble.c,631 :: 		
0x035A	0x37002D  	BRA	AddSubFP_signoff
;__Lib_MathDouble.c,632 :: 		
AddSubFP_align:
;__Lib_MathDouble.c,633 :: 		
0x035C	0x718182  	IOR	W3, W2, W3
;__Lib_MathDouble.c,634 :: 		
0x035E	0x88002A  	MOV	W10, W2
;__Lib_MathDouble.c,635 :: 		
0x0360	0x600561  	AND	W0, #1, W10
;__Lib_MathDouble.c,636 :: 		
0x0362	0xD18081  	ASR	W1, W1
;__Lib_MathDouble.c,637 :: 		
0x0364	0xD38000  	RRC	W0, W0
;__Lib_MathDouble.c,638 :: 		
AddSubFP_aligniter:
;__Lib_MathDouble.c,639 :: 		
0x0366	0xE90285  	DEC	W5, W5
;__Lib_MathDouble.c,640 :: 		
0x0368	0x3BFFF9  	BRA NN	AddSubFP_align
;__Lib_MathDouble.c,641 :: 		
AddSubFP_aligned:
;__Lib_MathDouble.c,642 :: 		
0x036A	0x400406  	ADD	W0, W6, W8
;__Lib_MathDouble.c,643 :: 		
0x036C	0x488487  	ADDC	W1, W7, W9
;__Lib_MathDouble.c,644 :: 		
0x036E	0x3B0002  	BRA NN	AddSubFP_normalizesum
;__Lib_MathDouble.c,645 :: 		
0x0370	0x140460  	SUBR	W8, #0, W8
;__Lib_MathDouble.c,646 :: 		
0x0372	0x1C84E0  	SUBBR	W9, #0, W9
;__Lib_MathDouble.c,647 :: 		
AddSubFP_normalizesum:
;__Lib_MathDouble.c,648 :: 		
0x0374	0xA38809  	BTST.Z	W9, #8
;__Lib_MathDouble.c,649 :: 		
0x0376	0x320007  	BRA Z	AddSubFP_checknormal
;__Lib_MathDouble.c,650 :: 		
0x0378	0x71818A  	IOR	W3, W10, W3
;__Lib_MathDouble.c,651 :: 		
0x037A	0x718182  	IOR	W3, W2, W3
;__Lib_MathDouble.c,652 :: 		
0x037C	0x640161  	AND	W8, #1, W2
;__Lib_MathDouble.c,653 :: 		
0x037E	0xD10489  	LSR	W9, W9
;__Lib_MathDouble.c,654 :: 		
0x0380	0xD38408  	RRC	W8, W8
;__Lib_MathDouble.c,655 :: 		
0x0382	0xE8058B  	INC	W11, W11
;__Lib_MathDouble.c,656 :: 		
0x0384	0x370017  	BRA	AddSubFP_round
;__Lib_MathDouble.c,657 :: 		
AddSubFP_checknormal:
;__Lib_MathDouble.c,658 :: 		
0x0386	0xA37809  	BTST.Z	W9, #7
;__Lib_MathDouble.c,659 :: 		
0x0388	0x3A0013  	BRA NZ	AddSubFP_discardguard
;__Lib_MathDouble.c,660 :: 		
AddSubFP_underflow:
;__Lib_MathDouble.c,661 :: 		
0x038A	0xE20016  	CP0	W11
;__Lib_MathDouble.c,662 :: 		
0x038C	0x340013  	BRA LE	AddSubFP_round
;__Lib_MathDouble.c,663 :: 		
0x038E	0xE9058B  	DEC	W11, W11
;__Lib_MathDouble.c,664 :: 		
0x0390	0x440408  	ADD	W8, W8, W8
;__Lib_MathDouble.c,665 :: 		
0x0392	0x4C8489  	ADDC	W9, W9, W9
;__Lib_MathDouble.c,666 :: 		
0x0394	0x74440A  	IOR.B	W8, W10, W8
;__Lib_MathDouble.c,667 :: 		
0x0396	0xA37809  	BTST.Z	W9, #7
;__Lib_MathDouble.c,668 :: 		
0x0398	0x3A000D  	BRA NZ	AddSubFP_round
;__Lib_MathDouble.c,669 :: 		
AddSubFP_normalizeloop:
;__Lib_MathDouble.c,670 :: 		
0x039A	0xE20016  	CP0	W11
;__Lib_MathDouble.c,671 :: 		
0x039C	0x340007  	BRA LE	AddSubFP_normalizeexit
;__Lib_MathDouble.c,672 :: 		
0x039E	0xE9058B  	DEC	W11, W11
;__Lib_MathDouble.c,673 :: 		
0x03A0	0x440408  	ADD	W8, W8, W8
;__Lib_MathDouble.c,674 :: 		
0x03A2	0x4C8489  	ADDC	W9, W9, W9
;__Lib_MathDouble.c,675 :: 		
0x03A4	0x3A0001  	BRA NZ	AddSubFP_normalizetest
;__Lib_MathDouble.c,676 :: 		
0x03A6	0x20000B  	MOV	#0, W11
;__Lib_MathDouble.c,677 :: 		
AddSubFP_normalizetest:
;__Lib_MathDouble.c,678 :: 		
0x03A8	0xA37809  	BTST.Z	W9, #7
;__Lib_MathDouble.c,679 :: 		
0x03AA	0x32FFF7  	BRA Z	AddSubFP_normalizeloop
;__Lib_MathDouble.c,680 :: 		
AddSubFP_normalizeexit:
;__Lib_MathDouble.c,681 :: 		
0x03AC	0xEB0100  	CLR	W2
;__Lib_MathDouble.c,682 :: 		
0x03AE	0x370002  	BRA	AddSubFP_round
;__Lib_MathDouble.c,683 :: 		
AddSubFP_discardguard:
;__Lib_MathDouble.c,684 :: 		
0x03B0	0x718182  	IOR	W3, W2, W3
;__Lib_MathDouble.c,685 :: 		
0x03B2	0x88002A  	MOV	W10, W2
;__Lib_MathDouble.c,686 :: 		
AddSubFP_round:
;__Lib_MathDouble.c,687 :: 		
0x03B4	0x070022  	RCALL	AddSubFP__fpack
;__Lib_MathDouble.c,688 :: 		
AddSubFP_signoff:
;__Lib_MathDouble.c,689 :: 		
0x03B6	0xA7F00C  	BTSC	W12, #15
;__Lib_MathDouble.c,690 :: 		
0x03B8	0xA8E003  	BSET	W1, #15
;__Lib_MathDouble.c,691 :: 		
0x03BA	0x370018  	BRA	AddSubFP__fbopExit
;__Lib_MathDouble.c,692 :: 		
AddSubFP_aisinfinite:
;__Lib_MathDouble.c,693 :: 		
0x03BC	0xE12064  	CP	W4, #4
;__Lib_MathDouble.c,694 :: 		
0x03BE	0x3A0002  	BRA NZ	AddSubFP_return8_3
;__Lib_MathDouble.c,695 :: 		
0x03C0	0x6C8F83  	XOR	W9, W3, [W15]
;__Lib_MathDouble.c,696 :: 		
0x03C2	0x330018  	BRA N	AddSubFP__fbopReturnNaN
;__Lib_MathDouble.c,697 :: 		
AddSubFP_return8_3:
;__Lib_MathDouble.c,698 :: 		
0x03C4	0xBE8108  	MOV.D	W8, W2
;__Lib_MathDouble.c,699 :: 		
AddSubFP_return2_3:
;__Lib_MathDouble.c,700 :: 		
0x03C6	0xBE8002  	MOV.D	W2, W0
;__Lib_MathDouble.c,701 :: 		
0x03C8	0x370011  	BRA	AddSubFP__fbopExit
;__Lib_MathDouble.c,702 :: 		
AddSubFP__funpack2:
;__Lib_MathDouble.c,703 :: 		
0x03CA	0xBE8400  	MOV.D	W0, W8
;__Lib_MathDouble.c,704 :: 		
0x03CC	0x07003C  	RCALL	AddSubFP__funpack
;__Lib_MathDouble.c,705 :: 		
0x03CE	0xBE8300  	MOV.D	W0, W6
;__Lib_MathDouble.c,706 :: 		
0x03D0	0xBE8504  	MOV.D	W4, W10
;__Lib_MathDouble.c,707 :: 		
0x03D2	0xBE8002  	MOV.D	W2, W0
;__Lib_MathDouble.c,708 :: 		
0x03D4	0x070038  	RCALL	AddSubFP__funpack
;__Lib_MathDouble.c,709 :: 		
0x03D6	0x754F84  	IOR.B	W10, W4, [W15]
;__Lib_MathDouble.c,710 :: 		
0x03D8	0x060000  	RETURN
;__Lib_MathDouble.c,711 :: 		
AddSubFP__fPropagateNaN:
;__Lib_MathDouble.c,712 :: 		
0x03DA	0xBE8002  	MOV.D	W2, W0
;__Lib_MathDouble.c,713 :: 		
0x03DC	0xE15064  	CP	W10, #4
;__Lib_MathDouble.c,714 :: 		
0x03DE	0x360005  	BRA LEU	AddSubFP_return0_1
;__Lib_MathDouble.c,715 :: 		
0x03E0	0xE12064  	CP	W4, #4
;__Lib_MathDouble.c,716 :: 		
0x03E2	0x360002  	BRA LEU	AddSubFP_return8_1
;__Lib_MathDouble.c,717 :: 		
0x03E4	0xA36809  	BTST.Z	W9, #6
;__Lib_MathDouble.c,718 :: 		
0x03E6	0x3A0001  	BRA NZ	AddSubFP_return0_1
;__Lib_MathDouble.c,719 :: 		
AddSubFP_return8_1:
;__Lib_MathDouble.c,720 :: 		
0x03E8	0xBE8008  	MOV.D	W8, W0
;__Lib_MathDouble.c,721 :: 		
AddSubFP_return0_1:
;__Lib_MathDouble.c,722 :: 		
0x03EA	0xA8C002  	BSET	W1, #6
;__Lib_MathDouble.c,723 :: 		
AddSubFP__fbopExit:
;__Lib_MathDouble.c,724 :: 		
0x03EC	0x78064F  	MOV	[--W15], W12
;__Lib_MathDouble.c,725 :: 		
0x03EE	0xBE054F  	MOV.D	[--W15], W10
;__Lib_MathDouble.c,726 :: 		
0x03F0	0xBE044F  	MOV.D	[--W15], W8
;__Lib_MathDouble.c,727 :: 		
0x03F2	0x060000  	RETURN
;__Lib_MathDouble.c,728 :: 		
AddSubFP__fbopReturnNaN:
;__Lib_MathDouble.c,729 :: 		
0x03F4	0x2FFFF0  	MOV	#65535, W0
;__Lib_MathDouble.c,730 :: 		
0x03F6	0x27FFF1  	MOV	#32767, W1
;__Lib_MathDouble.c,731 :: 		
0x03F8	0x37FFF9  	BRA	AddSubFP__fbopExit
;__Lib_MathDouble.c,732 :: 		
AddSubFP__fpack:
;__Lib_MathDouble.c,733 :: 		
0x03FA	0x200081  	MOV	#8, W1
;__Lib_MathDouble.c,734 :: 		
0x03FC	0x558061  	SUB	W11, #1, W0
;__Lib_MathDouble.c,735 :: 		
0x03FE	0x3D000B  	BRA GE	AddSubFP_notsubnormal_1
;__Lib_MathDouble.c,736 :: 		
0x0400	0x20000B  	MOV	#0, W11
;__Lib_MathDouble.c,737 :: 		
0x0402	0x2FFE61  	MOV	#65510, W1
;__Lib_MathDouble.c,738 :: 		
0x0404	0xE10001  	CP	W0, W1
;__Lib_MathDouble.c,739 :: 		
0x0406	0x34001D  	BRA LE	AddSubFP_zerosig
;__Lib_MathDouble.c,740 :: 		
AddSubFP_subnormal_1:
;__Lib_MathDouble.c,741 :: 		
0x0408	0x718182  	IOR	W3, W2, W3
;__Lib_MathDouble.c,742 :: 		
0x040A	0x640161  	AND	W8, #1, W2
;__Lib_MathDouble.c,743 :: 		
0x040C	0xD10489  	LSR	W9, W9
;__Lib_MathDouble.c,744 :: 		
0x040E	0xD38408  	RRC	W8, W8
;__Lib_MathDouble.c,745 :: 		
0x0410	0xE80000  	INC	W0, W0
;__Lib_MathDouble.c,746 :: 		
0x0412	0x3AFFFA  	BRA NZ	AddSubFP_subnormal_1
;__Lib_MathDouble.c,747 :: 		
0x0414	0x200071  	MOV	#7, W1
;__Lib_MathDouble.c,748 :: 		
AddSubFP_notsubnormal_1:
;__Lib_MathDouble.c,749 :: 		
0x0416	0x640061  	AND	W8, #1, W0
;__Lib_MathDouble.c,750 :: 		
0x0418	0x700003  	IOR	W0, W3, W0
;__Lib_MathDouble.c,751 :: 		
0x041A	0x600002  	AND	W0, W2, W0
;__Lib_MathDouble.c,752 :: 		
0x041C	0x320009  	BRA Z	AddSubFP_packupandgo
;__Lib_MathDouble.c,753 :: 		
0x041E	0x440461  	ADD	W8, #1, W8
;__Lib_MathDouble.c,754 :: 		
0x0420	0x4C84E0  	ADDC	W9, #0, W9
;__Lib_MathDouble.c,755 :: 		
0x0422	0xA58809  	BTST.Z	W9, W1
;__Lib_MathDouble.c,756 :: 		
0x0424	0x320005  	BRA Z	AddSubFP_packupandgo
;__Lib_MathDouble.c,757 :: 		
0x0426	0xE8058B  	INC	W11, W11
;__Lib_MathDouble.c,758 :: 		
0x0428	0xE10868  	CP	W1, #8
;__Lib_MathDouble.c,759 :: 		
0x042A	0x3A0002  	BRA NZ	AddSubFP_packupandgo
;__Lib_MathDouble.c,760 :: 		
0x042C	0xD10489  	LSR	W9, W9
;__Lib_MathDouble.c,761 :: 		
0x042E	0xD38408  	RRC	W8, W8
;__Lib_MathDouble.c,762 :: 		
AddSubFP_packupandgo:
;__Lib_MathDouble.c,763 :: 		
0x0430	0x200FF2  	MOV	#255, W2
;__Lib_MathDouble.c,764 :: 		
0x0432	0xE15802  	CP	W11, W2
;__Lib_MathDouble.c,765 :: 		
0x0434	0x3D0005  	BRA GE	AddSubFP_overflow
;__Lib_MathDouble.c,766 :: 		
0x0436	0xDD5DC7  	SL	W11, #7, W11
;__Lib_MathDouble.c,767 :: 		
0x0438	0xB207F9  	AND	#127, W9
;__Lib_MathDouble.c,768 :: 		
0x043A	0x758089  	IOR	W11, W9, W1
;__Lib_MathDouble.c,769 :: 		
0x043C	0x880008  	MOV	W8, W0
;__Lib_MathDouble.c,770 :: 		
0x043E	0x060000  	RETURN
;__Lib_MathDouble.c,771 :: 		
AddSubFP_overflow:
;__Lib_MathDouble.c,772 :: 		
0x0440	0x27F80B  	MOV	#32640, W11
;__Lib_MathDouble.c,773 :: 		
AddSubFP_zerosig:
;__Lib_MathDouble.c,774 :: 		
0x0442	0x88001B  	MOV	W11, W1
;__Lib_MathDouble.c,775 :: 		
0x0444	0x050000  	RETLW	#0, W0
;__Lib_MathDouble.c,776 :: 		
AddSubFP__funpack:
;__Lib_MathDouble.c,777 :: 		
0x0446	0xDE0AC7  	LSR	W1, #7, W5
;__Lib_MathDouble.c,778 :: 		
0x0448	0xB207F1  	AND	#127, W1
;__Lib_MathDouble.c,779 :: 		
0x044A	0xB20FF5  	AND	#255, W5
;__Lib_MathDouble.c,780 :: 		
0x044C	0x320008  	BRA Z	AddSubFP_zeroorsub
;__Lib_MathDouble.c,781 :: 		
0x044E	0x42CFE1  	ADD.B	W5, #1, [W15]
;__Lib_MathDouble.c,782 :: 		
0x0450	0x320002  	BRA Z	AddSubFP_nanorinf
;__Lib_MathDouble.c,783 :: 		
AddSubFP_finitereturn:
;__Lib_MathDouble.c,784 :: 		
0x0452	0xA8E002  	BSET	W1, #7
;__Lib_MathDouble.c,785 :: 		
0x0454	0x050024  	RETLW	#2, W4
;__Lib_MathDouble.c,786 :: 		
AddSubFP_nanorinf:
;__Lib_MathDouble.c,787 :: 		
0x0456	0x700F81  	IOR	W0, W1, [W15]
;__Lib_MathDouble.c,788 :: 		
0x0458	0x320001  	BRA Z	AddSubFP_infinite
;__Lib_MathDouble.c,789 :: 		
0x045A	0x050804  	RETLW	#128, W4
;__Lib_MathDouble.c,790 :: 		
AddSubFP_infinite:
;__Lib_MathDouble.c,791 :: 		
0x045C	0x050044  	RETLW	#4, W4
;__Lib_MathDouble.c,792 :: 		
AddSubFP_zeroorsub:
;__Lib_MathDouble.c,793 :: 		
0x045E	0x700F81  	IOR	W0, W1, [W15]
;__Lib_MathDouble.c,794 :: 		
0x0460	0x3A0002  	BRA NZ	AddSubFP_subnormal_2
;__Lib_MathDouble.c,795 :: 		
0x0462	0x050014  	RETLW	#1, W4
;__Lib_MathDouble.c,796 :: 		
AddSubFP_normalize:
;__Lib_MathDouble.c,797 :: 		
0x0464	0xE90285  	DEC	W5, W5
;__Lib_MathDouble.c,798 :: 		
AddSubFP_subnormal_2:
;__Lib_MathDouble.c,799 :: 		
0x0466	0x400000  	ADD	W0, W0, W0
;__Lib_MathDouble.c,800 :: 		
0x0468	0x48C081  	ADDC.B	W1, W1, W1
;__Lib_MathDouble.c,801 :: 		
0x046A	0x3BFFFC  	BRA NN	AddSubFP_normalize
;__Lib_MathDouble.c,802 :: 		
0x046C	0xA8E002  	BSET	W1, #7
;__Lib_MathDouble.c,803 :: 		
0x046E	0x050024  	RETLW	#2, W4
;__Lib_MathDouble.c,806 :: 		
the_end__AddSub_FP:
;__Lib_MathDouble.c,809 :: 		
L_end__AddSub_FP:
0x0470	0xFA8000  	ULNK
0x0472	0x060000  	RETURN
; end of __AddSub_FP
__Mul_FP:
0x085A	0xFA0000  	LNK	#0
;__Lib_MathDouble.c,855 :: 		
;__Lib_MathDouble.c,857 :: 		
0x085C	0x070002  	RCALL	MulFP___mulsf3
;__Lib_MathDouble.c,858 :: 		
0x085E	0x000000040970  	GOTO	the_end__Mul_FP
;__Lib_MathDouble.c,861 :: 		
MulFP___mulsf3:
;__Lib_MathDouble.c,862 :: 		
0x0862	0xBE9F88  	MOV.D	W8, [W15++]
;__Lib_MathDouble.c,863 :: 		
0x0864	0xBE9F8A  	MOV.D	W10, [W15++]
;__Lib_MathDouble.c,864 :: 		
0x0866	0x781F8C  	MOV	W12, [W15++]
;__Lib_MathDouble.c,865 :: 		
0x0868	0x070030  	RCALL	MulFP__funpack2
;__Lib_MathDouble.c,866 :: 		
0x086A	0x330037  	BRA N	MulFP__fPropagateNaN
;__Lib_MathDouble.c,867 :: 		
0x086C	0x6C8603  	XOR	W9, W3, W12
;__Lib_MathDouble.c,868 :: 		
0x086E	0xE15064  	CP	W10, #4
;__Lib_MathDouble.c,869 :: 		
0x0870	0x320024  	BRA Z	MulFP_aisinfinite
;__Lib_MathDouble.c,870 :: 		
0x0872	0xE12064  	CP	W4, #4
;__Lib_MathDouble.c,871 :: 		
0x0874	0x320027  	BRA Z	MulFP_bisinfinite
;__Lib_MathDouble.c,872 :: 		
0x0876	0xE15061  	CP	W10, #1
;__Lib_MathDouble.c,873 :: 		
0x0878	0x320022  	BRA Z	MulFP_return8_1
;__Lib_MathDouble.c,874 :: 		
0x087A	0xE12061  	CP	W4, #1
;__Lib_MathDouble.c,875 :: 		
0x087C	0x320021  	BRA Z	MulFP_return2_1
;__Lib_MathDouble.c,876 :: 		
0x087E	0x42858B  	ADD	W5, W11, W11
;__Lib_MathDouble.c,877 :: 		
0x0880	0xB107EB  	SUB	#126, W11
;__Lib_MathDouble.c,878 :: 		
0x0882	0xB83401  	MUL.UU	W6, W1, W8
;__Lib_MathDouble.c,879 :: 		
0x0884	0xB83A00  	MUL.UU	W7, W0, W4
;__Lib_MathDouble.c,880 :: 		
0x0886	0x420408  	ADD	W4, W8, W8
;__Lib_MathDouble.c,881 :: 		
0x0888	0x4A8489  	ADDC	W5, W9, W9
;__Lib_MathDouble.c,882 :: 		
0x088A	0xB83A01  	MUL.UU	W7, W1, W4
;__Lib_MathDouble.c,883 :: 		
0x088C	0xB83000  	MUL.UU	W6, W0, W0
;__Lib_MathDouble.c,884 :: 		
0x088E	0x408088  	ADD	W1, W8, W1
;__Lib_MathDouble.c,885 :: 		
0x0890	0x4A0109  	ADDC	W4, W9, W2
;__Lib_MathDouble.c,886 :: 		
0x0892	0x330004  	BRA N	MulFP_formsticky
;__Lib_MathDouble.c,887 :: 		
0x0894	0x400000  	ADD	W0, W0, W0
;__Lib_MathDouble.c,888 :: 		
0x0896	0x488081  	ADDC	W1, W1, W1
;__Lib_MathDouble.c,889 :: 		
0x0898	0x490102  	ADDC	W2, W2, W2
;__Lib_MathDouble.c,890 :: 		
0x089A	0xE9058B  	DEC	W11, W11
;__Lib_MathDouble.c,891 :: 		
MulFP_formsticky:
;__Lib_MathDouble.c,892 :: 		
0x089C	0xDD09C9  	SL	W1, #9, W3
;__Lib_MathDouble.c,893 :: 		
0x089E	0x700183  	IOR	W0, W3, W3
;__Lib_MathDouble.c,894 :: 		
0x08A0	0x320001  	BRA Z	MulFP_formRandSig
;__Lib_MathDouble.c,895 :: 		
0x08A2	0x200013  	MOV	#1, W3
;__Lib_MathDouble.c,896 :: 		
MulFP_formRandSig:
;__Lib_MathDouble.c,897 :: 		
0x08A4	0xDE14C8  	LSR	W2, #8, W9
;__Lib_MathDouble.c,898 :: 		
0x08A6	0xDD1448  	SL	W2, #8, W8
;__Lib_MathDouble.c,899 :: 		
0x08A8	0xDE0947  	LSR	W1, #7, W2
;__Lib_MathDouble.c,900 :: 		
0x08AA	0xB20012  	AND	#1, W2
;__Lib_MathDouble.c,901 :: 		
0x08AC	0xDE08C8  	LSR	W1, #8, W1
;__Lib_MathDouble.c,902 :: 		
0x08AE	0x708408  	IOR	W1, W8, W8
;__Lib_MathDouble.c,903 :: 		
0x08B0	0x070024  	RCALL	MulFP__fpack
;__Lib_MathDouble.c,904 :: 		
MulFP_return0_1:
;__Lib_MathDouble.c,905 :: 		
0x08B2	0xA1F001  	BCLR	W1, #15
;__Lib_MathDouble.c,906 :: 		
0x08B4	0xA7F00C  	BTSC	W12, #15
;__Lib_MathDouble.c,907 :: 		
0x08B6	0xA8E003  	BSET	W1, #15
;__Lib_MathDouble.c,908 :: 		
0x08B8	0x370019  	BRA	MulFP__fbopExit
;__Lib_MathDouble.c,909 :: 		
MulFP_aisinfinite:
;__Lib_MathDouble.c,910 :: 		
0x08BA	0xE12061  	CP	W4, #1
;__Lib_MathDouble.c,911 :: 		
0x08BC	0x32001B  	BRA Z	MulFP__fbopReturnNaN
;__Lib_MathDouble.c,912 :: 		
MulFP_return8_1:
;__Lib_MathDouble.c,913 :: 		
0x08BE	0xBE8108  	MOV.D	W8, W2
;__Lib_MathDouble.c,914 :: 		
MulFP_return2_1:
;__Lib_MathDouble.c,915 :: 		
0x08C0	0xBE8002  	MOV.D	W2, W0
;__Lib_MathDouble.c,916 :: 		
0x08C2	0x37FFF7  	BRA	MulFP_return0_1
;__Lib_MathDouble.c,917 :: 		
MulFP_bisinfinite:
;__Lib_MathDouble.c,918 :: 		
0x08C4	0xE15061  	CP	W10, #1
;__Lib_MathDouble.c,919 :: 		
0x08C6	0x3AFFFC  	BRA NZ	MulFP_return2_1
;__Lib_MathDouble.c,920 :: 		
0x08C8	0x370015  	BRA	MulFP__fbopReturnNaN
;__Lib_MathDouble.c,921 :: 		
MulFP__funpack2:
;__Lib_MathDouble.c,922 :: 		
0x08CA	0xBE8400  	MOV.D	W0, W8
;__Lib_MathDouble.c,923 :: 		
0x08CC	0x07003C  	RCALL	MulFP__funpack
;__Lib_MathDouble.c,924 :: 		
0x08CE	0xBE8300  	MOV.D	W0, W6
;__Lib_MathDouble.c,925 :: 		
0x08D0	0xBE8504  	MOV.D	W4, W10
;__Lib_MathDouble.c,926 :: 		
0x08D2	0xBE8002  	MOV.D	W2, W0
;__Lib_MathDouble.c,927 :: 		
0x08D4	0x070038  	RCALL	MulFP__funpack
;__Lib_MathDouble.c,928 :: 		
0x08D6	0x754F84  	IOR.B	W10, W4, [W15]
;__Lib_MathDouble.c,929 :: 		
0x08D8	0x060000  	RETURN
;__Lib_MathDouble.c,930 :: 		
MulFP__fPropagateNaN:
;__Lib_MathDouble.c,931 :: 		
0x08DA	0xBE8002  	MOV.D	W2, W0
;__Lib_MathDouble.c,932 :: 		
0x08DC	0xE15064  	CP	W10, #4
;__Lib_MathDouble.c,933 :: 		
0x08DE	0x360005  	BRA LEU	MulFP_return0_2
;__Lib_MathDouble.c,934 :: 		
0x08E0	0xE12064  	CP	W4, #4
;__Lib_MathDouble.c,935 :: 		
0x08E2	0x360002  	BRA LEU	MulFP_return8_2
;__Lib_MathDouble.c,936 :: 		
0x08E4	0xA36809  	BTST.Z	W9, #6
;__Lib_MathDouble.c,937 :: 		
0x08E6	0x3A0001  	BRA NZ	MulFP_return0_2
;__Lib_MathDouble.c,938 :: 		
MulFP_return8_2:
;__Lib_MathDouble.c,939 :: 		
0x08E8	0xBE8008  	MOV.D	W8, W0
;__Lib_MathDouble.c,940 :: 		
MulFP_return0_2:
;__Lib_MathDouble.c,941 :: 		
0x08EA	0xA8C002  	BSET	W1, #6
;__Lib_MathDouble.c,942 :: 		
MulFP__fbopExit:
;__Lib_MathDouble.c,943 :: 		
0x08EC	0x78064F  	MOV	[--W15], W12
;__Lib_MathDouble.c,944 :: 		
0x08EE	0xBE054F  	MOV.D	[--W15], W10
;__Lib_MathDouble.c,945 :: 		
0x08F0	0xBE044F  	MOV.D	[--W15], W8
;__Lib_MathDouble.c,946 :: 		
0x08F2	0x060000  	RETURN
;__Lib_MathDouble.c,947 :: 		
MulFP__fbopReturnNaN:
;__Lib_MathDouble.c,948 :: 		
0x08F4	0x2FFFF0  	MOV	#65535, W0
;__Lib_MathDouble.c,949 :: 		
0x08F6	0x27FFF1  	MOV	#32767, W1
;__Lib_MathDouble.c,950 :: 		
0x08F8	0x37FFF9  	BRA	MulFP__fbopExit
;__Lib_MathDouble.c,951 :: 		
MulFP__fpack:
;__Lib_MathDouble.c,952 :: 		
0x08FA	0x200081  	MOV	#8, W1
;__Lib_MathDouble.c,953 :: 		
0x08FC	0x558061  	SUB	W11, #1, W0
;__Lib_MathDouble.c,954 :: 		
0x08FE	0x3D000B  	BRA GE	MulFP_notsubnormal
;__Lib_MathDouble.c,955 :: 		
0x0900	0x20000B  	MOV	#0, W11
;__Lib_MathDouble.c,956 :: 		
0x0902	0x2FFE61  	MOV	#65510, W1
;__Lib_MathDouble.c,957 :: 		
0x0904	0xE10001  	CP	W0, W1
;__Lib_MathDouble.c,958 :: 		
0x0906	0x34001D  	BRA LE	MulFP_zerosig
;__Lib_MathDouble.c,959 :: 		
MulFP_subnormal1:
;__Lib_MathDouble.c,960 :: 		
0x0908	0x718182  	IOR	W3, W2, W3
;__Lib_MathDouble.c,961 :: 		
0x090A	0x640161  	AND	W8, #1, W2
;__Lib_MathDouble.c,962 :: 		
0x090C	0xD10489  	LSR	W9, W9
;__Lib_MathDouble.c,963 :: 		
0x090E	0xD38408  	RRC	W8, W8
;__Lib_MathDouble.c,964 :: 		
0x0910	0xE80000  	INC	W0, W0
;__Lib_MathDouble.c,965 :: 		
0x0912	0x3AFFFA  	BRA NZ	MulFP_subnormal1
;__Lib_MathDouble.c,966 :: 		
0x0914	0x200071  	MOV	#7, W1
;__Lib_MathDouble.c,967 :: 		
MulFP_notsubnormal:
;__Lib_MathDouble.c,968 :: 		
0x0916	0x640061  	AND	W8, #1, W0
;__Lib_MathDouble.c,969 :: 		
0x0918	0x700003  	IOR	W0, W3, W0
;__Lib_MathDouble.c,970 :: 		
0x091A	0x600002  	AND	W0, W2, W0
;__Lib_MathDouble.c,971 :: 		
0x091C	0x320009  	BRA Z	MulFP_packupandgo
;__Lib_MathDouble.c,972 :: 		
0x091E	0x440461  	ADD	W8, #1, W8
;__Lib_MathDouble.c,973 :: 		
0x0920	0x4C84E0  	ADDC	W9, #0, W9
;__Lib_MathDouble.c,974 :: 		
0x0922	0xA58809  	BTST.Z	W9, W1
;__Lib_MathDouble.c,975 :: 		
0x0924	0x320005  	BRA Z	MulFP_packupandgo
;__Lib_MathDouble.c,976 :: 		
0x0926	0xE8058B  	INC	W11, W11
;__Lib_MathDouble.c,977 :: 		
0x0928	0xE10868  	CP	W1, #8
;__Lib_MathDouble.c,978 :: 		
0x092A	0x3A0002  	BRA NZ	MulFP_packupandgo
;__Lib_MathDouble.c,979 :: 		
0x092C	0xD10489  	LSR	W9, W9
;__Lib_MathDouble.c,980 :: 		
0x092E	0xD38408  	RRC	W8, W8
;__Lib_MathDouble.c,981 :: 		
MulFP_packupandgo:
;__Lib_MathDouble.c,982 :: 		
0x0930	0x200FF2  	MOV	#255, W2
;__Lib_MathDouble.c,983 :: 		
0x0932	0xE15802  	CP	W11, W2
;__Lib_MathDouble.c,984 :: 		
0x0934	0x3D0005  	BRA GE	MulFP_overflow
;__Lib_MathDouble.c,985 :: 		
0x0936	0xDD5DC7  	SL	W11, #7, W11
;__Lib_MathDouble.c,986 :: 		
0x0938	0xB207F9  	AND	#127, W9
;__Lib_MathDouble.c,987 :: 		
0x093A	0x758089  	IOR	W11, W9, W1
;__Lib_MathDouble.c,988 :: 		
0x093C	0x880008  	MOV	W8, W0
;__Lib_MathDouble.c,989 :: 		
0x093E	0x060000  	RETURN
;__Lib_MathDouble.c,990 :: 		
MulFP_overflow:
;__Lib_MathDouble.c,991 :: 		
0x0940	0x27F80B  	MOV	#32640, W11
;__Lib_MathDouble.c,992 :: 		
MulFP_zerosig:
;__Lib_MathDouble.c,993 :: 		
0x0942	0x88001B  	MOV	W11, W1
;__Lib_MathDouble.c,994 :: 		
0x0944	0x050000  	RETLW	#0, W0
;__Lib_MathDouble.c,995 :: 		
MulFP__funpack:
;__Lib_MathDouble.c,996 :: 		
0x0946	0xDE0AC7  	LSR	W1, #7, W5
;__Lib_MathDouble.c,997 :: 		
0x0948	0xB207F1  	AND	#127, W1
;__Lib_MathDouble.c,998 :: 		
0x094A	0xB20FF5  	AND	#255, W5
;__Lib_MathDouble.c,999 :: 		
0x094C	0x320008  	BRA Z	MulFP_zeroorsub
;__Lib_MathDouble.c,1000 :: 		
0x094E	0x42CFE1  	ADD.B	W5, #1, [W15]
;__Lib_MathDouble.c,1001 :: 		
0x0950	0x320002  	BRA Z	MulFP_nanorinf
;__Lib_MathDouble.c,1002 :: 		
MulFP_finitereturn:
;__Lib_MathDouble.c,1003 :: 		
0x0952	0xA8E002  	BSET	W1, #7
;__Lib_MathDouble.c,1004 :: 		
0x0954	0x050024  	RETLW	#2, W4
;__Lib_MathDouble.c,1005 :: 		
MulFP_nanorinf:
;__Lib_MathDouble.c,1006 :: 		
0x0956	0x700F81  	IOR	W0, W1, [W15]
;__Lib_MathDouble.c,1007 :: 		
0x0958	0x320001  	BRA Z	MulFP_infinite
;__Lib_MathDouble.c,1008 :: 		
0x095A	0x050804  	RETLW	#128, W4
;__Lib_MathDouble.c,1009 :: 		
MulFP_infinite:
;__Lib_MathDouble.c,1010 :: 		
0x095C	0x050044  	RETLW	#4, W4
;__Lib_MathDouble.c,1011 :: 		
MulFP_zeroorsub:
;__Lib_MathDouble.c,1012 :: 		
0x095E	0x700F81  	IOR	W0, W1, [W15]
;__Lib_MathDouble.c,1013 :: 		
0x0960	0x3A0002  	BRA NZ	MulFP_subnormal2
;__Lib_MathDouble.c,1014 :: 		
0x0962	0x050014  	RETLW	#1, W4
;__Lib_MathDouble.c,1015 :: 		
MulFP_normalize:
;__Lib_MathDouble.c,1016 :: 		
0x0964	0xE90285  	DEC	W5, W5
;__Lib_MathDouble.c,1017 :: 		
MulFP_subnormal2:
;__Lib_MathDouble.c,1018 :: 		
0x0966	0x400000  	ADD	W0, W0, W0
;__Lib_MathDouble.c,1019 :: 		
0x0968	0x48C081  	ADDC.B	W1, W1, W1
;__Lib_MathDouble.c,1020 :: 		
0x096A	0x3BFFFC  	BRA NN	MulFP_normalize
;__Lib_MathDouble.c,1021 :: 		
0x096C	0xA8E002  	BSET	W1, #7
;__Lib_MathDouble.c,1022 :: 		
0x096E	0x050024  	RETLW	#2, W4
;__Lib_MathDouble.c,1025 :: 		
the_end__Mul_FP:
;__Lib_MathDouble.c,1028 :: 		
L_end__Mul_FP:
0x0970	0xFA8000  	ULNK
0x0972	0x060000  	RETURN
; end of __Mul_FP
__Long2Float:
0x0974	0xFA0000  	LNK	#0
;__Lib_MathDouble.c,104 :: 		
;__Lib_MathDouble.c,106 :: 		
0x0976	0x070002  	RCALL	LL_intro_Long2Float
;__Lib_MathDouble.c,107 :: 		
0x0978	0x000000040A26  	GOTO	the_end__Long2Float
;__Lib_MathDouble.c,109 :: 		
LL_intro_Long2Float:
;__Lib_MathDouble.c,110 :: 		
0x097C	0xE20004  	CP0	W2
;__Lib_MathDouble.c,111 :: 		
0x097E	0x3A0006  	BRA NZ	Longint2Float__floatsisf
;__Lib_MathDouble.c,113 :: 		
Longword2Float__floatuisf:
;__Lib_MathDouble.c,114 :: 		
0x0980	0xEB0500  	CLR	W10
;__Lib_MathDouble.c,115 :: 		
0x0982	0xE20002  	CP0	W1
;__Lib_MathDouble.c,116 :: 		
0x0984	0x3E000F  	BRA GTU	Long2Float_notspecial
;__Lib_MathDouble.c,117 :: 		
0x0986	0xE20000  	CP0	W0
;__Lib_MathDouble.c,118 :: 		
0x0988	0x320027  	BRA Z	Long2Float_return0
;__Lib_MathDouble.c,119 :: 		
0x098A	0x37000C  	BRA	Long2Float_notspecial
;__Lib_MathDouble.c,121 :: 		
Longint2Float__floatsisf:
;__Lib_MathDouble.c,122 :: 		
0x098C	0x8800A1  	MOV	W1, W10
;__Lib_MathDouble.c,123 :: 		
0x098E	0xE20002  	CP0	W1
;__Lib_MathDouble.c,124 :: 		
0x0990	0x350004  	BRA LT	Longint2Float_negative
;__Lib_MathDouble.c,125 :: 		
0x0992	0x3C0008  	BRA GT	Long2Float_notspecial
;__Lib_MathDouble.c,126 :: 		
0x0994	0xE20000  	CP0	W0
;__Lib_MathDouble.c,127 :: 		
0x0996	0x320020  	BRA Z	Long2Float_return0
;__Lib_MathDouble.c,128 :: 		
0x0998	0x370005  	BRA	Long2Float_notspecial
;__Lib_MathDouble.c,129 :: 		
Longint2Float_negative:
;__Lib_MathDouble.c,130 :: 		
0x099A	0x100060  	SUBR	W0, #0, W0
;__Lib_MathDouble.c,131 :: 		
0x099C	0x1880E0  	SUBBR	W1, #0, W1
;__Lib_MathDouble.c,132 :: 		
0x099E	0x3B0002  	BRA NN	Long2Float_notspecial
;__Lib_MathDouble.c,133 :: 		
0x09A0	0x2CF001  	MOV	#52992, W1
;__Lib_MathDouble.c,134 :: 		
0x09A2	0x37001A  	BRA	Long2Float_return0
;__Lib_MathDouble.c,136 :: 		
Long2Float_notspecial:
;__Lib_MathDouble.c,137 :: 		
0x09A4	0xBE8400  	MOV.D	W0, W8
;__Lib_MathDouble.c,138 :: 		
0x09A6	0xB81160  	MUL.UU	W2, #0, W2
;__Lib_MathDouble.c,139 :: 		
0x09A8	0x20096B  	MOV	#150, W11
;__Lib_MathDouble.c,140 :: 		
0x09AA	0xCF8209  	FF1L	W9, W4
;__Lib_MathDouble.c,141 :: 		
0x09AC	0x390002  	BRA NC	Long2Float_fixshift
;__Lib_MathDouble.c,142 :: 		
0x09AE	0xCF8208  	FF1L	W8, W4
;__Lib_MathDouble.c,143 :: 		
0x09B0	0xB04104  	ADD.B	#16, W4
;__Lib_MathDouble.c,144 :: 		
Long2Float_fixshift:
;__Lib_MathDouble.c,145 :: 		
0x09B2	0x524269  	SUB.B	W4, #9, W4
;__Lib_MathDouble.c,146 :: 		
0x09B4	0x32000E  	BRA Z	Long2Float_round
;__Lib_MathDouble.c,147 :: 		
0x09B6	0x3B0008  	BRA NN	Long2Float_shiftleft
;__Lib_MathDouble.c,148 :: 		
Long2Float_shiftright:
;__Lib_MathDouble.c,149 :: 		
0x09B8	0x718182  	IOR	W3, W2, W3
;__Lib_MathDouble.c,150 :: 		
0x09BA	0x640161  	AND	W8, #1, W2
;__Lib_MathDouble.c,151 :: 		
0x09BC	0xD10489  	LSR	W9, W9
;__Lib_MathDouble.c,152 :: 		
0x09BE	0xD38408  	RRC	W8, W8
;__Lib_MathDouble.c,153 :: 		
0x09C0	0xE8058B  	INC	W11, W11
;__Lib_MathDouble.c,154 :: 		
0x09C2	0xE84204  	INC.B	W4, W4
;__Lib_MathDouble.c,155 :: 		
0x09C4	0x3AFFF9  	BRA NZ	Long2Float_shiftright
;__Lib_MathDouble.c,156 :: 		
0x09C6	0x370005  	BRA	Long2Float_round
;__Lib_MathDouble.c,157 :: 		
Long2Float_shiftleft:
;__Lib_MathDouble.c,158 :: 		
0x09C8	0x440408  	ADD	W8, W8, W8
;__Lib_MathDouble.c,159 :: 		
0x09CA	0x4C8489  	ADDC	W9, W9, W9
;__Lib_MathDouble.c,160 :: 		
0x09CC	0xE9058B  	DEC	W11, W11
;__Lib_MathDouble.c,161 :: 		
0x09CE	0xE94204  	DEC.B	W4, W4
;__Lib_MathDouble.c,162 :: 		
0x09D0	0x3AFFFB  	BRA NZ	Long2Float_shiftleft
;__Lib_MathDouble.c,163 :: 		
Long2Float_round:
;__Lib_MathDouble.c,164 :: 		
0x09D2	0x070003  	RCALL	Long2Float__fpack
;__Lib_MathDouble.c,165 :: 		
0x09D4	0xA7F00A  	BTSC	W10, #15
;__Lib_MathDouble.c,166 :: 		
0x09D6	0xA8E003  	BSET	W1, #15
;__Lib_MathDouble.c,167 :: 		
Long2Float_return0:
;__Lib_MathDouble.c,168 :: 		
0x09D8	0x060000  	RETURN
;__Lib_MathDouble.c,169 :: 		
Long2Float__fpack:
;__Lib_MathDouble.c,170 :: 		
0x09DA	0x200081  	MOV	#8, W1
;__Lib_MathDouble.c,171 :: 		
0x09DC	0x558061  	SUB	W11, #1, W0
;__Lib_MathDouble.c,172 :: 		
0x09DE	0x3D000B  	BRA GE	Long2Float_notsubnormal
;__Lib_MathDouble.c,173 :: 		
0x09E0	0x20000B  	MOV	#0, W11
;__Lib_MathDouble.c,174 :: 		
0x09E2	0x2FFE61  	MOV	#65510, W1
;__Lib_MathDouble.c,175 :: 		
0x09E4	0xE10001  	CP	W0, W1
;__Lib_MathDouble.c,176 :: 		
0x09E6	0x34001D  	BRA LE	Long2Float_zerosig
;__Lib_MathDouble.c,177 :: 		
Long2Float_subnormal:
;__Lib_MathDouble.c,178 :: 		
0x09E8	0x718182  	IOR	W3, W2, W3
;__Lib_MathDouble.c,179 :: 		
0x09EA	0x640161  	AND	W8, #1, W2
;__Lib_MathDouble.c,180 :: 		
0x09EC	0xD10489  	LSR	W9, W9
;__Lib_MathDouble.c,181 :: 		
0x09EE	0xD38408  	RRC	W8, W8
;__Lib_MathDouble.c,182 :: 		
0x09F0	0xE80000  	INC	W0, W0
;__Lib_MathDouble.c,183 :: 		
0x09F2	0x3AFFFA  	BRA NZ	Long2Float_subnormal
;__Lib_MathDouble.c,184 :: 		
0x09F4	0x200071  	MOV	#7, W1
;__Lib_MathDouble.c,185 :: 		
Long2Float_notsubnormal:
;__Lib_MathDouble.c,186 :: 		
0x09F6	0x640061  	AND	W8, #1, W0
;__Lib_MathDouble.c,187 :: 		
0x09F8	0x700003  	IOR	W0, W3, W0
;__Lib_MathDouble.c,188 :: 		
0x09FA	0x600002  	AND	W0, W2, W0
;__Lib_MathDouble.c,189 :: 		
0x09FC	0x320009  	BRA Z	Long2Float_packupandgo
;__Lib_MathDouble.c,190 :: 		
0x09FE	0x440461  	ADD	W8, #1, W8
;__Lib_MathDouble.c,191 :: 		
0x0A00	0x4C84E0  	ADDC	W9, #0, W9
;__Lib_MathDouble.c,192 :: 		
0x0A02	0xA58809  	BTST.Z	W9, W1
;__Lib_MathDouble.c,193 :: 		
0x0A04	0x320005  	BRA Z	Long2Float_packupandgo
;__Lib_MathDouble.c,194 :: 		
0x0A06	0xE8058B  	INC	W11, W11
;__Lib_MathDouble.c,195 :: 		
0x0A08	0xE10868  	CP	W1, #8
;__Lib_MathDouble.c,196 :: 		
0x0A0A	0x3A0002  	BRA NZ	Long2Float_packupandgo
;__Lib_MathDouble.c,197 :: 		
0x0A0C	0xD10489  	LSR	W9, W9
;__Lib_MathDouble.c,198 :: 		
0x0A0E	0xD38408  	RRC	W8, W8
;__Lib_MathDouble.c,199 :: 		
Long2Float_packupandgo:
;__Lib_MathDouble.c,200 :: 		
0x0A10	0x200FF2  	MOV	#255, W2
;__Lib_MathDouble.c,201 :: 		
0x0A12	0xE15802  	CP	W11, W2
;__Lib_MathDouble.c,202 :: 		
0x0A14	0x3D0005  	BRA GE	Long2Float_overflow
;__Lib_MathDouble.c,203 :: 		
0x0A16	0xDD5DC7  	SL	W11, #7, W11
;__Lib_MathDouble.c,204 :: 		
0x0A18	0xB207F9  	AND	#127, W9
;__Lib_MathDouble.c,205 :: 		
0x0A1A	0x758089  	IOR	W11, W9, W1
;__Lib_MathDouble.c,206 :: 		
0x0A1C	0x880008  	MOV	W8, W0
;__Lib_MathDouble.c,207 :: 		
0x0A1E	0x060000  	RETURN
;__Lib_MathDouble.c,208 :: 		
Long2Float_overflow:
;__Lib_MathDouble.c,209 :: 		
0x0A20	0x27F80B  	MOV	#32640, W11
;__Lib_MathDouble.c,210 :: 		
Long2Float_zerosig:
;__Lib_MathDouble.c,211 :: 		
0x0A22	0x88001B  	MOV	W11, W1
;__Lib_MathDouble.c,212 :: 		
0x0A24	0x050000  	RETLW	#0, W0
;__Lib_MathDouble.c,215 :: 		
the_end__Long2Float:
;__Lib_MathDouble.c,218 :: 		
L_end__Long2Float:
0x0A26	0xFA8000  	ULNK
0x0A28	0x060000  	RETURN
; end of __Long2Float
__Div_FP:
0x048C	0xFA0000  	LNK	#0
;__Lib_MathDouble.c,1050 :: 		
;__Lib_MathDouble.c,1052 :: 		
0x048E	0x070002  	RCALL	DivFP___divsf3
;__Lib_MathDouble.c,1053 :: 		
0x0490	0x0000000405BE  	GOTO	the_end__Div_FP
;__Lib_MathDouble.c,1056 :: 		
DivFP___divsf3:
;__Lib_MathDouble.c,1057 :: 		
0x0494	0xBE9F88  	MOV.D	W8, [W15++]
;__Lib_MathDouble.c,1058 :: 		
0x0496	0xBE9F8A  	MOV.D	W10, [W15++]
;__Lib_MathDouble.c,1059 :: 		
0x0498	0x781F8C  	MOV	W12, [W15++]
;__Lib_MathDouble.c,1060 :: 		
0x049A	0x07003E  	RCALL	DivFP__funpack2
;__Lib_MathDouble.c,1061 :: 		
0x049C	0x330045  	BRA N	DivFP__fPropagateNaN
;__Lib_MathDouble.c,1062 :: 		
0x049E	0x6C8603  	XOR	W9, W3, W12
;__Lib_MathDouble.c,1063 :: 		
0x04A0	0xE15064  	CP	W10, #4
;__Lib_MathDouble.c,1064 :: 		
0x04A2	0x32002E  	BRA Z	DivFP_aisinfinite
;__Lib_MathDouble.c,1065 :: 		
0x04A4	0xE12064  	CP	W4, #4
;__Lib_MathDouble.c,1066 :: 		
0x04A6	0x320033  	BRA Z	DivFP_returnZero
;__Lib_MathDouble.c,1067 :: 		
0x04A8	0xE15061  	CP	W10, #1
;__Lib_MathDouble.c,1068 :: 		
0x04AA	0x32002F  	BRA Z	DivFP_aiszero
;__Lib_MathDouble.c,1069 :: 		
0x04AC	0xE12061  	CP	W4, #1
;__Lib_MathDouble.c,1070 :: 		
0x04AE	0x320031  	BRA Z	DivFP_returnInf
;__Lib_MathDouble.c,1071 :: 		
DivFP_finitenonzero:
;__Lib_MathDouble.c,1072 :: 		
0x04B0	0x558585  	SUB	W11, W5, W11
;__Lib_MathDouble.c,1073 :: 		
0x04B2	0xB007EB  	ADD	#126, W11
;__Lib_MathDouble.c,1074 :: 		
0x04B4	0x200009  	MOV	#0, W9
;__Lib_MathDouble.c,1075 :: 		
0x04B6	0x200408  	MOV	#64, W8
;__Lib_MathDouble.c,1076 :: 		
0x04B8	0x370005  	BRA	DivFP_diventry
;__Lib_MathDouble.c,1077 :: 		
DivFP_divnext:
;__Lib_MathDouble.c,1078 :: 		
0x04BA	0x440408  	ADD	W8, W8, W8
;__Lib_MathDouble.c,1079 :: 		
0x04BC	0x4C8489  	ADDC	W9, W9, W9
;__Lib_MathDouble.c,1080 :: 		
0x04BE	0x31000A  	BRA C	DivFP_divdone
;__Lib_MathDouble.c,1081 :: 		
DivFP_divloop:
;__Lib_MathDouble.c,1082 :: 		
0x04C0	0x430306  	ADD	W6, W6, W6
;__Lib_MathDouble.c,1083 :: 		
0x04C2	0x4B8387  	ADDC	W7, W7, W7
;__Lib_MathDouble.c,1084 :: 		
DivFP_diventry:
;__Lib_MathDouble.c,1085 :: 		
0x04C4	0x530100  	SUB	W6, W0, W2
;__Lib_MathDouble.c,1086 :: 		
0x04C6	0x5B8181  	SUBB	W7, W1, W3
;__Lib_MathDouble.c,1087 :: 		
0x04C8	0x33FFF8  	BRA N	DivFP_divnext
;__Lib_MathDouble.c,1088 :: 		
0x04CA	0xBE8302  	MOV.D	W2, W6
;__Lib_MathDouble.c,1089 :: 		
0x04CC	0xA80010  	BSET	W8, #0
;__Lib_MathDouble.c,1090 :: 		
0x04CE	0x440408  	ADD	W8, W8, W8
;__Lib_MathDouble.c,1091 :: 		
0x04D0	0x4C8489  	ADDC	W9, W9, W9
;__Lib_MathDouble.c,1092 :: 		
0x04D2	0x39FFF6  	BRA NC	DivFP_divloop
;__Lib_MathDouble.c,1093 :: 		
DivFP_divdone:
;__Lib_MathDouble.c,1094 :: 		
0x04D4	0xDD39C6  	SL	W7, #6, W3
;__Lib_MathDouble.c,1095 :: 		
0x04D6	0x730183  	IOR	W6, W3, W3
;__Lib_MathDouble.c,1096 :: 		
0x04D8	0x320001  	BRA Z	DivFP_stickyok
;__Lib_MathDouble.c,1097 :: 		
0x04DA	0x200013  	MOV	#1, W3
;__Lib_MathDouble.c,1098 :: 		
DivFP_stickyok:
;__Lib_MathDouble.c,1099 :: 		
0x04DC	0xD10489  	LSR	W9, W9
;__Lib_MathDouble.c,1100 :: 		
0x04DE	0xD38408  	RRC	W8, W8
;__Lib_MathDouble.c,1101 :: 		
0x04E0	0xA39809  	BTST.Z	W9, #9
;__Lib_MathDouble.c,1102 :: 		
0x04E2	0x320005  	BRA Z	DivFP_guardused
;__Lib_MathDouble.c,1103 :: 		
0x04E4	0xA70008  	BTSC	W8, #0
;__Lib_MathDouble.c,1104 :: 		
0x04E6	0xA80006  	BSET	W3, #0
;__Lib_MathDouble.c,1105 :: 		
0x04E8	0xD10489  	LSR	W9, W9
;__Lib_MathDouble.c,1106 :: 		
0x04EA	0xD38408  	RRC	W8, W8
;__Lib_MathDouble.c,1107 :: 		
0x04EC	0xE8058B  	INC	W11, W11
;__Lib_MathDouble.c,1108 :: 		
DivFP_guardused:
;__Lib_MathDouble.c,1109 :: 		
0x04EE	0xD10489  	LSR	W9, W9
;__Lib_MathDouble.c,1110 :: 		
0x04F0	0xD38408  	RRC	W8, W8
;__Lib_MathDouble.c,1111 :: 		
0x04F2	0xEB0100  	CLR	W2
;__Lib_MathDouble.c,1112 :: 		
0x04F4	0xD28102  	RLC	W2, W2
;__Lib_MathDouble.c,1113 :: 		
0x04F6	0x070028  	RCALL	DivFP__fpack
;__Lib_MathDouble.c,1114 :: 		
DivFP_return0_1:
;__Lib_MathDouble.c,1115 :: 		
0x04F8	0xA1F001  	BCLR	W1, #15
;__Lib_MathDouble.c,1116 :: 		
0x04FA	0xA7F00C  	BTSC	W12, #15
;__Lib_MathDouble.c,1117 :: 		
0x04FC	0xA8E003  	BSET	W1, #15
;__Lib_MathDouble.c,1118 :: 		
0x04FE	0x37001D  	BRA	DivFP__fbopExit
;__Lib_MathDouble.c,1119 :: 		
DivFP_aisinfinite:
;__Lib_MathDouble.c,1120 :: 		
0x0500	0xE12064  	CP	W4, #4
;__Lib_MathDouble.c,1121 :: 		
0x0502	0x32001F  	BRA Z	DivFP__fbopReturnNaN
;__Lib_MathDouble.c,1122 :: 		
DivFP_return8_1:
;__Lib_MathDouble.c,1123 :: 		
0x0504	0xBE8108  	MOV.D	W8, W2
;__Lib_MathDouble.c,1124 :: 		
DivFP_return2_1:
;__Lib_MathDouble.c,1125 :: 		
0x0506	0xBE8002  	MOV.D	W2, W0
;__Lib_MathDouble.c,1126 :: 		
0x0508	0x37FFF7  	BRA	DivFP_return0_1
;__Lib_MathDouble.c,1127 :: 		
DivFP_aiszero:
;__Lib_MathDouble.c,1128 :: 		
0x050A	0xE12061  	CP	W4, #1
;__Lib_MathDouble.c,1129 :: 		
0x050C	0x32001A  	BRA Z	DivFP__fbopReturnNaN
;__Lib_MathDouble.c,1130 :: 		
DivFP_returnZero:
;__Lib_MathDouble.c,1131 :: 		
0x050E	0xB80060  	MUL.UU	W0, #0, W0
;__Lib_MathDouble.c,1132 :: 		
0x0510	0x37FFF3  	BRA	DivFP_return0_1
;__Lib_MathDouble.c,1133 :: 		
DivFP_returnInf:
;__Lib_MathDouble.c,1134 :: 		
0x0512	0x200000  	MOV	#0, W0
;__Lib_MathDouble.c,1135 :: 		
0x0514	0x27F801  	MOV	#32640, W1
;__Lib_MathDouble.c,1136 :: 		
0x0516	0x37FFF0  	BRA	DivFP_return0_1
;__Lib_MathDouble.c,1137 :: 		
DivFP__funpack2:
;__Lib_MathDouble.c,1138 :: 		
0x0518	0xBE8400  	MOV.D	W0, W8
;__Lib_MathDouble.c,1139 :: 		
0x051A	0x07003C  	RCALL	DivFP__funpack
;__Lib_MathDouble.c,1140 :: 		
0x051C	0xBE8300  	MOV.D	W0, W6
;__Lib_MathDouble.c,1141 :: 		
0x051E	0xBE8504  	MOV.D	W4, W10
;__Lib_MathDouble.c,1142 :: 		
0x0520	0xBE8002  	MOV.D	W2, W0
;__Lib_MathDouble.c,1143 :: 		
0x0522	0x070038  	RCALL	DivFP__funpack
;__Lib_MathDouble.c,1144 :: 		
0x0524	0x754F84  	IOR.B	W10, W4, [W15]
;__Lib_MathDouble.c,1145 :: 		
0x0526	0x060000  	RETURN
;__Lib_MathDouble.c,1146 :: 		
DivFP__fPropagateNaN:
;__Lib_MathDouble.c,1147 :: 		
0x0528	0xBE8002  	MOV.D	W2, W0
;__Lib_MathDouble.c,1148 :: 		
0x052A	0xE15064  	CP	W10, #4
;__Lib_MathDouble.c,1149 :: 		
0x052C	0x360005  	BRA LEU	DivFP_return0
;__Lib_MathDouble.c,1150 :: 		
0x052E	0xE12064  	CP	W4, #4
;__Lib_MathDouble.c,1151 :: 		
0x0530	0x360002  	BRA LEU	DivFP_return8
;__Lib_MathDouble.c,1152 :: 		
0x0532	0xA36809  	BTST.Z	W9, #6
;__Lib_MathDouble.c,1153 :: 		
0x0534	0x3A0001  	BRA NZ	DivFP_return0
;__Lib_MathDouble.c,1154 :: 		
DivFP_return8:
;__Lib_MathDouble.c,1155 :: 		
0x0536	0xBE8008  	MOV.D	W8, W0
;__Lib_MathDouble.c,1156 :: 		
DivFP_return0:
;__Lib_MathDouble.c,1157 :: 		
0x0538	0xA8C002  	BSET	W1, #6
;__Lib_MathDouble.c,1158 :: 		
DivFP__fbopExit:
;__Lib_MathDouble.c,1159 :: 		
0x053A	0x78064F  	MOV	[--W15], W12
;__Lib_MathDouble.c,1160 :: 		
0x053C	0xBE054F  	MOV.D	[--W15], W10
;__Lib_MathDouble.c,1161 :: 		
0x053E	0xBE044F  	MOV.D	[--W15], W8
;__Lib_MathDouble.c,1162 :: 		
0x0540	0x060000  	RETURN
;__Lib_MathDouble.c,1163 :: 		
DivFP__fbopReturnNaN:
;__Lib_MathDouble.c,1164 :: 		
0x0542	0x2FFFF0  	MOV	#65535, W0
;__Lib_MathDouble.c,1165 :: 		
0x0544	0x27FFF1  	MOV	#32767, W1
;__Lib_MathDouble.c,1166 :: 		
0x0546	0x37FFF9  	BRA	DivFP__fbopExit
;__Lib_MathDouble.c,1167 :: 		
DivFP__fpack:
;__Lib_MathDouble.c,1168 :: 		
0x0548	0x200081  	MOV	#8, W1
;__Lib_MathDouble.c,1169 :: 		
0x054A	0x558061  	SUB	W11, #1, W0
;__Lib_MathDouble.c,1170 :: 		
0x054C	0x3D000B  	BRA GE	DivFP_notsubnormal
;__Lib_MathDouble.c,1171 :: 		
0x054E	0x20000B  	MOV	#0, W11
;__Lib_MathDouble.c,1172 :: 		
0x0550	0x2FFE61  	MOV	#65510, W1
;__Lib_MathDouble.c,1173 :: 		
0x0552	0xE10001  	CP	W0, W1
;__Lib_MathDouble.c,1174 :: 		
0x0554	0x34001D  	BRA LE	DivFP_zerosig
;__Lib_MathDouble.c,1175 :: 		
DivFP_subnormal:
;__Lib_MathDouble.c,1176 :: 		
0x0556	0x718182  	IOR	W3, W2, W3
;__Lib_MathDouble.c,1177 :: 		
0x0558	0x640161  	AND	W8, #1, W2
;__Lib_MathDouble.c,1178 :: 		
0x055A	0xD10489  	LSR	W9, W9
;__Lib_MathDouble.c,1179 :: 		
0x055C	0xD38408  	RRC	W8, W8
;__Lib_MathDouble.c,1180 :: 		
0x055E	0xE80000  	INC	W0, W0
;__Lib_MathDouble.c,1181 :: 		
0x0560	0x3AFFFA  	BRA NZ	DivFP_subnormal
;__Lib_MathDouble.c,1182 :: 		
0x0562	0x200071  	MOV	#7, W1
;__Lib_MathDouble.c,1183 :: 		
DivFP_notsubnormal:
;__Lib_MathDouble.c,1184 :: 		
0x0564	0x640061  	AND	W8, #1, W0
;__Lib_MathDouble.c,1185 :: 		
0x0566	0x700003  	IOR	W0, W3, W0
;__Lib_MathDouble.c,1186 :: 		
0x0568	0x600002  	AND	W0, W2, W0
;__Lib_MathDouble.c,1187 :: 		
0x056A	0x320009  	BRA Z	DivFP_packupandgo
;__Lib_MathDouble.c,1188 :: 		
0x056C	0x440461  	ADD	W8, #1, W8
;__Lib_MathDouble.c,1189 :: 		
0x056E	0x4C84E0  	ADDC	W9, #0, W9
;__Lib_MathDouble.c,1190 :: 		
0x0570	0xA58809  	BTST.Z	W9, W1
;__Lib_MathDouble.c,1191 :: 		
0x0572	0x320005  	BRA Z	DivFP_packupandgo
;__Lib_MathDouble.c,1192 :: 		
0x0574	0xE8058B  	INC	W11, W11
;__Lib_MathDouble.c,1193 :: 		
0x0576	0xE10868  	CP	W1, #8
;__Lib_MathDouble.c,1194 :: 		
0x0578	0x3A0002  	BRA NZ	DivFP_packupandgo
;__Lib_MathDouble.c,1195 :: 		
0x057A	0xD10489  	LSR	W9, W9
;__Lib_MathDouble.c,1196 :: 		
0x057C	0xD38408  	RRC	W8, W8
;__Lib_MathDouble.c,1197 :: 		
DivFP_packupandgo:
;__Lib_MathDouble.c,1198 :: 		
0x057E	0x200FF2  	MOV	#255, W2
;__Lib_MathDouble.c,1199 :: 		
0x0580	0xE15802  	CP	W11, W2
;__Lib_MathDouble.c,1200 :: 		
0x0582	0x3D0005  	BRA GE	DivFP_overfloW
;__Lib_MathDouble.c,1201 :: 		
0x0584	0xDD5DC7  	SL	W11, #7, W11
;__Lib_MathDouble.c,1202 :: 		
0x0586	0xB207F9  	AND	#127, W9
;__Lib_MathDouble.c,1203 :: 		
0x0588	0x758089  	IOR	W11, W9, W1
;__Lib_MathDouble.c,1204 :: 		
0x058A	0x880008  	MOV	W8, W0
;__Lib_MathDouble.c,1205 :: 		
0x058C	0x060000  	RETURN
;__Lib_MathDouble.c,1206 :: 		
DivFP_overfloW:
;__Lib_MathDouble.c,1207 :: 		
0x058E	0x27F80B  	MOV	#32640, W11
;__Lib_MathDouble.c,1208 :: 		
DivFP_zerosig:
;__Lib_MathDouble.c,1209 :: 		
0x0590	0x88001B  	MOV	W11, W1
;__Lib_MathDouble.c,1210 :: 		
0x0592	0x050000  	RETLW	#0, W0
;__Lib_MathDouble.c,1211 :: 		
DivFP__funpack:
;__Lib_MathDouble.c,1212 :: 		
0x0594	0xDE0AC7  	LSR	W1, #7, W5
;__Lib_MathDouble.c,1213 :: 		
0x0596	0xB207F1  	AND	#127, W1
;__Lib_MathDouble.c,1214 :: 		
0x0598	0xB20FF5  	AND	#255, W5
;__Lib_MathDouble.c,1215 :: 		
0x059A	0x320008  	BRA Z	DivFP_zeroorsub
;__Lib_MathDouble.c,1216 :: 		
0x059C	0x42CFE1  	ADD.B	W5, #1, [W15]
;__Lib_MathDouble.c,1217 :: 		
0x059E	0x320002  	BRA Z	DivFP_nanorinf
;__Lib_MathDouble.c,1218 :: 		
DivFP_finitereturn:
;__Lib_MathDouble.c,1219 :: 		
0x05A0	0xA8E002  	BSET	W1, #7
;__Lib_MathDouble.c,1220 :: 		
0x05A2	0x050024  	RETLW	#2, W4
;__Lib_MathDouble.c,1221 :: 		
DivFP_nanorinf:
;__Lib_MathDouble.c,1222 :: 		
0x05A4	0x700F81  	IOR	W0, W1, [W15]
;__Lib_MathDouble.c,1223 :: 		
0x05A6	0x320001  	BRA Z	DivFP_infinite
;__Lib_MathDouble.c,1224 :: 		
0x05A8	0x050804  	RETLW	#128, W4
;__Lib_MathDouble.c,1225 :: 		
DivFP_infinite:
;__Lib_MathDouble.c,1226 :: 		
0x05AA	0x050044  	RETLW	#4, W4
;__Lib_MathDouble.c,1227 :: 		
DivFP_zeroorsub:
;__Lib_MathDouble.c,1228 :: 		
0x05AC	0x700F81  	IOR	W0, W1, [W15]
;__Lib_MathDouble.c,1229 :: 		
0x05AE	0x3A0002  	BRA NZ	DivFP_subnormal2
;__Lib_MathDouble.c,1230 :: 		
0x05B0	0x050014  	RETLW	#1, W4
;__Lib_MathDouble.c,1231 :: 		
DivFP_normalize:
;__Lib_MathDouble.c,1232 :: 		
0x05B2	0xE90285  	DEC	W5, W5
;__Lib_MathDouble.c,1233 :: 		
DivFP_subnormal2:
;__Lib_MathDouble.c,1234 :: 		
0x05B4	0x400000  	ADD	W0, W0, W0
;__Lib_MathDouble.c,1235 :: 		
0x05B6	0x48C081  	ADDC.B	W1, W1, W1
;__Lib_MathDouble.c,1236 :: 		
0x05B8	0x3BFFFC  	BRA NN	DivFP_normalize
;__Lib_MathDouble.c,1237 :: 		
0x05BA	0xA8E002  	BSET	W1, #7
;__Lib_MathDouble.c,1238 :: 		
0x05BC	0x050024  	RETLW	#2, W4
;__Lib_MathDouble.c,1241 :: 		
the_end__Div_FP:
;__Lib_MathDouble.c,1243 :: 		
L_end__Div_FP:
0x05BE	0xFA8000  	ULNK
0x05C0	0x060000  	RETURN
; end of __Div_FP
_MCP_4922:
;VOLTAGE_IO.c,62 :: 		void MCP_4922(int valueDAC, unsigned char kanal)
;VOLTAGE_IO.c,64 :: 		unsigned char temp=0;
0x0E1A	0x781F8A  	PUSH	W10
;VOLTAGE_IO.c,66 :: 		DAC_SEC22(kanal);
0x0E1C	0x781F8A  	PUSH	W10
0x0E1E	0x78450B  	MOV.B	W11, W10
0x0E20	0x07FBD4  	RCALL	_DAC_SEC22
0x0E22	0x78054F  	POP	W10
;VOLTAGE_IO.c,67 :: 		slot_CS();
0x0E24	0xBE9F8A  	PUSH.D	W10
0x0E26	0x07FEF1  	RCALL	_slot_CS
0x0E28	0xBE054F  	POP.D	W10
;VOLTAGE_IO.c,68 :: 		temp = (valueDAC>>8)&0x0F;                                                 //8 bitlik için
0x0E2A	0xDED048  	ASR	W10, #8, W0
; temp start address is: 6 (W3)
0x0E2C	0x6041EF  	AND.B	W0, #15, W3
;VOLTAGE_IO.c,71 :: 		if(kanal%2==0)temp |= 0xB0;
0x0E2E	0xFB800B  	ZE	W11, W0
0x0E30	0x200022  	MOV	#2, W2
0x0E32	0x090011  	REPEAT	#17
0x0E34	0xD80002  	DIV.S	W0, W2
0x0E36	0x780001  	MOV	W1, W0
0x0E38	0xE10060  	CP	W0, #0
0x0E3A	0x3A0003  	BRA NZ	L_MCP_492235
L__MCP_4922110:
0x0E3C	0xB3CB00  	MOV.B	#176, W0
; temp start address is: 0 (W0)
0x0E3E	0x71C000  	IOR.B	W3, W0, W0
; temp end address is: 6 (W3)
; temp end address is: 0 (W0)
0x0E40	0x370002  	BRA	L_MCP_492236
L_MCP_492235:
;VOLTAGE_IO.c,72 :: 		else temp |= 0x30;
; temp start address is: 6 (W3)
0x0E42	0xB3C300  	MOV.B	#48, W0
; temp start address is: 0 (W0)
0x0E44	0x71C000  	IOR.B	W3, W0, W0
; temp end address is: 6 (W3)
; temp end address is: 0 (W0)
L_MCP_492236:
;VOLTAGE_IO.c,74 :: 		SPI1_Write(temp);
; temp start address is: 0 (W0)
0x0E46	0x781F8A  	PUSH	W10
; temp end address is: 0 (W0)
0x0E48	0xFB8500  	ZE	W0, W10
0x0E4A	0x07FBBB  	RCALL	_SPI1_Write
0x0E4C	0x78054F  	POP	W10
;VOLTAGE_IO.c,76 :: 		SPI1_Write(temp);
0x0E4E	0xFB850A  	ZE	W10, W10
0x0E50	0x07FBB8  	RCALL	_SPI1_Write
;VOLTAGE_IO.c,78 :: 		DAC_SEC22(0);
0x0E52	0xEF2014  	CLR	W10
0x0E54	0x07FBBA  	RCALL	_DAC_SEC22
;VOLTAGE_IO.c,79 :: 		slot_CS();
0x0E56	0x07FED9  	RCALL	_slot_CS
;VOLTAGE_IO.c,80 :: 		}
L_end_MCP_4922:
0x0E58	0x78054F  	POP	W10
0x0E5A	0x060000  	RETURN
; end of _MCP_4922
_DAC_SEC22:
;VOLTAGE_IO.c,33 :: 		void DAC_SEC22(unsigned char kanal)
;VOLTAGE_IO.c,35 :: 		if(kanal==1){CS_DAC1=0;CS_DAC2=1;CS_DAC3=1;CS_DAC4=1;CS_DAC5=1;CS_DAC6=1;CS_DAC7=1;CS_DAC8=1;}
0x05CA	0xE15461  	CP.B	W10, #1
0x05CC	0x3A0011  	BRA NZ	L_DAC_SEC220
L__DAC_SEC2290:
0x05CE	0x2081E0  	MOV	#lo_addr(_CS_DAC1), W0
0x05D0	0xA1C010  	BCLR	[W0], BitPos(_CS_DAC1+0)
0x05D2	0x2081E0  	MOV	#lo_addr(_CS_DAC2), W0
0x05D4	0xA0D010  	BSET	[W0], BitPos(_CS_DAC2+0)
0x05D6	0x2081E0  	MOV	#lo_addr(_CS_DAC3), W0
0x05D8	0xA0B010  	BSET	[W0], BitPos(_CS_DAC3+0)
0x05DA	0x2081E0  	MOV	#lo_addr(_CS_DAC4), W0
0x05DC	0xA08010  	BSET	[W0], BitPos(_CS_DAC4+0)
0x05DE	0x2081E0  	MOV	#lo_addr(_CS_DAC5), W0
0x05E0	0xA09010  	BSET	[W0], BitPos(_CS_DAC5+0)
0x05E2	0x2081E0  	MOV	#lo_addr(_CS_DAC6), W0
0x05E4	0xA0A010  	BSET	[W0], BitPos(_CS_DAC6+0)
0x05E6	0x2081E0  	MOV	#lo_addr(_CS_DAC7), W0
0x05E8	0xA0E010  	BSET	[W0], BitPos(_CS_DAC7+0)
0x05EA	0x2081E0  	MOV	#lo_addr(_CS_DAC8), W0
0x05EC	0xA0F010  	BSET	[W0], BitPos(_CS_DAC8+0)
0x05EE	0x37012F  	BRA	L_DAC_SEC221
L_DAC_SEC220:
;VOLTAGE_IO.c,36 :: 		else if(kanal==2){CS_DAC1=0;CS_DAC2=1;CS_DAC3=1;CS_DAC4=1;CS_DAC5=1;CS_DAC6=1;CS_DAC7=1;CS_DAC8=1;}
0x05F0	0xE15462  	CP.B	W10, #2
0x05F2	0x3A0011  	BRA NZ	L_DAC_SEC222
L__DAC_SEC2291:
0x05F4	0x2081E0  	MOV	#lo_addr(_CS_DAC1), W0
0x05F6	0xA1C010  	BCLR	[W0], BitPos(_CS_DAC1+0)
0x05F8	0x2081E0  	MOV	#lo_addr(_CS_DAC2), W0
0x05FA	0xA0D010  	BSET	[W0], BitPos(_CS_DAC2+0)
0x05FC	0x2081E0  	MOV	#lo_addr(_CS_DAC3), W0
0x05FE	0xA0B010  	BSET	[W0], BitPos(_CS_DAC3+0)
0x0600	0x2081E0  	MOV	#lo_addr(_CS_DAC4), W0
0x0602	0xA08010  	BSET	[W0], BitPos(_CS_DAC4+0)
0x0604	0x2081E0  	MOV	#lo_addr(_CS_DAC5), W0
0x0606	0xA09010  	BSET	[W0], BitPos(_CS_DAC5+0)
0x0608	0x2081E0  	MOV	#lo_addr(_CS_DAC6), W0
0x060A	0xA0A010  	BSET	[W0], BitPos(_CS_DAC6+0)
0x060C	0x2081E0  	MOV	#lo_addr(_CS_DAC7), W0
0x060E	0xA0E010  	BSET	[W0], BitPos(_CS_DAC7+0)
0x0610	0x2081E0  	MOV	#lo_addr(_CS_DAC8), W0
0x0612	0xA0F010  	BSET	[W0], BitPos(_CS_DAC8+0)
0x0614	0x37011C  	BRA	L_DAC_SEC223
L_DAC_SEC222:
;VOLTAGE_IO.c,37 :: 		else if(kanal==3){CS_DAC1=1;CS_DAC2=0;CS_DAC3=1;CS_DAC4=1;CS_DAC5=1;CS_DAC6=1;CS_DAC7=1;CS_DAC8=1;}
0x0616	0xE15463  	CP.B	W10, #3
0x0618	0x3A0011  	BRA NZ	L_DAC_SEC224
L__DAC_SEC2292:
0x061A	0x2081E0  	MOV	#lo_addr(_CS_DAC1), W0
0x061C	0xA0C010  	BSET	[W0], BitPos(_CS_DAC1+0)
0x061E	0x2081E0  	MOV	#lo_addr(_CS_DAC2), W0
0x0620	0xA1D010  	BCLR	[W0], BitPos(_CS_DAC2+0)
0x0622	0x2081E0  	MOV	#lo_addr(_CS_DAC3), W0
0x0624	0xA0B010  	BSET	[W0], BitPos(_CS_DAC3+0)
0x0626	0x2081E0  	MOV	#lo_addr(_CS_DAC4), W0
0x0628	0xA08010  	BSET	[W0], BitPos(_CS_DAC4+0)
0x062A	0x2081E0  	MOV	#lo_addr(_CS_DAC5), W0
0x062C	0xA09010  	BSET	[W0], BitPos(_CS_DAC5+0)
0x062E	0x2081E0  	MOV	#lo_addr(_CS_DAC6), W0
0x0630	0xA0A010  	BSET	[W0], BitPos(_CS_DAC6+0)
0x0632	0x2081E0  	MOV	#lo_addr(_CS_DAC7), W0
0x0634	0xA0E010  	BSET	[W0], BitPos(_CS_DAC7+0)
0x0636	0x2081E0  	MOV	#lo_addr(_CS_DAC8), W0
0x0638	0xA0F010  	BSET	[W0], BitPos(_CS_DAC8+0)
0x063A	0x370109  	BRA	L_DAC_SEC225
L_DAC_SEC224:
;VOLTAGE_IO.c,38 :: 		else if(kanal==4){CS_DAC1=1;CS_DAC2=0;CS_DAC3=1;CS_DAC4=1;CS_DAC5=1;CS_DAC6=1;CS_DAC7=1;CS_DAC8=1;}
0x063C	0xE15464  	CP.B	W10, #4
0x063E	0x3A0011  	BRA NZ	L_DAC_SEC226
L__DAC_SEC2293:
0x0640	0x2081E0  	MOV	#lo_addr(_CS_DAC1), W0
0x0642	0xA0C010  	BSET	[W0], BitPos(_CS_DAC1+0)
0x0644	0x2081E0  	MOV	#lo_addr(_CS_DAC2), W0
0x0646	0xA1D010  	BCLR	[W0], BitPos(_CS_DAC2+0)
0x0648	0x2081E0  	MOV	#lo_addr(_CS_DAC3), W0
0x064A	0xA0B010  	BSET	[W0], BitPos(_CS_DAC3+0)
0x064C	0x2081E0  	MOV	#lo_addr(_CS_DAC4), W0
0x064E	0xA08010  	BSET	[W0], BitPos(_CS_DAC4+0)
0x0650	0x2081E0  	MOV	#lo_addr(_CS_DAC5), W0
0x0652	0xA09010  	BSET	[W0], BitPos(_CS_DAC5+0)
0x0654	0x2081E0  	MOV	#lo_addr(_CS_DAC6), W0
0x0656	0xA0A010  	BSET	[W0], BitPos(_CS_DAC6+0)
0x0658	0x2081E0  	MOV	#lo_addr(_CS_DAC7), W0
0x065A	0xA0E010  	BSET	[W0], BitPos(_CS_DAC7+0)
0x065C	0x2081E0  	MOV	#lo_addr(_CS_DAC8), W0
0x065E	0xA0F010  	BSET	[W0], BitPos(_CS_DAC8+0)
0x0660	0x3700F6  	BRA	L_DAC_SEC227
L_DAC_SEC226:
;VOLTAGE_IO.c,39 :: 		else if(kanal==5){CS_DAC1=1;CS_DAC2=1;CS_DAC3=0;CS_DAC4=1;CS_DAC5=1;CS_DAC6=1;CS_DAC7=1;CS_DAC8=1;}
0x0662	0xE15465  	CP.B	W10, #5
0x0664	0x3A0011  	BRA NZ	L_DAC_SEC228
L__DAC_SEC2294:
0x0666	0x2081E0  	MOV	#lo_addr(_CS_DAC1), W0
0x0668	0xA0C010  	BSET	[W0], BitPos(_CS_DAC1+0)
0x066A	0x2081E0  	MOV	#lo_addr(_CS_DAC2), W0
0x066C	0xA0D010  	BSET	[W0], BitPos(_CS_DAC2+0)
0x066E	0x2081E0  	MOV	#lo_addr(_CS_DAC3), W0
0x0670	0xA1B010  	BCLR	[W0], BitPos(_CS_DAC3+0)
0x0672	0x2081E0  	MOV	#lo_addr(_CS_DAC4), W0
0x0674	0xA08010  	BSET	[W0], BitPos(_CS_DAC4+0)
0x0676	0x2081E0  	MOV	#lo_addr(_CS_DAC5), W0
0x0678	0xA09010  	BSET	[W0], BitPos(_CS_DAC5+0)
0x067A	0x2081E0  	MOV	#lo_addr(_CS_DAC6), W0
0x067C	0xA0A010  	BSET	[W0], BitPos(_CS_DAC6+0)
0x067E	0x2081E0  	MOV	#lo_addr(_CS_DAC7), W0
0x0680	0xA0E010  	BSET	[W0], BitPos(_CS_DAC7+0)
0x0682	0x2081E0  	MOV	#lo_addr(_CS_DAC8), W0
0x0684	0xA0F010  	BSET	[W0], BitPos(_CS_DAC8+0)
0x0686	0x3700E3  	BRA	L_DAC_SEC229
L_DAC_SEC228:
;VOLTAGE_IO.c,40 :: 		else if(kanal==6){CS_DAC1=1;CS_DAC2=1;CS_DAC3=0;CS_DAC4=1;CS_DAC5=1;CS_DAC6=1;CS_DAC7=1;CS_DAC8=1;}
0x0688	0xE15466  	CP.B	W10, #6
0x068A	0x3A0011  	BRA NZ	L_DAC_SEC2210
L__DAC_SEC2295:
0x068C	0x2081E0  	MOV	#lo_addr(_CS_DAC1), W0
0x068E	0xA0C010  	BSET	[W0], BitPos(_CS_DAC1+0)
0x0690	0x2081E0  	MOV	#lo_addr(_CS_DAC2), W0
0x0692	0xA0D010  	BSET	[W0], BitPos(_CS_DAC2+0)
0x0694	0x2081E0  	MOV	#lo_addr(_CS_DAC3), W0
0x0696	0xA1B010  	BCLR	[W0], BitPos(_CS_DAC3+0)
0x0698	0x2081E0  	MOV	#lo_addr(_CS_DAC4), W0
0x069A	0xA08010  	BSET	[W0], BitPos(_CS_DAC4+0)
0x069C	0x2081E0  	MOV	#lo_addr(_CS_DAC5), W0
0x069E	0xA09010  	BSET	[W0], BitPos(_CS_DAC5+0)
0x06A0	0x2081E0  	MOV	#lo_addr(_CS_DAC6), W0
0x06A2	0xA0A010  	BSET	[W0], BitPos(_CS_DAC6+0)
0x06A4	0x2081E0  	MOV	#lo_addr(_CS_DAC7), W0
0x06A6	0xA0E010  	BSET	[W0], BitPos(_CS_DAC7+0)
0x06A8	0x2081E0  	MOV	#lo_addr(_CS_DAC8), W0
0x06AA	0xA0F010  	BSET	[W0], BitPos(_CS_DAC8+0)
0x06AC	0x3700D0  	BRA	L_DAC_SEC2211
L_DAC_SEC2210:
;VOLTAGE_IO.c,41 :: 		else if(kanal==7){CS_DAC1=1;CS_DAC2=1;CS_DAC3=1;CS_DAC4=0;CS_DAC5=1;CS_DAC6=1;CS_DAC7=1;CS_DAC8=1;}
0x06AE	0xE15467  	CP.B	W10, #7
0x06B0	0x3A0011  	BRA NZ	L_DAC_SEC2212
L__DAC_SEC2296:
0x06B2	0x2081E0  	MOV	#lo_addr(_CS_DAC1), W0
0x06B4	0xA0C010  	BSET	[W0], BitPos(_CS_DAC1+0)
0x06B6	0x2081E0  	MOV	#lo_addr(_CS_DAC2), W0
0x06B8	0xA0D010  	BSET	[W0], BitPos(_CS_DAC2+0)
0x06BA	0x2081E0  	MOV	#lo_addr(_CS_DAC3), W0
0x06BC	0xA0B010  	BSET	[W0], BitPos(_CS_DAC3+0)
0x06BE	0x2081E0  	MOV	#lo_addr(_CS_DAC4), W0
0x06C0	0xA18010  	BCLR	[W0], BitPos(_CS_DAC4+0)
0x06C2	0x2081E0  	MOV	#lo_addr(_CS_DAC5), W0
0x06C4	0xA09010  	BSET	[W0], BitPos(_CS_DAC5+0)
0x06C6	0x2081E0  	MOV	#lo_addr(_CS_DAC6), W0
0x06C8	0xA0A010  	BSET	[W0], BitPos(_CS_DAC6+0)
0x06CA	0x2081E0  	MOV	#lo_addr(_CS_DAC7), W0
0x06CC	0xA0E010  	BSET	[W0], BitPos(_CS_DAC7+0)
0x06CE	0x2081E0  	MOV	#lo_addr(_CS_DAC8), W0
0x06D0	0xA0F010  	BSET	[W0], BitPos(_CS_DAC8+0)
0x06D2	0x3700BD  	BRA	L_DAC_SEC2213
L_DAC_SEC2212:
;VOLTAGE_IO.c,42 :: 		else if(kanal==8){CS_DAC1=1;CS_DAC2=1;CS_DAC3=1;CS_DAC4=0;CS_DAC5=1;CS_DAC6=1;CS_DAC7=1;CS_DAC8=1;}
0x06D4	0xE15468  	CP.B	W10, #8
0x06D6	0x3A0011  	BRA NZ	L_DAC_SEC2214
L__DAC_SEC2297:
0x06D8	0x2081E0  	MOV	#lo_addr(_CS_DAC1), W0
0x06DA	0xA0C010  	BSET	[W0], BitPos(_CS_DAC1+0)
0x06DC	0x2081E0  	MOV	#lo_addr(_CS_DAC2), W0
0x06DE	0xA0D010  	BSET	[W0], BitPos(_CS_DAC2+0)
0x06E0	0x2081E0  	MOV	#lo_addr(_CS_DAC3), W0
0x06E2	0xA0B010  	BSET	[W0], BitPos(_CS_DAC3+0)
0x06E4	0x2081E0  	MOV	#lo_addr(_CS_DAC4), W0
0x06E6	0xA18010  	BCLR	[W0], BitPos(_CS_DAC4+0)
0x06E8	0x2081E0  	MOV	#lo_addr(_CS_DAC5), W0
0x06EA	0xA09010  	BSET	[W0], BitPos(_CS_DAC5+0)
0x06EC	0x2081E0  	MOV	#lo_addr(_CS_DAC6), W0
0x06EE	0xA0A010  	BSET	[W0], BitPos(_CS_DAC6+0)
0x06F0	0x2081E0  	MOV	#lo_addr(_CS_DAC7), W0
0x06F2	0xA0E010  	BSET	[W0], BitPos(_CS_DAC7+0)
0x06F4	0x2081E0  	MOV	#lo_addr(_CS_DAC8), W0
0x06F6	0xA0F010  	BSET	[W0], BitPos(_CS_DAC8+0)
0x06F8	0x3700AA  	BRA	L_DAC_SEC2215
L_DAC_SEC2214:
;VOLTAGE_IO.c,43 :: 		else if(kanal==9){CS_DAC1=1;CS_DAC2=1;CS_DAC3=1;CS_DAC4=1;CS_DAC5=0;CS_DAC6=1;CS_DAC7=1;CS_DAC8=1;}
0x06FA	0xE15469  	CP.B	W10, #9
0x06FC	0x3A0011  	BRA NZ	L_DAC_SEC2216
L__DAC_SEC2298:
0x06FE	0x2081E0  	MOV	#lo_addr(_CS_DAC1), W0
0x0700	0xA0C010  	BSET	[W0], BitPos(_CS_DAC1+0)
0x0702	0x2081E0  	MOV	#lo_addr(_CS_DAC2), W0
0x0704	0xA0D010  	BSET	[W0], BitPos(_CS_DAC2+0)
0x0706	0x2081E0  	MOV	#lo_addr(_CS_DAC3), W0
0x0708	0xA0B010  	BSET	[W0], BitPos(_CS_DAC3+0)
0x070A	0x2081E0  	MOV	#lo_addr(_CS_DAC4), W0
0x070C	0xA08010  	BSET	[W0], BitPos(_CS_DAC4+0)
0x070E	0x2081E0  	MOV	#lo_addr(_CS_DAC5), W0
0x0710	0xA19010  	BCLR	[W0], BitPos(_CS_DAC5+0)
0x0712	0x2081E0  	MOV	#lo_addr(_CS_DAC6), W0
0x0714	0xA0A010  	BSET	[W0], BitPos(_CS_DAC6+0)
0x0716	0x2081E0  	MOV	#lo_addr(_CS_DAC7), W0
0x0718	0xA0E010  	BSET	[W0], BitPos(_CS_DAC7+0)
0x071A	0x2081E0  	MOV	#lo_addr(_CS_DAC8), W0
0x071C	0xA0F010  	BSET	[W0], BitPos(_CS_DAC8+0)
0x071E	0x370097  	BRA	L_DAC_SEC2217
L_DAC_SEC2216:
;VOLTAGE_IO.c,44 :: 		else if(kanal==10){CS_DAC1=1;CS_DAC2=1;CS_DAC3=1;CS_DAC4=1;CS_DAC5=0;CS_DAC6=1;CS_DAC7=1;CS_DAC8=1;}
0x0720	0xE1546A  	CP.B	W10, #10
0x0722	0x3A0011  	BRA NZ	L_DAC_SEC2218
L__DAC_SEC2299:
0x0724	0x2081E0  	MOV	#lo_addr(_CS_DAC1), W0
0x0726	0xA0C010  	BSET	[W0], BitPos(_CS_DAC1+0)
0x0728	0x2081E0  	MOV	#lo_addr(_CS_DAC2), W0
0x072A	0xA0D010  	BSET	[W0], BitPos(_CS_DAC2+0)
0x072C	0x2081E0  	MOV	#lo_addr(_CS_DAC3), W0
0x072E	0xA0B010  	BSET	[W0], BitPos(_CS_DAC3+0)
0x0730	0x2081E0  	MOV	#lo_addr(_CS_DAC4), W0
0x0732	0xA08010  	BSET	[W0], BitPos(_CS_DAC4+0)
0x0734	0x2081E0  	MOV	#lo_addr(_CS_DAC5), W0
0x0736	0xA19010  	BCLR	[W0], BitPos(_CS_DAC5+0)
0x0738	0x2081E0  	MOV	#lo_addr(_CS_DAC6), W0
0x073A	0xA0A010  	BSET	[W0], BitPos(_CS_DAC6+0)
0x073C	0x2081E0  	MOV	#lo_addr(_CS_DAC7), W0
0x073E	0xA0E010  	BSET	[W0], BitPos(_CS_DAC7+0)
0x0740	0x2081E0  	MOV	#lo_addr(_CS_DAC8), W0
0x0742	0xA0F010  	BSET	[W0], BitPos(_CS_DAC8+0)
0x0744	0x370084  	BRA	L_DAC_SEC2219
L_DAC_SEC2218:
;VOLTAGE_IO.c,45 :: 		else if(kanal==11){CS_DAC1=1;CS_DAC2=1;CS_DAC3=1;CS_DAC4=1;CS_DAC5=1;CS_DAC6=0;CS_DAC7=1;CS_DAC8=1;}
0x0746	0xE1546B  	CP.B	W10, #11
0x0748	0x3A0011  	BRA NZ	L_DAC_SEC2220
L__DAC_SEC22100:
0x074A	0x2081E0  	MOV	#lo_addr(_CS_DAC1), W0
0x074C	0xA0C010  	BSET	[W0], BitPos(_CS_DAC1+0)
0x074E	0x2081E0  	MOV	#lo_addr(_CS_DAC2), W0
0x0750	0xA0D010  	BSET	[W0], BitPos(_CS_DAC2+0)
0x0752	0x2081E0  	MOV	#lo_addr(_CS_DAC3), W0
0x0754	0xA0B010  	BSET	[W0], BitPos(_CS_DAC3+0)
0x0756	0x2081E0  	MOV	#lo_addr(_CS_DAC4), W0
0x0758	0xA08010  	BSET	[W0], BitPos(_CS_DAC4+0)
0x075A	0x2081E0  	MOV	#lo_addr(_CS_DAC5), W0
0x075C	0xA09010  	BSET	[W0], BitPos(_CS_DAC5+0)
0x075E	0x2081E0  	MOV	#lo_addr(_CS_DAC6), W0
0x0760	0xA1A010  	BCLR	[W0], BitPos(_CS_DAC6+0)
0x0762	0x2081E0  	MOV	#lo_addr(_CS_DAC7), W0
0x0764	0xA0E010  	BSET	[W0], BitPos(_CS_DAC7+0)
0x0766	0x2081E0  	MOV	#lo_addr(_CS_DAC8), W0
0x0768	0xA0F010  	BSET	[W0], BitPos(_CS_DAC8+0)
0x076A	0x370071  	BRA	L_DAC_SEC2221
L_DAC_SEC2220:
;VOLTAGE_IO.c,46 :: 		else if(kanal==12){CS_DAC1=1;CS_DAC2=1;CS_DAC3=1;CS_DAC4=1;CS_DAC5=1;CS_DAC6=0;CS_DAC7=1;CS_DAC8=1;}
0x076C	0xE1546C  	CP.B	W10, #12
0x076E	0x3A0011  	BRA NZ	L_DAC_SEC2222
L__DAC_SEC22101:
0x0770	0x2081E0  	MOV	#lo_addr(_CS_DAC1), W0
0x0772	0xA0C010  	BSET	[W0], BitPos(_CS_DAC1+0)
0x0774	0x2081E0  	MOV	#lo_addr(_CS_DAC2), W0
0x0776	0xA0D010  	BSET	[W0], BitPos(_CS_DAC2+0)
0x0778	0x2081E0  	MOV	#lo_addr(_CS_DAC3), W0
0x077A	0xA0B010  	BSET	[W0], BitPos(_CS_DAC3+0)
0x077C	0x2081E0  	MOV	#lo_addr(_CS_DAC4), W0
0x077E	0xA08010  	BSET	[W0], BitPos(_CS_DAC4+0)
0x0780	0x2081E0  	MOV	#lo_addr(_CS_DAC5), W0
0x0782	0xA09010  	BSET	[W0], BitPos(_CS_DAC5+0)
0x0784	0x2081E0  	MOV	#lo_addr(_CS_DAC6), W0
0x0786	0xA1A010  	BCLR	[W0], BitPos(_CS_DAC6+0)
0x0788	0x2081E0  	MOV	#lo_addr(_CS_DAC7), W0
0x078A	0xA0E010  	BSET	[W0], BitPos(_CS_DAC7+0)
0x078C	0x2081E0  	MOV	#lo_addr(_CS_DAC8), W0
0x078E	0xA0F010  	BSET	[W0], BitPos(_CS_DAC8+0)
0x0790	0x37005E  	BRA	L_DAC_SEC2223
L_DAC_SEC2222:
;VOLTAGE_IO.c,47 :: 		else if(kanal==13){CS_DAC1=1;CS_DAC2=1;CS_DAC3=1;CS_DAC4=1;CS_DAC5=1;CS_DAC6=1;CS_DAC7=0;CS_DAC8=1;}
0x0792	0xE1546D  	CP.B	W10, #13
0x0794	0x3A0011  	BRA NZ	L_DAC_SEC2224
L__DAC_SEC22102:
0x0796	0x2081E0  	MOV	#lo_addr(_CS_DAC1), W0
0x0798	0xA0C010  	BSET	[W0], BitPos(_CS_DAC1+0)
0x079A	0x2081E0  	MOV	#lo_addr(_CS_DAC2), W0
0x079C	0xA0D010  	BSET	[W0], BitPos(_CS_DAC2+0)
0x079E	0x2081E0  	MOV	#lo_addr(_CS_DAC3), W0
0x07A0	0xA0B010  	BSET	[W0], BitPos(_CS_DAC3+0)
0x07A2	0x2081E0  	MOV	#lo_addr(_CS_DAC4), W0
0x07A4	0xA08010  	BSET	[W0], BitPos(_CS_DAC4+0)
0x07A6	0x2081E0  	MOV	#lo_addr(_CS_DAC5), W0
0x07A8	0xA09010  	BSET	[W0], BitPos(_CS_DAC5+0)
0x07AA	0x2081E0  	MOV	#lo_addr(_CS_DAC6), W0
0x07AC	0xA0A010  	BSET	[W0], BitPos(_CS_DAC6+0)
0x07AE	0x2081E0  	MOV	#lo_addr(_CS_DAC7), W0
0x07B0	0xA1E010  	BCLR	[W0], BitPos(_CS_DAC7+0)
0x07B2	0x2081E0  	MOV	#lo_addr(_CS_DAC8), W0
0x07B4	0xA0F010  	BSET	[W0], BitPos(_CS_DAC8+0)
0x07B6	0x37004B  	BRA	L_DAC_SEC2225
L_DAC_SEC2224:
;VOLTAGE_IO.c,48 :: 		else if(kanal==14){CS_DAC1=1;CS_DAC2=1;CS_DAC3=1;CS_DAC4=1;CS_DAC5=1;CS_DAC6=1;CS_DAC7=0;CS_DAC8=1;}
0x07B8	0xE1546E  	CP.B	W10, #14
0x07BA	0x3A0011  	BRA NZ	L_DAC_SEC2226
L__DAC_SEC22103:
0x07BC	0x2081E0  	MOV	#lo_addr(_CS_DAC1), W0
0x07BE	0xA0C010  	BSET	[W0], BitPos(_CS_DAC1+0)
0x07C0	0x2081E0  	MOV	#lo_addr(_CS_DAC2), W0
0x07C2	0xA0D010  	BSET	[W0], BitPos(_CS_DAC2+0)
0x07C4	0x2081E0  	MOV	#lo_addr(_CS_DAC3), W0
0x07C6	0xA0B010  	BSET	[W0], BitPos(_CS_DAC3+0)
0x07C8	0x2081E0  	MOV	#lo_addr(_CS_DAC4), W0
0x07CA	0xA08010  	BSET	[W0], BitPos(_CS_DAC4+0)
0x07CC	0x2081E0  	MOV	#lo_addr(_CS_DAC5), W0
0x07CE	0xA09010  	BSET	[W0], BitPos(_CS_DAC5+0)
0x07D0	0x2081E0  	MOV	#lo_addr(_CS_DAC6), W0
0x07D2	0xA0A010  	BSET	[W0], BitPos(_CS_DAC6+0)
0x07D4	0x2081E0  	MOV	#lo_addr(_CS_DAC7), W0
0x07D6	0xA1E010  	BCLR	[W0], BitPos(_CS_DAC7+0)
0x07D8	0x2081E0  	MOV	#lo_addr(_CS_DAC8), W0
0x07DA	0xA0F010  	BSET	[W0], BitPos(_CS_DAC8+0)
0x07DC	0x370038  	BRA	L_DAC_SEC2227
L_DAC_SEC2226:
;VOLTAGE_IO.c,49 :: 		else if(kanal==15){CS_DAC1=1;CS_DAC2=1;CS_DAC3=1;CS_DAC4=1;CS_DAC5=1;CS_DAC6=1;CS_DAC7=1;CS_DAC8=0;}
0x07DE	0xE1546F  	CP.B	W10, #15
0x07E0	0x3A0011  	BRA NZ	L_DAC_SEC2228
L__DAC_SEC22104:
0x07E2	0x2081E0  	MOV	#lo_addr(_CS_DAC1), W0
0x07E4	0xA0C010  	BSET	[W0], BitPos(_CS_DAC1+0)
0x07E6	0x2081E0  	MOV	#lo_addr(_CS_DAC2), W0
0x07E8	0xA0D010  	BSET	[W0], BitPos(_CS_DAC2+0)
0x07EA	0x2081E0  	MOV	#lo_addr(_CS_DAC3), W0
0x07EC	0xA0B010  	BSET	[W0], BitPos(_CS_DAC3+0)
0x07EE	0x2081E0  	MOV	#lo_addr(_CS_DAC4), W0
0x07F0	0xA08010  	BSET	[W0], BitPos(_CS_DAC4+0)
0x07F2	0x2081E0  	MOV	#lo_addr(_CS_DAC5), W0
0x07F4	0xA09010  	BSET	[W0], BitPos(_CS_DAC5+0)
0x07F6	0x2081E0  	MOV	#lo_addr(_CS_DAC6), W0
0x07F8	0xA0A010  	BSET	[W0], BitPos(_CS_DAC6+0)
0x07FA	0x2081E0  	MOV	#lo_addr(_CS_DAC7), W0
0x07FC	0xA0E010  	BSET	[W0], BitPos(_CS_DAC7+0)
0x07FE	0x2081E0  	MOV	#lo_addr(_CS_DAC8), W0
0x0800	0xA1F010  	BCLR	[W0], BitPos(_CS_DAC8+0)
0x0802	0x370025  	BRA	L_DAC_SEC2229
L_DAC_SEC2228:
;VOLTAGE_IO.c,50 :: 		else if(kanal==16){CS_DAC1=1;CS_DAC2=1;CS_DAC3=1;CS_DAC4=1;CS_DAC5=1;CS_DAC6=1;CS_DAC7=1;CS_DAC8=0;}
0x0804	0xE15470  	CP.B	W10, #16
0x0806	0x3A0011  	BRA NZ	L_DAC_SEC2230
L__DAC_SEC22105:
0x0808	0x2081E0  	MOV	#lo_addr(_CS_DAC1), W0
0x080A	0xA0C010  	BSET	[W0], BitPos(_CS_DAC1+0)
0x080C	0x2081E0  	MOV	#lo_addr(_CS_DAC2), W0
0x080E	0xA0D010  	BSET	[W0], BitPos(_CS_DAC2+0)
0x0810	0x2081E0  	MOV	#lo_addr(_CS_DAC3), W0
0x0812	0xA0B010  	BSET	[W0], BitPos(_CS_DAC3+0)
0x0814	0x2081E0  	MOV	#lo_addr(_CS_DAC4), W0
0x0816	0xA08010  	BSET	[W0], BitPos(_CS_DAC4+0)
0x0818	0x2081E0  	MOV	#lo_addr(_CS_DAC5), W0
0x081A	0xA09010  	BSET	[W0], BitPos(_CS_DAC5+0)
0x081C	0x2081E0  	MOV	#lo_addr(_CS_DAC6), W0
0x081E	0xA0A010  	BSET	[W0], BitPos(_CS_DAC6+0)
0x0820	0x2081E0  	MOV	#lo_addr(_CS_DAC7), W0
0x0822	0xA0E010  	BSET	[W0], BitPos(_CS_DAC7+0)
0x0824	0x2081E0  	MOV	#lo_addr(_CS_DAC8), W0
0x0826	0xA1F010  	BCLR	[W0], BitPos(_CS_DAC8+0)
0x0828	0x370012  	BRA	L_DAC_SEC2231
L_DAC_SEC2230:
;VOLTAGE_IO.c,51 :: 		else if(kanal==0){CS_DAC1=1;CS_DAC2=1;CS_DAC3=1;CS_DAC4=1;CS_DAC5=1;CS_DAC6=1;CS_DAC7=1;CS_DAC8=1;}
0x082A	0xE15460  	CP.B	W10, #0
0x082C	0x3A0010  	BRA NZ	L_DAC_SEC2232
L__DAC_SEC22106:
0x082E	0x2081E0  	MOV	#lo_addr(_CS_DAC1), W0
0x0830	0xA0C010  	BSET	[W0], BitPos(_CS_DAC1+0)
0x0832	0x2081E0  	MOV	#lo_addr(_CS_DAC2), W0
0x0834	0xA0D010  	BSET	[W0], BitPos(_CS_DAC2+0)
0x0836	0x2081E0  	MOV	#lo_addr(_CS_DAC3), W0
0x0838	0xA0B010  	BSET	[W0], BitPos(_CS_DAC3+0)
0x083A	0x2081E0  	MOV	#lo_addr(_CS_DAC4), W0
0x083C	0xA08010  	BSET	[W0], BitPos(_CS_DAC4+0)
0x083E	0x2081E0  	MOV	#lo_addr(_CS_DAC5), W0
0x0840	0xA09010  	BSET	[W0], BitPos(_CS_DAC5+0)
0x0842	0x2081E0  	MOV	#lo_addr(_CS_DAC6), W0
0x0844	0xA0A010  	BSET	[W0], BitPos(_CS_DAC6+0)
0x0846	0x2081E0  	MOV	#lo_addr(_CS_DAC7), W0
0x0848	0xA0E010  	BSET	[W0], BitPos(_CS_DAC7+0)
0x084A	0x2081E0  	MOV	#lo_addr(_CS_DAC8), W0
0x084C	0xA0F010  	BSET	[W0], BitPos(_CS_DAC8+0)
L_DAC_SEC2232:
L_DAC_SEC2231:
L_DAC_SEC2229:
L_DAC_SEC2227:
L_DAC_SEC2225:
L_DAC_SEC2223:
L_DAC_SEC2221:
L_DAC_SEC2219:
L_DAC_SEC2217:
L_DAC_SEC2215:
L_DAC_SEC2213:
L_DAC_SEC2211:
L_DAC_SEC229:
L_DAC_SEC227:
L_DAC_SEC225:
L_DAC_SEC223:
L_DAC_SEC221:
;VOLTAGE_IO.c,52 :: 		}
L_end_DAC_SEC22:
0x084E	0x060000  	RETURN
; end of _DAC_SEC22
__Float2Longint:
0x0DA2	0xFA0000  	LNK	#0
;__Lib_MathDouble.c,479 :: 		
;__Lib_MathDouble.c,481 :: 		
0x0DA4	0x070002  	RCALL	Float2Longint__fixsfsi
;__Lib_MathDouble.c,482 :: 		
0x0DA6	0x000000040E16  	GOTO	the_end__Float2Longint
;__Lib_MathDouble.c,486 :: 		
Float2Longint__fixsfsi:
;__Lib_MathDouble.c,487 :: 		
0x0DAA	0xBE8100  	MOV.D	W0, W2
;__Lib_MathDouble.c,488 :: 		
0x0DAC	0x07001F  	RCALL	Float2Longint__funpack
;__Lib_MathDouble.c,489 :: 		
0x0DAE	0xA77004  	BTSC	W4, #7
;__Lib_MathDouble.c,490 :: 		
0x0DB0	0xA1F003  	BCLR	W3, #15
;__Lib_MathDouble.c,491 :: 		
0x0DB2	0xB10965  	SUB	#150, W5
;__Lib_MathDouble.c,492 :: 		
0x0DB4	0x320016  	BRA Z	Float2Longint_setsign
;__Lib_MathDouble.c,493 :: 		
0x0DB6	0x35000D  	BRA LT	Float2Longint_shiftright
;__Lib_MathDouble.c,494 :: 		
0x0DB8	0xE12868  	CP	W5, #8
;__Lib_MathDouble.c,495 :: 		
0x0DBA	0x350006  	BRA LT	Float2Longint_shiftleft
;__Lib_MathDouble.c,496 :: 		
0x0DBC	0x2FFFF0  	MOV	#65535, W0
;__Lib_MathDouble.c,497 :: 		
0x0DBE	0x27FFF1  	MOV	#32767, W1
;__Lib_MathDouble.c,498 :: 		
0x0DC0	0xE20006  	CP0	W3
;__Lib_MathDouble.c,499 :: 		
0x0DC2	0x3B0013  	BRA NN	Float2Longint_exit
;__Lib_MathDouble.c,500 :: 		
0x0DC4	0x280001  	MOV	#32768, W1
;__Lib_MathDouble.c,501 :: 		
0x0DC6	0x050000  	RETLW	#0, W0
;__Lib_MathDouble.c,502 :: 		
Float2Longint_shiftleft:
;__Lib_MathDouble.c,503 :: 		
0x0DC8	0x400000  	ADD	W0, W0, W0
;__Lib_MathDouble.c,504 :: 		
0x0DCA	0x488081  	ADDC	W1, W1, W1
;__Lib_MathDouble.c,505 :: 		
0x0DCC	0xE90285  	DEC	W5, W5
;__Lib_MathDouble.c,506 :: 		
0x0DCE	0x3AFFFC  	BRA NZ	Float2Longint_shiftleft
;__Lib_MathDouble.c,507 :: 		
0x0DD0	0x370008  	BRA	Float2Longint_setsign
;__Lib_MathDouble.c,508 :: 		
Float2Longint_shiftright:
;__Lib_MathDouble.c,509 :: 		
0x0DD2	0x428FF8  	ADD	W5, #24, [W15]
;__Lib_MathDouble.c,510 :: 		
0x0DD4	0x3C0002  	BRA GT	Float2Longint_shiftrightloop
;__Lib_MathDouble.c,511 :: 		
0x0DD6	0xEB0080  	CLR	W1
;__Lib_MathDouble.c,512 :: 		
0x0DD8	0x050000  	RETLW	#0, W0
;__Lib_MathDouble.c,513 :: 		
Float2Longint_shiftrightloop:
;__Lib_MathDouble.c,514 :: 		
0x0DDA	0xD10081  	LSR	W1, W1
;__Lib_MathDouble.c,515 :: 		
0x0DDC	0xD38000  	RRC	W0, W0
;__Lib_MathDouble.c,516 :: 		
0x0DDE	0xE80285  	INC	W5, W5
;__Lib_MathDouble.c,517 :: 		
0x0DE0	0x3AFFFC  	BRA NZ	Float2Longint_shiftrightloop
;__Lib_MathDouble.c,518 :: 		
Float2Longint_setsign:
;__Lib_MathDouble.c,519 :: 		
0x0DE2	0xE20006  	CP0	W3
;__Lib_MathDouble.c,520 :: 		
0x0DE4	0x3B0002  	BRA NN	Float2Longint_exit
;__Lib_MathDouble.c,521 :: 		
0x0DE6	0x100060  	SUBR	W0, #0, W0
;__Lib_MathDouble.c,522 :: 		
0x0DE8	0x1880E0  	SUBBR	W1, #0, W1
;__Lib_MathDouble.c,523 :: 		
Float2Longint_exit:
;__Lib_MathDouble.c,524 :: 		
0x0DEA	0x060000  	RETURN
;__Lib_MathDouble.c,525 :: 		
Float2Longint__funpack:
;__Lib_MathDouble.c,526 :: 		
0x0DEC	0xDE0AC7  	LSR	W1, #7, W5
;__Lib_MathDouble.c,527 :: 		
0x0DEE	0xB207F1  	AND	#127, W1
;__Lib_MathDouble.c,528 :: 		
0x0DF0	0xB20FF5  	AND	#255, W5
;__Lib_MathDouble.c,529 :: 		
0x0DF2	0x320008  	BRA Z	Float2Longint_zeroorsub
;__Lib_MathDouble.c,530 :: 		
0x0DF4	0x42CFE1  	ADD.B	W5, #1, [W15]
;__Lib_MathDouble.c,531 :: 		
0x0DF6	0x320002  	BRA Z	Float2Longint_nanorinf
;__Lib_MathDouble.c,532 :: 		
Float2Longint_finitereturn:
;__Lib_MathDouble.c,533 :: 		
0x0DF8	0xA8E002  	BSET	W1, #7
;__Lib_MathDouble.c,534 :: 		
0x0DFA	0x050024  	RETLW	#2, W4
;__Lib_MathDouble.c,535 :: 		
Float2Longint_nanorinf:
;__Lib_MathDouble.c,536 :: 		
0x0DFC	0x700F81  	IOR	W0, W1, [W15]
;__Lib_MathDouble.c,537 :: 		
0x0DFE	0x320001  	BRA Z	Float2Longint_infinite
;__Lib_MathDouble.c,538 :: 		
0x0E00	0x050804  	RETLW	#128, W4
;__Lib_MathDouble.c,539 :: 		
Float2Longint_infinite:
;__Lib_MathDouble.c,540 :: 		
0x0E02	0x050044  	RETLW	#4, W4
;__Lib_MathDouble.c,541 :: 		
Float2Longint_zeroorsub:
;__Lib_MathDouble.c,542 :: 		
0x0E04	0x700F81  	IOR	W0, W1, [W15]
;__Lib_MathDouble.c,543 :: 		
0x0E06	0x3A0002  	BRA NZ	Float2Longint_subnormal
;__Lib_MathDouble.c,544 :: 		
0x0E08	0x050014  	RETLW	#1, W4
;__Lib_MathDouble.c,545 :: 		
Float2Longint_normalize:
;__Lib_MathDouble.c,546 :: 		
0x0E0A	0xE90285  	DEC	W5, W5
;__Lib_MathDouble.c,547 :: 		
Float2Longint_subnormal:
;__Lib_MathDouble.c,548 :: 		
0x0E0C	0x400000  	ADD	W0, W0, W0
;__Lib_MathDouble.c,549 :: 		
0x0E0E	0x48C081  	ADDC.B	W1, W1, W1
;__Lib_MathDouble.c,550 :: 		
0x0E10	0x3BFFFC  	BRA NN	Float2Longint_normalize
;__Lib_MathDouble.c,551 :: 		
0x0E12	0xA8E002  	BSET	W1, #7
;__Lib_MathDouble.c,552 :: 		
0x0E14	0x050024  	RETLW	#2, W4
;__Lib_MathDouble.c,555 :: 		
the_end__Float2Longint:
;__Lib_MathDouble.c,557 :: 		
L_end__Float2Longint:
0x0E16	0xFA8000  	ULNK
0x0E18	0x060000  	RETURN
; end of __Float2Longint
0x11E4	0x208001  	MOV	#lo_addr(_analogValue), W1
0x11E6	0x280000  	MOV	#32768, W0
0x11E8	0x09000D  	REPEAT	#13
0x11EA	0x7818B0  	MOV	[W0++], [W1++]
0x11EC	0x060000  	RETURN
_timer2:
0x10FE	0xF80034  	PUSH	PSVPAG
0x1100	0xF80036  	PUSH	RCOUNT
0x1102	0x781F80  	PUSH	W0
0x1104	0x200020  	MOV	#2, W0
0x1106	0x09000C  	REPEAT	#12
0x1108	0x781FB0  	PUSH	[W0++]
;UYGULAMA.c,62 :: 		void timer2() iv IVT_ADDR_T2INTERRUPT
;UYGULAMA.c,64 :: 		if((IFS0 >> 7U)& 0x01)
0x110A	0xBF8084  	MOV	IFS0, WREG
0x110C	0xDE0047  	LSR	W0, #7, W0
0x110E	0xAE0000  	BTSS	W0, #0
0x1110	0x370003  	BRA	L_timer21
;UYGULAMA.c,67 :: 		IFS0 &= ~(0x01 << T2IF_mask);
0x1112	0x2007F1  	MOV	#127, W1
0x1114	0x200840  	MOV	#lo_addr(IFS0), W0
0x1116	0x608810  	AND	W1, [W0], [W0]
;UYGULAMA.c,68 :: 		}
L_timer21:
;UYGULAMA.c,70 :: 		}
L_end_timer2:
0x1118	0x2001A0  	MOV	#26, W0
0x111A	0x09000C  	REPEAT	#12
0x111C	0x78104F  	POP	[W0--]
0x111E	0x78004F  	POP	W0
0x1120	0xF90036  	POP	RCOUNT
0x1122	0xF90034  	POP	PSVPAG
0x1124	0x064000  	RETFIE
; end of _timer2
_Timer1Interrupt:
0x10DC	0xF80034  	PUSH	PSVPAG
0x10DE	0xF80036  	PUSH	RCOUNT
0x10E0	0x781F80  	PUSH	W0
0x10E2	0x200020  	MOV	#2, W0
0x10E4	0x09000C  	REPEAT	#12
0x10E6	0x781FB0  	PUSH	[W0++]
;UYGULAMA.c,53 :: 		void Timer1Interrupt() iv IVT_ADDR_T1INTERRUPT
;UYGULAMA.c,55 :: 		if(IFS0bits.T1IF==1)
0x10E8	0xAE6084  	BTSS	IFS0bits, #3
0x10EA	0x370002  	BRA	L_Timer1Interrupt0
;UYGULAMA.c,57 :: 		asm CLRWDT;
0x10EC	0xFE6000  	CLRWDT
;UYGULAMA.c,58 :: 		T1IF_bit=0;
0x10EE	0xA96084  	BCLR	T1IF_bit, BitPos(T1IF_bit+0)
;UYGULAMA.c,59 :: 		}
L_Timer1Interrupt0:
;UYGULAMA.c,60 :: 		}
L_end_Timer1Interrupt:
0x10F0	0x2001A0  	MOV	#26, W0
0x10F2	0x09000C  	REPEAT	#12
0x10F4	0x78104F  	POP	[W0--]
0x10F6	0x78004F  	POP	W0
0x10F8	0xF90036  	POP	RCOUNT
0x10FA	0xF90034  	POP	PSVPAG
0x10FC	0x064000  	RETFIE
; end of _Timer1Interrupt
;PID_Deneme.c,0 :: ?ICS_analogValue [2]
0x8000	0x0000 ;?ICS_analogValue+0
; end of ?ICS_analogValue
;pid.c,0 :: ?ICS_timer [4]
0x8002	0x0000 ;?ICS_timer+0
0x8004	0x0000 ;?ICS_timer+2
; end of ?ICS_timer
;VOLTAGE_IO.c,0 :: ?ICS_AN1 [2]
0x8006	0x0000 ;?ICS_AN1+0
; end of ?ICS_AN1
;PID_Deneme.c,0 :: ?ICS_Vdac [4]
0x8008	0x0000 ;?ICS_Vdac+0
0x800A	0x0000 ;?ICS_Vdac+2
; end of ?ICS_Vdac
;pid.c,0 :: ?ICS_error [4]
0x800C	0x0000 ;?ICS_error+0
0x800E	0x0000 ;?ICS_error+2
; end of ?ICS_error
;pid.c,0 :: ?ICS_prevTimer [4]
0x8010	0x0000 ;?ICS_prevTimer+0
0x8012	0x0000 ;?ICS_prevTimer+2
; end of ?ICS_prevTimer
;pid.c,0 :: ?ICS_Ut [4]
0x8014	0x0000 ;?ICS_Ut+0
0x8016	0x0000 ;?ICS_Ut+2
; end of ?ICS_Ut
;pid.c,0 :: ?ICS_proportional [4]
0x8018	0x0000 ;?ICS_proportional+0
0x801A	0x0000 ;?ICS_proportional+2
; end of ?ICS_proportional
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x0200      [74]    _I2C2_Is_Idle
0x024A      [14]    __Lib_I2C_123_p24fj_I2C2_Wait_For_Idle
0x0258      [14]    _Delay_100ms
0x0266      [10]    _Delay_1us
0x0270      [46]    _Delay_Cyc_Long
0x029E      [82]    __Divide_32x32
0x02F0      [18]    __Multiply_32x32
0x0302       [6]    _Get_Fosc_kHz
0x0308     [364]    __AddSub_FP
0x0474      [24]    _SPI1_Read
0x048C     [310]    __Div_FP
0x05C2       [8]    _SPI1_Write
0x05CA     [646]    _DAC_SEC22
0x0850      [10]    __Sub_FP
0x085A     [282]    __Mul_FP
0x0974     [182]    __Long2Float
0x0A2A      [20]    _clockCS
0x0A3E      [40]    _SPI3_Init
0x0A66      [10]    _SPI_Set_Active
0x0A70      [40]    _SPI1_Init
0x0A98      [40]    _SPI2_Init
0x0AC0      [70]    _I2C2_Init
0x0B06     [260]    _acilis
0x0C0A     [408]    _slot_CS
0x0DA2     [120]    __Float2Longint
0x0E1A      [66]    _MCP_4922
0x0E5C     [130]    _sifirla
0x0EDE     [274]    _PID_Proccess
0x0FF0      [82]    _PID_Init
0x1042     [154]    _MCP_3208V
0x10DC      [34]    _Timer1Interrupt
0x10FE      [40]    _timer2
0x1126     [190]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x081C       [0]    _CS12
0x081C       [0]    _CS13
0x081C       [0]    _CS14
0x081C       [0]    _CS11
0x081C       [0]    _CS8
0x081C       [0]    _CS9
0x081C       [0]    _CS10
0x081C       [0]    _CS19
0x081C       [0]    _LED1
0x081C       [0]    _LED2
0x081C       [0]    _CS18
0x081C       [0]    _CS15
0x081C       [0]    _CS16
0x081C       [0]    _CS17
0x0260       [2]    SPI2STATbits
0x0280       [2]    SPI3STATbits
0x0216       [2]    I2C2CONbits
0x0240       [2]    SPI1STATbits
0x06AC       [2]    RPINR22bits
0x06C4       [1]    RPOR2bits
0x06C2       [2]    RPOR1bits
0x081C       [0]    _CS5
0x081C       [0]    _CS6
0x081E       [0]    _CS7
0x081E       [0]    _CS4
0x081E       [0]    _CS1
0x081E       [0]    _CS2
0x081E       [0]    _CS3
0x081E       [0]    _LED3
0x0240       [2]    SPI1STAT
0x0242       [2]    SPI1CON
0x0260       [2]    SPI2STAT
0x0820       [2]    _SPI_Wr_Ptr
0x0216       [2]    I2C2CON
0x0218       [2]    I2C2STAT
0x0822       [2]    _SPI_Rd_Ptr
0x0084       [2]    IFS0
0x0084       [2]    IFS0bits
0x0084       [0]    T1IF_bit
0x0248       [2]    SPI1BUF
0x0262       [2]    SPI2CON
0x0280       [2]    SPI3STAT
0x0282       [2]    SPI3CON1
0x081E       [0]    _CS_DAC3
0x081E       [0]    _CS_DAC4
0x081E       [0]    _CS_DAC5
0x081E       [0]    _CS_DAC2
0x081E       [0]    _LED4
0x081E       [0]    _ACIL_RLY
0x081E       [0]    _CS_DAC1
0x02CA       [0]    load_CS
0x02E2       [0]    clk_CS
0x0214       [2]    I2C2BRG
0x02CA       [0]    idata_CS
0x081E       [0]    _CS_DAC6
0x081E       [0]    _CS_DAC7
0x081E       [0]    _CS_DAC8
0x06D8       [2]    RPOR12bits
0x081E       [0]    _CS24
0x081E       [0]    _CS23
0x081E       [0]    _CS22
0x081E       [0]    _CS25
0x02D8       [0]    TRISD1_bit
0x081E       [0]    _CS27
0x081E       [0]    _CS26
0x081E       [0]    _CS21
0x081E       [0]    _CS20
0x02F2       [0]    RG6_bit
0x02E0       [0]    TRISE5_bit
0x02E0       [0]    TRISE2_bit
0x02CA       [0]    RB12_bit
0x02E4       [0]    LATE5_bit
0x02E2       [0]    RE1_bit
0x02CA       [0]    RB13_bit
0x02E0       [0]    TRISE1_bit
0x02D8       [0]    TRISD3_bit
0x02D8       [0]    TRISD2_bit
0x02C8       [0]    TRISB13_bit
0x02E0       [0]    TRISE4_bit
0x02E0       [0]    TRISE3_bit
0x02C8       [0]    TRISB12_bit
0x02E4       [0]    emniyet_rolesi
0x02D8       [0]    slot_spi_sck_dir
0x0242       [2]    SPI1CON1bits
0x0244       [2]    SPI1CON2bits
0x02D8       [0]    slot_spi_mosi_dir
0x02C8       [0]    idata_CS_dir
0x02E0       [0]    clk_CS_dir
0x02D8       [0]    slot_spi_miso_dir
0x0742       [2]    OSCCONbits
0x06A8       [2]    RPINR20bits
0x06D6       [2]    RPOR11bits
0x0284       [2]    SPI3CON2bits
0x0262       [2]    SPI2CON1bits
0x0264       [2]    SPI2CON2bits
0x0282       [2]    SPI3CON1bits
0x0824       [4]    _pid_out
0x032C       [2]    AD1PCFGL
0x0634       [2]    CM1CON
0x0828      [40]    _pid
0x02E0       [0]    qdata_DINPUT_dir
0x02E0       [0]    clk_DINPUT_dir
0x02C8       [0]    load_CS_dir
0x02E0       [0]    latch_DINPUT_dir
0x0636       [2]    CM2CON
0x0638       [2]    CM3CON
0x02E0       [0]    emniyet_rolesi_dir
0x0800       [2]    _analogValue
0x0802       [4]    _timer
0x0806       [2]    _AN1
0x0808       [4]    _Vdac
0x080C       [4]    _error
0x0810       [4]    _prevTimer
0x0814       [4]    _Ut
0x0818       [4]    _proportional
0x0084       [2]    IFS0
0x0214       [2]    I2C2BRG
0x0216       [2]    I2C2CON
0x0218       [2]    I2C2STAT
0x0240       [2]    SPI1STAT
0x0242       [2]    SPI1CON
0x0248       [2]    SPI1BUF
0x0260       [2]    SPI2STAT
0x0262       [2]    SPI2CON
0x0014       [4]    FARG_Delay_Cyc_Long_CycNo
0x0280       [2]    SPI3STAT
0x0282       [2]    SPI3CON1
0x032C       [2]    AD1PCFGL
0x0014       [2]    FARG_SPI1_Read_buffer
0x0014       [2]    FARG_SPI1_Write_data_out
0x0014       [1]    FARG_DAC_SEC22_kanal
0x0634       [2]    CM1CON
0x0636       [2]    CM2CON
0x0638       [2]    CM3CON
0x0014       [2]    FARG_SPI_Set_Active_read_ptr
0x0016       [2]    FARG_SPI_Set_Active_write_ptr
0x0014       [4]    FARG_I2C2_Init_scl
0x0014       [2]    FARG_MCP_4922_valueDAC
0x0016       [1]    FARG_MCP_4922_kanal
0x0014       [2]    FARG_PID_Proccess_pid
0x0016       [4]    FARG_PID_Proccess_setValue
0x0014       [2]    FARG_PID_Init_pid
0x0016       [4]    FARG_PID_Init_Kp
0x0014       [1]    FARG_MCP_3208V_channel
0x0016       [1]    FARG_MCP_3208V_chip
//** Constants locations ** 
//ADDRESS    SIZE    CONSTANT
//----------------------------------------------
0x8000       [2]    ?ICS_analogValue
0x8002       [4]    ?ICS_timer
0x8006       [2]    ?ICS_AN1
0x8008       [4]    ?ICS_Vdac
0x800C       [4]    ?ICS_error
0x8010       [4]    ?ICS_prevTimer
0x8014       [4]    ?ICS_Ut
0x8018       [4]    ?ICS_proportional
